"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInitializerData = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
function getInitializerData(contractInterface, args, initializer) {
    if (initializer === false) {
        return '0x';
    }
    const allowNoInitialization = initializer === undefined && args.length === 0;
    initializer = initializer ?? 'initialize';
    const fragment = contractInterface.getFunction(initializer);
    if (fragment === null) {
        if (allowNoInitialization) {
            return '0x';
        }
        else {
            throw new upgrades_core_1.UpgradesError(`The contract has no initializer function matching the name or signature: ${initializer}`, () => `Ensure that the initializer function exists, specify an existing function with the 'initializer' option, or set the 'initializer' option to false to omit the initializer call.`);
        }
    }
    else {
        return contractInterface.encodeFunctionData(fragment, args);
    }
}
exports.getInitializerData = getInitializerData;
//# sourceMappingURL=initializer-data.js.map