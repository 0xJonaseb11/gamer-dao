"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionManagerInstance = void 0;
const SystemContractInstance_1 = require("../SystemContractInstance");
class PermissionManagerInstance extends SystemContractInstance_1.SystemContractInstance {
    constructor(signer, address) {
        super(signer, "PermissionManager.json", address);
    }
    async addVetoGroups(vetoGroups, txOptions) {
        return this.submitTransaction("addVetoGroups", [vetoGroups], txOptions);
    }
    async addUserToGroups(who, groupsToAddTo, txOptions) {
        return this.submitTransaction("addUserToGroups", [who, groupsToAddTo], txOptions);
    }
    async removeUserFromGroups(who, groupsToRemoveFrom, txOptions) {
        return this.submitTransaction("removeUserFromGroups", [who, groupsToRemoveFrom], txOptions);
    }
    async grantGroupRoles(groupTo, rolesToGrant, txOptions) {
        return this.submitTransaction("grantGroupRoles", [groupTo, rolesToGrant], txOptions);
    }
    async revokeGroupRoles(groupFrom, rolesToRevoke, txOptions) {
        return this.submitTransaction("revokeGroupRoles", [groupFrom, rolesToRevoke], txOptions);
    }
    async grantRoles(to, rolesToGrant, txOptions) {
        return this.submitTransaction("grantRoles", [to, rolesToGrant], txOptions);
    }
    async revokeRoles(from, rolesToRevoke, txOptions) {
        return this.submitTransaction("revokeRoles", [from, rolesToRevoke], txOptions);
    }
    async addPermissionsToRole(role, permissionsToAdd, allowed, txOptions) {
        return this.submitTransaction("addPermissionsToRole", [role, permissionsToAdd, allowed], txOptions);
    }
    async removePermissionsFromRole(role, permissionsToRemove, allowed, txOptions) {
        return this.submitTransaction("removePermissionsFromRole", [role, permissionsToRemove, allowed], txOptions);
    }
    async getUserGroups(who) {
        return this.instance.getUserGroups(who);
    }
    async getGroupRoles(group) {
        return this.instance.getGroupRoles(group);
    }
    async getUserRoles(who) {
        return this.instance.getUserRoles(who);
    }
    async getRolePermissions(role) {
        return this.instance.getRolePermissions(role);
    }
    async isVetoGroupExists(vetoGroup) {
        return this.instance.isVetoGroupExists(vetoGroup);
    }
    async isVetoGroupMember(vetoGroupTarget, who) {
        const membersWhoCanVeto = await this.instance.getVetoGroupMembers(vetoGroupTarget);
        return membersWhoCanVeto.includes(who);
    }
}
exports.PermissionManagerInstance = PermissionManagerInstance;
//# sourceMappingURL=PermissionManagerInstance.js.map