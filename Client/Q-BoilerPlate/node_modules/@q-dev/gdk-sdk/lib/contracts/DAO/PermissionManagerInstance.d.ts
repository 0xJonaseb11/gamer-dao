import { ContractTransaction, providers, Signer } from "ethers";
import { SystemContractInstance } from "../SystemContractInstance";
import { TxOptions } from "../../types";
import { IPermissionManager, IRBAC, PermissionManager } from "../../ethers-contracts";
export declare class PermissionManagerInstance extends SystemContractInstance<PermissionManager> {
    constructor(signer: Signer | providers.Provider, address: string);
    addVetoGroups(vetoGroups: IPermissionManager.VetoGroupStruct[], txOptions?: TxOptions): Promise<ContractTransaction>;
    addUserToGroups(who: string, groupsToAddTo: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    removeUserFromGroups(who: string, groupsToRemoveFrom: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    grantGroupRoles(groupTo: string, rolesToGrant: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    revokeGroupRoles(groupFrom: string, rolesToRevoke: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    grantRoles(to: string, rolesToGrant: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    revokeRoles(from: string, rolesToRevoke: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    addPermissionsToRole(role: string, permissionsToAdd: IRBAC.ResourceWithPermissionsStruct[], allowed: boolean, txOptions?: TxOptions): Promise<ContractTransaction>;
    removePermissionsFromRole(role: string, permissionsToRemove: IRBAC.ResourceWithPermissionsStruct[], allowed: boolean, txOptions?: TxOptions): Promise<ContractTransaction>;
    getUserGroups(who: string): Promise<string[]>;
    getGroupRoles(group: string): Promise<string[]>;
    getUserRoles(who: string): Promise<string[]>;
    getRolePermissions(role: string): Promise<[IRBAC.ResourceWithPermissionsStructOutput[], IRBAC.ResourceWithPermissionsStructOutput[]]>;
    isVetoGroupExists(vetoGroup: string): Promise<boolean>;
    isVetoGroupMember(vetoGroupTarget: string, who: string): Promise<boolean>;
}
