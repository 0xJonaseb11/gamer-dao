import { ContractTransaction, providers, Signer } from "ethers";
import { SystemContractInstance } from "../SystemContractInstance";
import { TxOptions } from "../../types";
import { DAORegistry, IDAORegistry } from "../../ethers-contracts";
export declare class DAORegistryInstance extends SystemContractInstance<DAORegistry> {
    constructor(signer: Signer | providers.Provider, address: string);
    getAccountStatuses(account: string): Promise<string[]>;
    getRegistryContractAddresses(): Promise<IDAORegistry.RegistryEntryStructOutput[]>;
    addPanel(panelName: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    removePanel(panelName: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    upgradeContract(name: string, newImplementation: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    upgradeContractAndCall(name: string, newImplementation: string, data: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    addContract(name: string, contractAddress: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    addProxyContract(name: string, contractAddress: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    justAddProxyContract(name: string, contractAddress: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    removeContract(name: string, txOptions?: TxOptions): Promise<ContractTransaction>;
}
