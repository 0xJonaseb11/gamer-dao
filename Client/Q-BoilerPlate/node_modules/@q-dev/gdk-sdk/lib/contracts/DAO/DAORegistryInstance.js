"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DAORegistryInstance = void 0;
const SystemContractInstance_1 = require("../SystemContractInstance");
class DAORegistryInstance extends SystemContractInstance_1.SystemContractInstance {
    constructor(signer, address) {
        super(signer, "DAORegistry.json", address);
    }
    async getAccountStatuses(account) {
        const accountStatus = await this.instance.getAccountStatuses(account);
        const filteredStatuses = await Promise.all(accountStatus.groups.filter((group, i) => accountStatus.isMember[i]));
        return filteredStatuses.map((status) => status.split(":")[1] || status);
    }
    async getRegistryContractAddresses() {
        return this.instance.getRegistryContractAddresses();
    }
    async addPanel(panelName, txOptions) {
        return this.submitTransaction("addPanel", [panelName], txOptions);
    }
    async removePanel(panelName, txOptions) {
        return this.submitTransaction("removePanel", [panelName], txOptions);
    }
    async upgradeContract(name, newImplementation, txOptions) {
        return this.submitTransaction("upgradeContract", [name, newImplementation], txOptions);
    }
    async upgradeContractAndCall(name, newImplementation, data, txOptions) {
        return this.submitTransaction("upgradeContractAndCall", [name, newImplementation, data], txOptions);
    }
    async addContract(name, contractAddress, txOptions) {
        return this.submitTransaction("addContract", [name, contractAddress], txOptions);
    }
    async addProxyContract(name, contractAddress, txOptions) {
        return this.submitTransaction("addProxyContract", [name, contractAddress], txOptions);
    }
    async justAddProxyContract(name, contractAddress, txOptions) {
        return this.submitTransaction("justAddProxyContract", [name, contractAddress], txOptions);
    }
    async removeContract(name, txOptions) {
        return this.submitTransaction("removeContract", [name], txOptions);
    }
}
exports.DAORegistryInstance = DAORegistryInstance;
//# sourceMappingURL=DAORegistryInstance.js.map