"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DAOInstance = void 0;
const index_1 = require("../index");
class DAOInstance {
    constructor(signer, DAORegistry) {
        this.signer = signer;
        this.DAORegistry = DAORegistry;
        this.DAORegistryInstance = new index_1.DAORegistryInstance(this.signer, this.DAORegistry);
    }
    async getConstitutionHash() {
        const storage = await this.getConfParameterStorageInstance(index_1.DAO_RESERVED_NAME);
        const hash = (await storage.getDAOParameter("constitution.hash")).value;
        return hash.toString();
    }
    async getPanelVotingTokenAddress(panelName) {
        const votingInstance = await this.getDAOVotingInstance(panelName);
        return votingInstance.instance.votingToken();
    }
    async getPermissionManagerInstance() {
        const permissionManagerAddress = await this.DAORegistryInstance.instance.getPermissionManager();
        return new index_1.PermissionManagerInstance(this.signer, permissionManagerAddress);
    }
    async getVaultInstance() {
        const vaultAddress = await this.DAORegistryInstance.instance.getDAOVault();
        return new index_1.DAOVaultInstance(this.signer, vaultAddress);
    }
    async getDAOVotingInstance(panelName) {
        const voting = panelName === index_1.DAO_RESERVED_NAME
            ? await this.DAORegistryInstance.instance.getGeneralDAOVoting(panelName)
            : await this.DAORegistryInstance.instance.getExpertsDAOVoting(panelName);
        return new index_1.DAOVotingInstance(this.signer, voting);
    }
    async getExpertsVotingInstance(panelName) {
        const voting = await this.DAORegistryInstance.instance.getExpertsDAOVoting(panelName);
        return new index_1.DAOVotingInstance(this.signer, voting);
    }
    async getGeneralVotingInstance(panelName) {
        const voting = await this.DAORegistryInstance.instance.getGeneralDAOVoting(panelName);
        return new index_1.DAOVotingInstance(this.signer, voting);
    }
    async getMemberStorageInstance(panelName) {
        const memberStorage = await this.DAORegistryInstance.instance.getDAOMemberStorage(panelName);
        return new index_1.DAOMemberStorageInstance(this.signer, memberStorage);
    }
    async getConfParameterStorageInstance(panelName) {
        const parameterStorage = await this.DAORegistryInstance.instance.getConfDAOParameterStorage(panelName);
        return new index_1.DAOParameterStorageInstance(this.signer, parameterStorage);
    }
    async getRegParameterStorageInstance(panelName) {
        const parameterStorage = await this.DAORegistryInstance.instance.getRegDAOParameterStorage(panelName);
        return new index_1.DAOParameterStorageInstance(this.signer, parameterStorage);
    }
    async createVoting(votingInstance, params) {
        return votingInstance.createProposal(params.situation, params.remark, params.callData);
    }
    async getAggregatedParameters(panelName) {
        let regParams = [];
        if (panelName !== index_1.DAO_RESERVED_NAME) {
            const parameterStorage = await this.getRegParameterStorageInstance(panelName);
            regParams = await parameterStorage.instance.getDAOParameters();
        }
        const confParameterStorage = await this.getConfParameterStorageInstance(panelName);
        const confParams = await confParameterStorage.instance.getDAOParameters();
        return regParams.concat(confParams);
    }
    async getProposalTotalParticipate(panelName, proposalId) {
        const votingInstance = await this.getDAOVotingInstance(panelName);
        const proposal = await votingInstance.getProposal(proposalId);
        if (panelName !== index_1.DAO_RESERVED_NAME) {
            const memberStorageInstance = await this.getMemberStorageInstance(panelName);
            if (proposal.params.votingType === index_1.VotingType.Restricted) {
                return await memberStorageInstance.instance.getMembersCount();
            }
        }
        const daoVaultInstance = await this.getVaultInstance();
        const token = await votingInstance.instance.votingToken();
        return daoVaultInstance.instance.getTokenSupply(token);
    }
}
exports.DAOInstance = DAOInstance;
//# sourceMappingURL=DAOInstance.js.map