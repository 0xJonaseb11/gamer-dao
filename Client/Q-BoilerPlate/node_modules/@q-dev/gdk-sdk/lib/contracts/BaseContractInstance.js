"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseContractInstance = void 0;
const ethers_1 = require("ethers");
/**
 * Base contract instance for all instances
 */
class BaseContractInstance {
    /**
     * Constructor
     * @param signer ethers signer
     * @param abi abi object
     * @param address contract address
     */
    constructor(signer, abi, address) {
        this.address = address;
        this.instance = new ethers_1.Contract(address, abi, signer);
    }
    async connectSigner(signer) {
        this.instance = this.instance.connect(signer);
    }
    async submitTransaction(methodName, args, txOptions = {}) {
        if (!txOptions.gasLimit) {
            txOptions.gasLimit = await this.instance.estimateGas[methodName](...args, txOptions);
        }
        const gasBuffer = Number(txOptions.gasBuffer || BaseContractInstance.DEFAULT_GASBUFFER);
        txOptions.gasLimit = ethers_1.BigNumber.from(await txOptions.gasLimit)
            .mul(gasBuffer * 10)
            .div(10);
        if (txOptions.gasLimit.gt(BaseContractInstance.MAX_GAS_BLOCK_LIMIT)) {
            txOptions.gasLimit = ethers_1.BigNumber.from(BaseContractInstance.MAX_GAS_BLOCK_LIMIT);
        }
        return this.instance[methodName](...args, txOptions);
    }
    /**
     * Parses transaction events from the logs in a transaction receipt
     * @param {ContractReceipt} receipt Transaction receipt containing the events in the logs
     * @returns {{[eventName: string]: Event}}
     */
    getTransactionEvents(receipt) {
        const txEvents = {};
        // for each log in the transaction receipt
        for (const event of receipt.events) {
            txEvents[event.event] = event;
        }
        return txEvents;
    }
}
exports.BaseContractInstance = BaseContractInstance;
/**
 * @field default to estimate - 1.3 would mean 30% above estimate
 * @example BaseContractInstance.DEFAULT_GASBUFFER = 1.3
 */
BaseContractInstance.DEFAULT_GASBUFFER = 1.1;
BaseContractInstance.MAX_GAS_BLOCK_LIMIT = 16000000;
//# sourceMappingURL=BaseContractInstance.js.map