import { BigNumberish, ContractTransaction, providers, Signer } from "ethers";
import { SystemContractInstance } from "../../SystemContractInstance";
import { TxOptions } from "../../../types";
import { QSBT } from "../../../ethers-contracts";
export declare class QSBTInstance extends SystemContractInstance<QSBT> {
    constructor(signer: Signer | providers.Provider, address: string);
    setContractMetadata(contractURI: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    setBaseURI(baseURI: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    setTokenURI(tokenId: BigNumberish, tokenURI: string, txOptions?: TxOptions): Promise<ContractTransaction>;
    setApprovalForAll(operator: string, approved: boolean, txOptions?: TxOptions): Promise<ContractTransaction>;
    safeTransferFrom(from: string, to: string, tokenId: BigNumberish, txOptions?: TxOptions): Promise<ContractTransaction>;
    approve(to: string, tokenId: BigNumberish, txOptions?: TxOptions): Promise<ContractTransaction>;
    mintTo(receiver: string, tokenId: BigNumberish, tokenURI: string, burnAuth: BigNumberish, txOptions?: TxOptions): Promise<ContractTransaction>;
    burn(tokenId: BigNumberish, txOptions?: TxOptions): Promise<ContractTransaction>;
    transferFrom(from: string, to: string, tokenId: BigNumberish, txOptions?: TxOptions): Promise<ContractTransaction>;
    safeTransferFromWithData(from: string, to: string, tokenId: BigNumberish, data: string, txOptions?: TxOptions): Promise<ContractTransaction>;
}
