"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QSBTInstance = void 0;
const SystemContractInstance_1 = require("../../SystemContractInstance");
class QSBTInstance extends SystemContractInstance_1.SystemContractInstance {
    constructor(signer, address) {
        super(signer, "QSBT.json", address);
    }
    async setContractMetadata(contractURI, txOptions) {
        return this.submitTransaction("setContractMetadata", [contractURI], txOptions);
    }
    async setBaseURI(baseURI, txOptions) {
        return this.submitTransaction("setBaseURI", [baseURI], txOptions);
    }
    async setTokenURI(tokenId, tokenURI, txOptions) {
        return this.submitTransaction("setTokenURI", [tokenId, tokenURI], txOptions);
    }
    async setApprovalForAll(operator, approved, txOptions) {
        return this.submitTransaction("setApprovalForAll", [operator, approved], txOptions);
    }
    async safeTransferFrom(from, to, tokenId, txOptions) {
        return this.submitTransaction("safeTransferFrom(address,address,uint256)", [from, to, tokenId], txOptions);
    }
    async approve(to, tokenId, txOptions) {
        return this.submitTransaction("approve", [to, tokenId], txOptions);
    }
    async mintTo(receiver, tokenId, tokenURI, burnAuth, txOptions) {
        return this.submitTransaction("mintTo", [receiver, tokenId, tokenURI, burnAuth], txOptions);
    }
    async burn(tokenId, txOptions) {
        return this.submitTransaction("burn", [tokenId], txOptions);
    }
    async transferFrom(from, to, tokenId, txOptions) {
        return this.submitTransaction("transferFrom", [from, to, tokenId], txOptions);
    }
    async safeTransferFromWithData(from, to, tokenId, data, txOptions) {
        return this.submitTransaction("safeTransferFrom(address,address,uint256,bytes)", [from, to, tokenId, data], txOptions);
    }
}
exports.QSBTInstance = QSBTInstance;
//# sourceMappingURL=QSBTInstance.js.map