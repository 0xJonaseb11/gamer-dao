import { ContractTransaction, providers, Signer } from "ethers";
import { SystemContractInstance } from "./SystemContractInstance";
import { TxOptions } from "../types";
import { IRBAC, RBACGroupable } from "../ethers-contracts";
export declare class RBACGroupableInstance extends SystemContractInstance<RBACGroupable> {
    readonly address: string;
    constructor(signer: Signer | providers.Provider, abiFile: string, address: string);
    addUserToGroups(who: string, groupsToAddTo: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    removeUserFromGroups(who: string, groupsToRemoveFrom: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    grantGroupRoles(groupTo: string, rolesToGrant: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    revokeGroupRoles(groupFrom: string, rolesToRevoke: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    grantRoles(to: string, rolesToGrant: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    revokeRoles(from: string, rolesToRevoke: string[], txOptions?: TxOptions): Promise<ContractTransaction>;
    addPermissionsToRole(role: string, permissionsToAdd: IRBAC.ResourceWithPermissionsStruct[], allowed: boolean, txOptions?: TxOptions): Promise<ContractTransaction>;
    removePermissionsFromRole(role: string, permissionsToRemove: IRBAC.ResourceWithPermissionsStruct[], allowed: boolean, txOptions?: TxOptions): Promise<ContractTransaction>;
    getUserGroups(who: string): Promise<string[]>;
    getGroupRoles(group: string): Promise<string[]>;
    getUserRoles(who: string): Promise<string[]>;
    getRolePermissions(role: string): Promise<{
        allowed_: [string, string[]][];
        disallowed_: [string, string[]][];
    }>;
}
