import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { DAOParameterStorage, DAOParameterStorageInterface } from "../DAOParameterStorage";
export declare class DAOParameterStorage__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "parameterName";
            readonly type: "string";
        }];
        readonly name: "DAOParameterStorage__ParameterNotFound";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DAO_PARAMETER_STORAGE_RESOURCE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "resource_";
            readonly type: "string";
        }];
        readonly name: "__DAOParameterStorage_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "member_";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "permission_";
            readonly type: "string";
        }];
        readonly name: "checkPermission";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "parameterName_";
            readonly type: "string";
        }];
        readonly name: "getDAOParameter";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDAOParameters";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getInjector";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "injector_";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getResource";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "permissionManager";
        readonly outputs: readonly [{
            readonly internalType: "contract PermissionManager";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "parameterName_";
            readonly type: "string";
        }];
        readonly name: "removeDAOParameter";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "parameterNames_";
            readonly type: "string[]";
        }];
        readonly name: "removeDAOParameters";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "parameter_";
            readonly type: "tuple";
        }];
        readonly name: "setDAOParameter";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter[]";
            readonly name: "parameters_";
            readonly type: "tuple[]";
        }];
        readonly name: "setDAOParameters";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registryAddress_";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "setDependencies";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "injector_";
            readonly type: "address";
        }];
        readonly name: "setInjector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "votingType";
        readonly outputs: readonly [{
            readonly internalType: "enum VotingType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): DAOParameterStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): DAOParameterStorage;
}
