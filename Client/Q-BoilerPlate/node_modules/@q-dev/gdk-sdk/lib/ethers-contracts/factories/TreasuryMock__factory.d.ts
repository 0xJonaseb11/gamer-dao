import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { TreasuryMock, TreasuryMockInterface } from "../TreasuryMock";
export declare class TreasuryMock__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "TREASURY_RESOURCE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "awardParts";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "member_";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "permission_";
            readonly type: "string";
        }];
        readonly name: "checkPermission";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getInjector";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "injector_";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getResource";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getResourceRecords";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "existingRole";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "resource";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "permissions";
                readonly type: "string[]";
            }];
            readonly internalType: "struct IDAOIntegration.ResourceRecords[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "permissionManager";
        readonly outputs: readonly [{
            readonly internalType: "contract PermissionManager";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registryAddress_";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "setDependencies";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "injector_";
            readonly type: "address";
        }];
        readonly name: "setInjector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "user_";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "part_";
            readonly type: "uint256";
        }];
        readonly name: "setRewardPart";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "withdrawReward";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): TreasuryMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TreasuryMock;
}
