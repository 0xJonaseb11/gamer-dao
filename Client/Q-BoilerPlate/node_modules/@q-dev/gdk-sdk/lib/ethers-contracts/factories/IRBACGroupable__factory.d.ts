import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IRBACGroupable, IRBACGroupableInterface } from "../IRBACGroupable";
export declare class IRBACGroupable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string[]";
            readonly name: "groupsToAddTo";
            readonly type: "string[]";
        }];
        readonly name: "AddedToGroups";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "groupTo";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string[]";
            readonly name: "rolesToGrant";
            readonly type: "string[]";
        }];
        readonly name: "GrantedGroupRoles";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "who";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string[]";
            readonly name: "groupsToRemoveFrom";
            readonly type: "string[]";
        }];
        readonly name: "RemovedFromGroups";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "groupFrom";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string[]";
            readonly name: "rolesToRevoke";
            readonly type: "string[]";
        }];
        readonly name: "RevokedGroupRoles";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "defaultGroupEnabled";
            readonly type: "bool";
        }];
        readonly name: "ToggledDefaultGroup";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "who_";
            readonly type: "address";
        }, {
            readonly internalType: "string[]";
            readonly name: "groupsToAddTo_";
            readonly type: "string[]";
        }];
        readonly name: "addUserToGroups";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getDefaultGroupEnabled";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "group_";
            readonly type: "string";
        }];
        readonly name: "getGroupRoles";
        readonly outputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "roles_";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "who_";
            readonly type: "address";
        }];
        readonly name: "getUserGroups";
        readonly outputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "groups_";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "groupTo_";
            readonly type: "string";
        }, {
            readonly internalType: "string[]";
            readonly name: "rolesToGrant_";
            readonly type: "string[]";
        }];
        readonly name: "grantGroupRoles";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "who_";
            readonly type: "address";
        }, {
            readonly internalType: "string[]";
            readonly name: "groupsToRemoveFrom_";
            readonly type: "string[]";
        }];
        readonly name: "removeUserFromGroups";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "groupFrom_";
            readonly type: "string";
        }, {
            readonly internalType: "string[]";
            readonly name: "rolesToRevoke_";
            readonly type: "string[]";
        }];
        readonly name: "revokeGroupRoles";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "toggleDefaultGroup";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IRBACGroupableInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IRBACGroupable;
}
