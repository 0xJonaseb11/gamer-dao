import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { MasterAccessManagement, MasterAccessManagementInterface } from "../MasterAccessManagement";
export declare class MasterAccessManagement__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "role";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "resource";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string[]";
            readonly name: "permissionsToAdd";
            readonly type: "string[]";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "allowed";
            readonly type: "bool";
        }];
        readonly name: "AddedPermissions";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string[]";
            readonly name: "rolesToGrant";
            readonly type: "string[]";
        }];
        readonly name: "GrantedRoles";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "role";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "resource";
            readonly type: "string";
        }, {
            readonly indexed: false;
            readonly internalType: "string[]";
            readonly name: "permissionsToRemove";
            readonly type: "string[]";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "allowed";
            readonly type: "bool";
        }];
        readonly name: "RemovedPermissions";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string[]";
            readonly name: "rolesToRevoke";
            readonly type: "string[]";
        }];
        readonly name: "RevokedRoles";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ALL_PERMISSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "ALL_RESOURCE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "CREATE_PERMISSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "DELETE_PERMISSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MASTER_REGISTRY_RESOURCE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MASTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "RBAC_RESOURCE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "READ_PERMISSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "UPDATE_PERMISSION";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "master_";
            readonly type: "address";
        }];
        readonly name: "__MasterAccessManagement_init";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "role_";
            readonly type: "string";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "resource";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "permissions";
                readonly type: "string[]";
            }];
            readonly internalType: "struct IRBAC.ResourceWithPermissions[]";
            readonly name: "permissionsToAdd_";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bool";
            readonly name: "allowed_";
            readonly type: "bool";
        }];
        readonly name: "addPermissionsToRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "role_";
            readonly type: "string";
        }];
        readonly name: "getRolePermissions";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "resource";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "permissions";
                readonly type: "string[]";
            }];
            readonly internalType: "struct IRBAC.ResourceWithPermissions[]";
            readonly name: "allowed_";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "resource";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "permissions";
                readonly type: "string[]";
            }];
            readonly internalType: "struct IRBAC.ResourceWithPermissions[]";
            readonly name: "disallowed_";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "who_";
            readonly type: "address";
        }];
        readonly name: "getUserRoles";
        readonly outputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "roles_";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to_";
            readonly type: "address";
        }, {
            readonly internalType: "string[]";
            readonly name: "rolesToGrant_";
            readonly type: "string[]";
        }];
        readonly name: "grantRoles";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account_";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "permission_";
            readonly type: "string";
        }];
        readonly name: "hasMasterContractsRegistryPermission";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "who_";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "resource_";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "permission_";
            readonly type: "string";
        }];
        readonly name: "hasPermission";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "isAllowed_";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "role_";
            readonly type: "string";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "resource";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "permissions";
                readonly type: "string[]";
            }];
            readonly internalType: "struct IRBAC.ResourceWithPermissions[]";
            readonly name: "permissionsToRemove_";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bool";
            readonly name: "allowed_";
            readonly type: "bool";
        }];
        readonly name: "removePermissionsFromRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from_";
            readonly type: "address";
        }, {
            readonly internalType: "string[]";
            readonly name: "rolesToRevoke_";
            readonly type: "string[]";
        }];
        readonly name: "revokeRoles";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MasterAccessManagementInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MasterAccessManagement;
}
