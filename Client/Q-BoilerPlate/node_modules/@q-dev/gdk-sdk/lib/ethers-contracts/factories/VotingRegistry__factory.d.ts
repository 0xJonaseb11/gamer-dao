import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { VotingRegistry, VotingRegistryInterface } from "../VotingRegistry";
export declare class VotingRegistry__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "VOTING_REGISTRY_RESOURCE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }, {
            readonly internalType: "address";
            readonly name: "poolAddress_";
            readonly type: "address";
        }];
        readonly name: "addProxyPool";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }];
        readonly name: "countPools";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }];
        readonly name: "getImplementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getInjector";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "injector_";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }];
        readonly name: "getProxyBeacon";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "offset_";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "limit_";
            readonly type: "uint256";
        }];
        readonly name: "injectDependenciesToExistingPools";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "data_";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "offset_";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "limit_";
            readonly type: "uint256";
        }];
        readonly name: "injectDependenciesToExistingPoolsWithData";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "offset_";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "limit_";
            readonly type: "uint256";
        }];
        readonly name: "listPools";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "pools_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "permissionManager";
        readonly outputs: readonly [{
            readonly internalType: "contract PermissionManager";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registryAddress_";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data_";
            readonly type: "bytes";
        }];
        readonly name: "setDependencies";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "injector_";
            readonly type: "address";
        }];
        readonly name: "setInjector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string[]";
            readonly name: "names_";
            readonly type: "string[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "newImplementations_";
            readonly type: "address[]";
        }];
        readonly name: "setNewImplementations";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "votingFactory";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): VotingRegistryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): VotingRegistry;
}
