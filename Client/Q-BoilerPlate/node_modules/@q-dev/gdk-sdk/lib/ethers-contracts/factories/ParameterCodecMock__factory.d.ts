import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ParameterCodecMock, ParameterCodecMockInterface } from "../ParameterCodecMock";
export declare class ParameterCodecMock__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "enum ParameterType";
            readonly name: "expected";
            readonly type: "uint8";
        }, {
            readonly internalType: "enum ParameterType";
            readonly name: "actual";
            readonly type: "uint8";
        }];
        readonly name: "InvalidParameterType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "value_";
            readonly type: "tuple";
        }];
        readonly name: "add";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "parameter_";
            readonly type: "tuple";
        }];
        readonly name: "decodeAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "parameter_";
            readonly type: "tuple";
        }];
        readonly name: "decodeBool";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "parameter_";
            readonly type: "tuple";
        }];
        readonly name: "decodeBytes";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "parameter_";
            readonly type: "tuple";
        }];
        readonly name: "decodeString";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "parameter_";
            readonly type: "tuple";
        }];
        readonly name: "decodeUint256";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "value_";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }];
        readonly name: "encodeAddress";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "value_";
            readonly type: "bool";
        }, {
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }];
        readonly name: "encodeBool";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "value_";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }];
        readonly name: "encodeBytes";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "value_";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }];
        readonly name: "encodeString";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "value_";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "name_";
            readonly type: "string";
        }];
        readonly name: "encodeUint256";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "bytes";
                readonly name: "value";
                readonly type: "bytes";
            }, {
                readonly internalType: "enum ParameterType";
                readonly name: "solidityType";
                readonly type: "uint8";
            }];
            readonly internalType: "struct Parameter";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): ParameterCodecMockInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ParameterCodecMock;
}
