import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { VotingFactory, VotingFactoryInterface } from "../VotingFactory";
export declare class VotingFactory__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "votingAddress";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "panelName";
                readonly type: "string";
            }, {
                readonly internalType: "address";
                readonly name: "votingToken";
                readonly type: "address";
            }];
            readonly indexed: false;
            readonly internalType: "struct IDAOVoting.ConstructorParams";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly name: "DeployedDAOVoting";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "VOTING_FACTORY_RESOURCE";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "daoRegistry";
        readonly outputs: readonly [{
            readonly internalType: "contract DAORegistry";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "panelName";
                readonly type: "string";
            }, {
                readonly internalType: "address";
                readonly name: "votingToken";
                readonly type: "address";
            }];
            readonly internalType: "struct IDAOVoting.ConstructorParams";
            readonly name: "params_";
            readonly type: "tuple";
        }, {
            readonly internalType: "string";
            readonly name: "votingName_";
            readonly type: "string";
        }];
        readonly name: "deployDAOVoting";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getInjector";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "injector_";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "permissionManager";
        readonly outputs: readonly [{
            readonly internalType: "contract PermissionManager";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "registryAddress_";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data_";
            readonly type: "bytes";
        }];
        readonly name: "setDependencies";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "injector_";
            readonly type: "address";
        }];
        readonly name: "setInjector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "votingRegistry";
        readonly outputs: readonly [{
            readonly internalType: "contract VotingRegistry";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): VotingFactoryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): VotingFactory;
}
