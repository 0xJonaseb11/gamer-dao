import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace IDAOVoting {
    type ConstructorParamsStruct = {
        panelName: PromiseOrValue<string>;
        votingToken: PromiseOrValue<string>;
    };
    type ConstructorParamsStructOutput = [string, string] & {
        panelName: string;
        votingToken: string;
    };
}
export interface VotingFactoryInterface extends utils.Interface {
    functions: {
        "VOTING_FACTORY_RESOURCE()": FunctionFragment;
        "daoRegistry()": FunctionFragment;
        "deployDAOVoting((string,address),string)": FunctionFragment;
        "getInjector()": FunctionFragment;
        "permissionManager()": FunctionFragment;
        "setDependencies(address,bytes)": FunctionFragment;
        "setInjector(address)": FunctionFragment;
        "votingRegistry()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "VOTING_FACTORY_RESOURCE" | "daoRegistry" | "deployDAOVoting" | "getInjector" | "permissionManager" | "setDependencies" | "setInjector" | "votingRegistry"): FunctionFragment;
    encodeFunctionData(functionFragment: "VOTING_FACTORY_RESOURCE", values?: undefined): string;
    encodeFunctionData(functionFragment: "daoRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployDAOVoting", values: [IDAOVoting.ConstructorParamsStruct, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getInjector", values?: undefined): string;
    encodeFunctionData(functionFragment: "permissionManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDependencies", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setInjector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "votingRegistry", values?: undefined): string;
    decodeFunctionResult(functionFragment: "VOTING_FACTORY_RESOURCE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "daoRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployDAOVoting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInjector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permissionManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDependencies", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInjector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "votingRegistry", data: BytesLike): Result;
    events: {
        "DeployedDAOVoting(address,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DeployedDAOVoting"): EventFragment;
}
export interface DeployedDAOVotingEventObject {
    votingAddress: string;
    arg1: IDAOVoting.ConstructorParamsStructOutput;
}
export type DeployedDAOVotingEvent = TypedEvent<[
    string,
    IDAOVoting.ConstructorParamsStructOutput
], DeployedDAOVotingEventObject>;
export type DeployedDAOVotingEventFilter = TypedEventFilter<DeployedDAOVotingEvent>;
export interface VotingFactory extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: VotingFactoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        VOTING_FACTORY_RESOURCE(overrides?: CallOverrides): Promise<[string]>;
        daoRegistry(overrides?: CallOverrides): Promise<[string]>;
        deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getInjector(overrides?: CallOverrides): Promise<[string] & {
            injector_: string;
        }>;
        permissionManager(overrides?: CallOverrides): Promise<[string]>;
        setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        votingRegistry(overrides?: CallOverrides): Promise<[string]>;
    };
    VOTING_FACTORY_RESOURCE(overrides?: CallOverrides): Promise<string>;
    daoRegistry(overrides?: CallOverrides): Promise<string>;
    deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getInjector(overrides?: CallOverrides): Promise<string>;
    permissionManager(overrides?: CallOverrides): Promise<string>;
    setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    votingRegistry(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        VOTING_FACTORY_RESOURCE(overrides?: CallOverrides): Promise<string>;
        daoRegistry(overrides?: CallOverrides): Promise<string>;
        deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getInjector(overrides?: CallOverrides): Promise<string>;
        permissionManager(overrides?: CallOverrides): Promise<string>;
        setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        votingRegistry(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DeployedDAOVoting(address,tuple)"(votingAddress?: null, arg1?: null): DeployedDAOVotingEventFilter;
        DeployedDAOVoting(votingAddress?: null, arg1?: null): DeployedDAOVotingEventFilter;
    };
    estimateGas: {
        VOTING_FACTORY_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;
        daoRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getInjector(overrides?: CallOverrides): Promise<BigNumber>;
        permissionManager(overrides?: CallOverrides): Promise<BigNumber>;
        setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        votingRegistry(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        VOTING_FACTORY_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        daoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        permissionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        votingRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
