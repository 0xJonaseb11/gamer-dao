import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface IDAOMemberStorageInterface extends utils.Interface {
    functions: {
        "addMember(address)": FunctionFragment;
        "checkPermission(address,string)": FunctionFragment;
        "getGroup()": FunctionFragment;
        "getMembers()": FunctionFragment;
        "getMembersCount()": FunctionFragment;
        "getMessage()": FunctionFragment;
        "getMessageHash()": FunctionFragment;
        "getResource()": FunctionFragment;
        "isMember(address)": FunctionFragment;
        "removeMember(address)": FunctionFragment;
        "removeMembers(address[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addMember" | "checkPermission" | "getGroup" | "getMembers" | "getMembersCount" | "getMessage" | "getMessageHash" | "getResource" | "isMember" | "removeMember" | "removeMembers"): FunctionFragment;
    encodeFunctionData(functionFragment: "addMember", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "checkPermission", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getGroup", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMembers", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMembersCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMessageHash", values?: undefined): string;
    encodeFunctionData(functionFragment: "getResource", values?: undefined): string;
    encodeFunctionData(functionFragment: "isMember", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "removeMember", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "removeMembers", values: [PromiseOrValue<string>[]]): string;
    decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGroup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMembersCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMessageHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getResource", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeMembers", data: BytesLike): Result;
    events: {
        "MemberAdded(address,string)": EventFragment;
        "MemberRemoved(address,string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MemberRemoved"): EventFragment;
}
export interface MemberAddedEventObject {
    member: string;
    group: string;
}
export type MemberAddedEvent = TypedEvent<[
    string,
    string
], MemberAddedEventObject>;
export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;
export interface MemberRemovedEventObject {
    member: string;
    group: string;
}
export type MemberRemovedEvent = TypedEvent<[
    string,
    string
], MemberRemovedEventObject>;
export type MemberRemovedEventFilter = TypedEventFilter<MemberRemovedEvent>;
export interface IDAOMemberStorage extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IDAOMemberStorageInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addMember(member_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        getGroup(overrides?: CallOverrides): Promise<[string[]]>;
        getMembers(overrides?: CallOverrides): Promise<[string[]]>;
        getMembersCount(overrides?: CallOverrides): Promise<[BigNumber]>;
        getMessage(overrides?: CallOverrides): Promise<[string]>;
        getMessageHash(overrides?: CallOverrides): Promise<[string]>;
        getResource(overrides?: CallOverrides): Promise<[string]>;
        isMember(member_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        removeMember(member_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        removeMembers(members_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addMember(member_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    getGroup(overrides?: CallOverrides): Promise<string[]>;
    getMembers(overrides?: CallOverrides): Promise<string[]>;
    getMembersCount(overrides?: CallOverrides): Promise<BigNumber>;
    getMessage(overrides?: CallOverrides): Promise<string>;
    getMessageHash(overrides?: CallOverrides): Promise<string>;
    getResource(overrides?: CallOverrides): Promise<string>;
    isMember(member_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    removeMember(member_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    removeMembers(members_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addMember(member_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        getGroup(overrides?: CallOverrides): Promise<string[]>;
        getMembers(overrides?: CallOverrides): Promise<string[]>;
        getMembersCount(overrides?: CallOverrides): Promise<BigNumber>;
        getMessage(overrides?: CallOverrides): Promise<string>;
        getMessageHash(overrides?: CallOverrides): Promise<string>;
        getResource(overrides?: CallOverrides): Promise<string>;
        isMember(member_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        removeMember(member_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        removeMembers(members_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "MemberAdded(address,string)"(member?: PromiseOrValue<string> | null, group?: null): MemberAddedEventFilter;
        MemberAdded(member?: PromiseOrValue<string> | null, group?: null): MemberAddedEventFilter;
        "MemberRemoved(address,string)"(member?: PromiseOrValue<string> | null, group?: null): MemberRemovedEventFilter;
        MemberRemoved(member?: PromiseOrValue<string> | null, group?: null): MemberRemovedEventFilter;
    };
    estimateGas: {
        addMember(member_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getGroup(overrides?: CallOverrides): Promise<BigNumber>;
        getMembers(overrides?: CallOverrides): Promise<BigNumber>;
        getMembersCount(overrides?: CallOverrides): Promise<BigNumber>;
        getMessage(overrides?: CallOverrides): Promise<BigNumber>;
        getMessageHash(overrides?: CallOverrides): Promise<BigNumber>;
        getResource(overrides?: CallOverrides): Promise<BigNumber>;
        isMember(member_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        removeMember(member_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        removeMembers(members_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addMember(member_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getGroup(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMembersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getMessageHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getResource(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isMember(member_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeMember(member_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        removeMembers(members_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
