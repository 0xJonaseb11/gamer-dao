import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace IDAORegistry {
    type AccountStatusStruct = {
        groups: PromiseOrValue<string>[];
        isMember: PromiseOrValue<boolean>[];
    };
    type AccountStatusStructOutput = [string[], boolean[]] & {
        groups: string[];
        isMember: boolean[];
    };
    type RegistryEntryStruct = {
        name: PromiseOrValue<string>;
        address_: PromiseOrValue<string>;
    };
    type RegistryEntryStructOutput = [string, string] & {
        name: string;
        address_: string;
    };
}
export interface IDAORegistryInterface extends utils.Interface {
    functions: {
        "addPanel(string)": FunctionFragment;
        "checkPermission(address,string)": FunctionFragment;
        "getAccountStatuses(address)": FunctionFragment;
        "getConfDAOParameterStorage(string)": FunctionFragment;
        "getDAOMemberStorage(string)": FunctionFragment;
        "getDAOVault()": FunctionFragment;
        "getExpertsDAOVoting(string)": FunctionFragment;
        "getGeneralDAOVoting(string)": FunctionFragment;
        "getPanels()": FunctionFragment;
        "getRegDAOParameterStorage(string)": FunctionFragment;
        "getRegistryContractAddresses()": FunctionFragment;
        "getResource()": FunctionFragment;
        "getVotingFactory()": FunctionFragment;
        "getVotingRegistry()": FunctionFragment;
        "isAbleToAddPanel()": FunctionFragment;
        "removePanel(string)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addPanel" | "checkPermission" | "getAccountStatuses" | "getConfDAOParameterStorage" | "getDAOMemberStorage" | "getDAOVault" | "getExpertsDAOVoting" | "getGeneralDAOVoting" | "getPanels" | "getRegDAOParameterStorage" | "getRegistryContractAddresses" | "getResource" | "getVotingFactory" | "getVotingRegistry" | "isAbleToAddPanel" | "removePanel"): FunctionFragment;
    encodeFunctionData(functionFragment: "addPanel", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "checkPermission", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getAccountStatuses", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getConfDAOParameterStorage", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getDAOMemberStorage", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getDAOVault", values?: undefined): string;
    encodeFunctionData(functionFragment: "getExpertsDAOVoting", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getGeneralDAOVoting", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getPanels", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRegDAOParameterStorage", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getRegistryContractAddresses", values?: undefined): string;
    encodeFunctionData(functionFragment: "getResource", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVotingFactory", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVotingRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "isAbleToAddPanel", values?: undefined): string;
    encodeFunctionData(functionFragment: "removePanel", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "addPanel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountStatuses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfDAOParameterStorage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDAOMemberStorage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDAOVault", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpertsDAOVoting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGeneralDAOVoting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPanels", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegDAOParameterStorage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegistryContractAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getResource", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVotingFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVotingRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAbleToAddPanel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removePanel", data: BytesLike): Result;
    events: {
        "Initialized()": EventFragment;
        "PanelAdded(string)": EventFragment;
        "PanelRemoved(string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PanelAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PanelRemoved"): EventFragment;
}
export interface InitializedEventObject {
}
export type InitializedEvent = TypedEvent<[], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface PanelAddedEventObject {
    panelName: string;
}
export type PanelAddedEvent = TypedEvent<[string], PanelAddedEventObject>;
export type PanelAddedEventFilter = TypedEventFilter<PanelAddedEvent>;
export interface PanelRemovedEventObject {
    panelName: string;
}
export type PanelRemovedEvent = TypedEvent<[string], PanelRemovedEventObject>;
export type PanelRemovedEventFilter = TypedEventFilter<PanelRemovedEvent>;
export interface IDAORegistry extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IDAORegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addPanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            IDAORegistry.AccountStatusStructOutput
        ] & {
            status: IDAORegistry.AccountStatusStructOutput;
        }>;
        getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getDAOVault(overrides?: CallOverrides): Promise<[string]>;
        getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getPanels(overrides?: CallOverrides): Promise<[string[]]>;
        getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getRegistryContractAddresses(overrides?: CallOverrides): Promise<[IDAORegistry.RegistryEntryStructOutput[]]>;
        getResource(overrides?: CallOverrides): Promise<[string]>;
        getVotingFactory(overrides?: CallOverrides): Promise<[string]>;
        getVotingRegistry(overrides?: CallOverrides): Promise<[string]>;
        isAbleToAddPanel(overrides?: CallOverrides): Promise<[boolean]>;
        removePanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addPanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<IDAORegistry.AccountStatusStructOutput>;
    getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getDAOVault(overrides?: CallOverrides): Promise<string>;
    getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getPanels(overrides?: CallOverrides): Promise<string[]>;
    getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getRegistryContractAddresses(overrides?: CallOverrides): Promise<IDAORegistry.RegistryEntryStructOutput[]>;
    getResource(overrides?: CallOverrides): Promise<string>;
    getVotingFactory(overrides?: CallOverrides): Promise<string>;
    getVotingRegistry(overrides?: CallOverrides): Promise<string>;
    isAbleToAddPanel(overrides?: CallOverrides): Promise<boolean>;
    removePanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addPanel(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<IDAORegistry.AccountStatusStructOutput>;
        getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getDAOVault(overrides?: CallOverrides): Promise<string>;
        getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getPanels(overrides?: CallOverrides): Promise<string[]>;
        getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getRegistryContractAddresses(overrides?: CallOverrides): Promise<IDAORegistry.RegistryEntryStructOutput[]>;
        getResource(overrides?: CallOverrides): Promise<string>;
        getVotingFactory(overrides?: CallOverrides): Promise<string>;
        getVotingRegistry(overrides?: CallOverrides): Promise<string>;
        isAbleToAddPanel(overrides?: CallOverrides): Promise<boolean>;
        removePanel(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Initialized()"(): InitializedEventFilter;
        Initialized(): InitializedEventFilter;
        "PanelAdded(string)"(panelName?: null): PanelAddedEventFilter;
        PanelAdded(panelName?: null): PanelAddedEventFilter;
        "PanelRemoved(string)"(panelName?: null): PanelRemovedEventFilter;
        PanelRemoved(panelName?: null): PanelRemovedEventFilter;
    };
    estimateGas: {
        addPanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getDAOVault(overrides?: CallOverrides): Promise<BigNumber>;
        getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getPanels(overrides?: CallOverrides): Promise<BigNumber>;
        getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegistryContractAddresses(overrides?: CallOverrides): Promise<BigNumber>;
        getResource(overrides?: CallOverrides): Promise<BigNumber>;
        getVotingFactory(overrides?: CallOverrides): Promise<BigNumber>;
        getVotingRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        isAbleToAddPanel(overrides?: CallOverrides): Promise<BigNumber>;
        removePanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addPanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDAOVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPanels(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegistryContractAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getResource(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVotingFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVotingRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAbleToAddPanel(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removePanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
