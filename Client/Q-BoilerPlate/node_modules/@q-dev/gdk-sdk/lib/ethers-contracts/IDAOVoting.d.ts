import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace IDAOVoting {
    type VotingParamsStruct = {
        votingType: PromiseOrValue<BigNumberish>;
        votingStartTime: PromiseOrValue<BigNumberish>;
        votingEndTime: PromiseOrValue<BigNumberish>;
        vetoEndTime: PromiseOrValue<BigNumberish>;
        proposalExecutionPeriod: PromiseOrValue<BigNumberish>;
        requiredQuorum: PromiseOrValue<BigNumberish>;
        requiredMajority: PromiseOrValue<BigNumberish>;
        requiredVetoQuorum: PromiseOrValue<BigNumberish>;
    };
    type VotingParamsStructOutput = [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        votingType: number;
        votingStartTime: BigNumber;
        votingEndTime: BigNumber;
        vetoEndTime: BigNumber;
        proposalExecutionPeriod: BigNumber;
        requiredQuorum: BigNumber;
        requiredMajority: BigNumber;
        requiredVetoQuorum: BigNumber;
    };
    type VotingCountersStruct = {
        votedFor: PromiseOrValue<BigNumberish>;
        votedAgainst: PromiseOrValue<BigNumberish>;
        vetoesCount: PromiseOrValue<BigNumberish>;
    };
    type VotingCountersStructOutput = [BigNumber, BigNumber, BigNumber] & {
        votedFor: BigNumber;
        votedAgainst: BigNumber;
        vetoesCount: BigNumber;
    };
    type DAOProposalStruct = {
        id: PromiseOrValue<BigNumberish>;
        remark: PromiseOrValue<string>;
        relatedExpertPanel: PromiseOrValue<string>;
        relatedVotingSituation: PromiseOrValue<string>;
        callData: PromiseOrValue<BytesLike>;
        target: PromiseOrValue<string>;
        params: IDAOVoting.VotingParamsStruct;
        counters: IDAOVoting.VotingCountersStruct;
        executed: PromiseOrValue<boolean>;
    };
    type DAOProposalStructOutput = [
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        IDAOVoting.VotingParamsStructOutput,
        IDAOVoting.VotingCountersStructOutput,
        boolean
    ] & {
        id: BigNumber;
        remark: string;
        relatedExpertPanel: string;
        relatedVotingSituation: string;
        callData: string;
        target: string;
        params: IDAOVoting.VotingParamsStructOutput;
        counters: IDAOVoting.VotingCountersStructOutput;
        executed: boolean;
    };
    type DAOVotingValuesStruct = {
        votingPeriod: PromiseOrValue<BigNumberish>;
        vetoPeriod: PromiseOrValue<BigNumberish>;
        proposalExecutionPeriod: PromiseOrValue<BigNumberish>;
        requiredQuorum: PromiseOrValue<BigNumberish>;
        requiredMajority: PromiseOrValue<BigNumberish>;
        requiredVetoQuorum: PromiseOrValue<BigNumberish>;
        votingType: PromiseOrValue<BigNumberish>;
        votingTarget: PromiseOrValue<string>;
        votingMinAmount: PromiseOrValue<BigNumberish>;
    };
    type DAOVotingValuesStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
    ] & {
        votingPeriod: BigNumber;
        vetoPeriod: BigNumber;
        proposalExecutionPeriod: BigNumber;
        requiredQuorum: BigNumber;
        requiredMajority: BigNumber;
        requiredVetoQuorum: BigNumber;
        votingType: BigNumber;
        votingTarget: string;
        votingMinAmount: BigNumber;
    };
    type InitialSituationStruct = {
        votingSituationName: PromiseOrValue<string>;
        votingValues: IDAOVoting.DAOVotingValuesStruct;
    };
    type InitialSituationStructOutput = [
        string,
        IDAOVoting.DAOVotingValuesStructOutput
    ] & {
        votingSituationName: string;
        votingValues: IDAOVoting.DAOVotingValuesStructOutput;
    };
}
export interface IDAOVotingInterface extends utils.Interface {
    functions: {
        "checkPermission(address,string)": FunctionFragment;
        "createDAOVotingSituation((string,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,uint256)))": FunctionFragment;
        "createProposal(string,string,bytes)": FunctionFragment;
        "executeProposal(uint256)": FunctionFragment;
        "getProposal(uint256)": FunctionFragment;
        "getProposalList(uint256,uint256)": FunctionFragment;
        "getProposalStatus(uint256)": FunctionFragment;
        "getResource()": FunctionFragment;
        "getVotingSituations()": FunctionFragment;
        "removeVotingSituation(string)": FunctionFragment;
        "veto(uint256)": FunctionFragment;
        "voteAgainst(uint256)": FunctionFragment;
        "voteFor(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "checkPermission" | "createDAOVotingSituation" | "createProposal" | "executeProposal" | "getProposal" | "getProposalList" | "getProposalStatus" | "getResource" | "getVotingSituations" | "removeVotingSituation" | "veto" | "voteAgainst" | "voteFor"): FunctionFragment;
    encodeFunctionData(functionFragment: "checkPermission", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "createDAOVotingSituation", values: [IDAOVoting.InitialSituationStruct]): string;
    encodeFunctionData(functionFragment: "createProposal", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "executeProposal", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getProposal", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getProposalList", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getProposalStatus", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getResource", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVotingSituations", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeVotingSituation", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "veto", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "voteAgainst", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "voteFor", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "checkPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createDAOVotingSituation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProposalList", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProposalStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getResource", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVotingSituations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeVotingSituation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "veto", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "voteAgainst", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "voteFor", data: BytesLike): Result;
    events: {
        "ProposalCreated(uint256,tuple)": EventFragment;
        "ProposalExecuted(uint256)": EventFragment;
        "UserVetoed(uint256,address)": EventFragment;
        "UserVoted(uint256,address,uint256,uint8)": EventFragment;
        "VotingSituationCreated(string,tuple)": EventFragment;
        "VotingSituationRemoved(string)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UserVetoed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UserVoted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VotingSituationCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VotingSituationRemoved"): EventFragment;
}
export interface ProposalCreatedEventObject {
    id: BigNumber;
    proposal: IDAOVoting.DAOProposalStructOutput;
}
export type ProposalCreatedEvent = TypedEvent<[
    BigNumber,
    IDAOVoting.DAOProposalStructOutput
], ProposalCreatedEventObject>;
export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;
export interface ProposalExecutedEventObject {
    id: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<[
    BigNumber
], ProposalExecutedEventObject>;
export type ProposalExecutedEventFilter = TypedEventFilter<ProposalExecutedEvent>;
export interface UserVetoedEventObject {
    id: BigNumber;
    voter: string;
}
export type UserVetoedEvent = TypedEvent<[
    BigNumber,
    string
], UserVetoedEventObject>;
export type UserVetoedEventFilter = TypedEventFilter<UserVetoedEvent>;
export interface UserVotedEventObject {
    id: BigNumber;
    voter: string;
    votingPower: BigNumber;
    option: number;
}
export type UserVotedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber,
    number
], UserVotedEventObject>;
export type UserVotedEventFilter = TypedEventFilter<UserVotedEvent>;
export interface VotingSituationCreatedEventObject {
    name: string;
    values: IDAOVoting.DAOVotingValuesStructOutput;
}
export type VotingSituationCreatedEvent = TypedEvent<[
    string,
    IDAOVoting.DAOVotingValuesStructOutput
], VotingSituationCreatedEventObject>;
export type VotingSituationCreatedEventFilter = TypedEventFilter<VotingSituationCreatedEvent>;
export interface VotingSituationRemovedEventObject {
    name: string;
}
export type VotingSituationRemovedEvent = TypedEvent<[
    string
], VotingSituationRemovedEventObject>;
export type VotingSituationRemovedEventFilter = TypedEventFilter<VotingSituationRemovedEvent>;
export interface IDAOVoting extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IDAOVotingInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        createDAOVotingSituation(conf_: IDAOVoting.InitialSituationStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        createProposal(situation_: PromiseOrValue<string>, remark_: PromiseOrValue<string>, callData_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        executeProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[IDAOVoting.DAOProposalStructOutput]>;
        getProposalList(offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[IDAOVoting.DAOProposalStructOutput[]]>;
        getProposalStatus(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        getResource(overrides?: CallOverrides): Promise<[string]>;
        getVotingSituations(overrides?: CallOverrides): Promise<[string[]]>;
        removeVotingSituation(situation_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        veto(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        voteAgainst(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        voteFor(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    createDAOVotingSituation(conf_: IDAOVoting.InitialSituationStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    createProposal(situation_: PromiseOrValue<string>, remark_: PromiseOrValue<string>, callData_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    executeProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IDAOVoting.DAOProposalStructOutput>;
    getProposalList(offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IDAOVoting.DAOProposalStructOutput[]>;
    getProposalStatus(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    getResource(overrides?: CallOverrides): Promise<string>;
    getVotingSituations(overrides?: CallOverrides): Promise<string[]>;
    removeVotingSituation(situation_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    veto(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    voteAgainst(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    voteFor(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        createDAOVotingSituation(conf_: IDAOVoting.InitialSituationStruct, overrides?: CallOverrides): Promise<void>;
        createProposal(situation_: PromiseOrValue<string>, remark_: PromiseOrValue<string>, callData_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        executeProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        getProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IDAOVoting.DAOProposalStructOutput>;
        getProposalList(offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<IDAOVoting.DAOProposalStructOutput[]>;
        getProposalStatus(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        getResource(overrides?: CallOverrides): Promise<string>;
        getVotingSituations(overrides?: CallOverrides): Promise<string[]>;
        removeVotingSituation(situation_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        veto(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        voteAgainst(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        voteFor(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ProposalCreated(uint256,tuple)"(id?: PromiseOrValue<BigNumberish> | null, proposal?: null): ProposalCreatedEventFilter;
        ProposalCreated(id?: PromiseOrValue<BigNumberish> | null, proposal?: null): ProposalCreatedEventFilter;
        "ProposalExecuted(uint256)"(id?: PromiseOrValue<BigNumberish> | null): ProposalExecutedEventFilter;
        ProposalExecuted(id?: PromiseOrValue<BigNumberish> | null): ProposalExecutedEventFilter;
        "UserVetoed(uint256,address)"(id?: PromiseOrValue<BigNumberish> | null, voter?: PromiseOrValue<string> | null): UserVetoedEventFilter;
        UserVetoed(id?: PromiseOrValue<BigNumberish> | null, voter?: PromiseOrValue<string> | null): UserVetoedEventFilter;
        "UserVoted(uint256,address,uint256,uint8)"(id?: PromiseOrValue<BigNumberish> | null, voter?: PromiseOrValue<string> | null, votingPower?: null, option?: null): UserVotedEventFilter;
        UserVoted(id?: PromiseOrValue<BigNumberish> | null, voter?: PromiseOrValue<string> | null, votingPower?: null, option?: null): UserVotedEventFilter;
        "VotingSituationCreated(string,tuple)"(name?: PromiseOrValue<string> | null, values?: null): VotingSituationCreatedEventFilter;
        VotingSituationCreated(name?: PromiseOrValue<string> | null, values?: null): VotingSituationCreatedEventFilter;
        "VotingSituationRemoved(string)"(name?: PromiseOrValue<string> | null): VotingSituationRemovedEventFilter;
        VotingSituationRemoved(name?: PromiseOrValue<string> | null): VotingSituationRemovedEventFilter;
    };
    estimateGas: {
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        createDAOVotingSituation(conf_: IDAOVoting.InitialSituationStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        createProposal(situation_: PromiseOrValue<string>, remark_: PromiseOrValue<string>, callData_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        executeProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getProposalList(offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getProposalStatus(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getResource(overrides?: CallOverrides): Promise<BigNumber>;
        getVotingSituations(overrides?: CallOverrides): Promise<BigNumber>;
        removeVotingSituation(situation_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        veto(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        voteAgainst(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        voteFor(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        createDAOVotingSituation(conf_: IDAOVoting.InitialSituationStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        createProposal(situation_: PromiseOrValue<string>, remark_: PromiseOrValue<string>, callData_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        executeProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getProposal(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProposalList(offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProposalStatus(proposalId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getResource(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVotingSituations(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeVotingSituation(situation_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        veto(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        voteAgainst(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        voteFor(proposalId_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
