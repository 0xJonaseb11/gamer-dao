import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace IDAOVoting {
    type ConstructorParamsStruct = {
        panelName: PromiseOrValue<string>;
        votingToken: PromiseOrValue<string>;
    };
    type ConstructorParamsStructOutput = [string, string] & {
        panelName: string;
        votingToken: string;
    };
}
export interface IVotingFactoryInterface extends utils.Interface {
    functions: {
        "deployDAOVoting((string,address),string)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "deployDAOVoting"): FunctionFragment;
    encodeFunctionData(functionFragment: "deployDAOVoting", values: [IDAOVoting.ConstructorParamsStruct, PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "deployDAOVoting", data: BytesLike): Result;
    events: {
        "DeployedDAOVoting(address,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DeployedDAOVoting"): EventFragment;
}
export interface DeployedDAOVotingEventObject {
    votingAddress: string;
    arg1: IDAOVoting.ConstructorParamsStructOutput;
}
export type DeployedDAOVotingEvent = TypedEvent<[
    string,
    IDAOVoting.ConstructorParamsStructOutput
], DeployedDAOVotingEventObject>;
export type DeployedDAOVotingEventFilter = TypedEventFilter<DeployedDAOVotingEvent>;
export interface IVotingFactory extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IVotingFactoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "DeployedDAOVoting(address,tuple)"(votingAddress?: null, arg1?: null): DeployedDAOVotingEventFilter;
        DeployedDAOVoting(votingAddress?: null, arg1?: null): DeployedDAOVotingEventFilter;
    };
    estimateGas: {
        deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        deployDAOVoting(params_: IDAOVoting.ConstructorParamsStruct, votingName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
