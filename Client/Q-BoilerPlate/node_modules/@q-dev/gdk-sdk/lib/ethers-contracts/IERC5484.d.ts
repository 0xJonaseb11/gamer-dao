import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface IERC5484Interface extends utils.Interface {
    functions: {
        "burnAuth(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "burnAuth"): FunctionFragment;
    encodeFunctionData(functionFragment: "burnAuth", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "burnAuth", data: BytesLike): Result;
    events: {
        "Issued(address,address,uint256,uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
}
export interface IssuedEventObject {
    from: string;
    to: string;
    tokenId: BigNumber;
    burnAuth: number;
}
export type IssuedEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    number
], IssuedEventObject>;
export type IssuedEventFilter = TypedEventFilter<IssuedEvent>;
export interface IERC5484 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IERC5484Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        burnAuth(tokenId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
    };
    burnAuth(tokenId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    callStatic: {
        burnAuth(tokenId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    };
    filters: {
        "Issued(address,address,uint256,uint8)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null, burnAuth?: null): IssuedEventFilter;
        Issued(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, tokenId?: PromiseOrValue<BigNumberish> | null, burnAuth?: null): IssuedEventFilter;
    };
    estimateGas: {
        burnAuth(tokenId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        burnAuth(tokenId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
