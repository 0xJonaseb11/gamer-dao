import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface RoleManagedRegistryInterface extends utils.Interface {
    functions: {
        "addContract(string,address)": FunctionFragment;
        "addProxyContract(string,address)": FunctionFragment;
        "getContract(string)": FunctionFragment;
        "getImplementation(string)": FunctionFragment;
        "getPermissionManager()": FunctionFragment;
        "getProxyUpgrader()": FunctionFragment;
        "hasContract(string)": FunctionFragment;
        "injectDependencies(string)": FunctionFragment;
        "justAddProxyContract(string,address)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "removeContract(string)": FunctionFragment;
        "upgradeContract(string,address)": FunctionFragment;
        "upgradeContractAndCall(string,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addContract" | "addProxyContract" | "getContract" | "getImplementation" | "getPermissionManager" | "getProxyUpgrader" | "hasContract" | "injectDependencies" | "justAddProxyContract" | "multicall" | "removeContract" | "upgradeContract" | "upgradeContractAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "addContract", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "addProxyContract", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getContract", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getImplementation", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getPermissionManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "getProxyUpgrader", values?: undefined): string;
    encodeFunctionData(functionFragment: "hasContract", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "injectDependencies", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "justAddProxyContract", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "removeContract", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeContract", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeContractAndCall", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "addContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addProxyContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPermissionManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProxyUpgrader", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "injectDependencies", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "justAddProxyContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeContractAndCall", data: BytesLike): Result;
    events: {
        "ContractAdded(string,address)": EventFragment;
        "ContractRemoved(string)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "ProxyContractAdded(string,address,address)": EventFragment;
        "ProxyContractUpgraded(string,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ContractAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ContractRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProxyContractAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProxyContractUpgraded"): EventFragment;
}
export interface ContractAddedEventObject {
    name: string;
    contractAddress: string;
}
export type ContractAddedEvent = TypedEvent<[
    string,
    string
], ContractAddedEventObject>;
export type ContractAddedEventFilter = TypedEventFilter<ContractAddedEvent>;
export interface ContractRemovedEventObject {
    name: string;
}
export type ContractRemovedEvent = TypedEvent<[
    string
], ContractRemovedEventObject>;
export type ContractRemovedEventFilter = TypedEventFilter<ContractRemovedEvent>;
export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface ProxyContractAddedEventObject {
    name: string;
    contractAddress: string;
    implementation: string;
}
export type ProxyContractAddedEvent = TypedEvent<[
    string,
    string,
    string
], ProxyContractAddedEventObject>;
export type ProxyContractAddedEventFilter = TypedEventFilter<ProxyContractAddedEvent>;
export interface ProxyContractUpgradedEventObject {
    name: string;
    newImplementation: string;
}
export type ProxyContractUpgradedEvent = TypedEvent<[
    string,
    string
], ProxyContractUpgradedEventObject>;
export type ProxyContractUpgradedEventFilter = TypedEventFilter<ProxyContractUpgradedEvent>;
export interface RoleManagedRegistry extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RoleManagedRegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getPermissionManager(overrides?: CallOverrides): Promise<[string]>;
        getProxyUpgrader(overrides?: CallOverrides): Promise<[string]>;
        hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        injectDependencies(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        removeContract(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getPermissionManager(overrides?: CallOverrides): Promise<string>;
    getProxyUpgrader(overrides?: CallOverrides): Promise<string>;
    hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    injectDependencies(name_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    removeContract(name_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getPermissionManager(overrides?: CallOverrides): Promise<string>;
        getProxyUpgrader(overrides?: CallOverrides): Promise<string>;
        hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        injectDependencies(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        removeContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ContractAdded(string,address)"(name?: null, contractAddress?: null): ContractAddedEventFilter;
        ContractAdded(name?: null, contractAddress?: null): ContractAddedEventFilter;
        "ContractRemoved(string)"(name?: null): ContractRemovedEventFilter;
        ContractRemoved(name?: null): ContractRemovedEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "ProxyContractAdded(string,address,address)"(name?: null, contractAddress?: null, implementation?: null): ProxyContractAddedEventFilter;
        ProxyContractAdded(name?: null, contractAddress?: null, implementation?: null): ProxyContractAddedEventFilter;
        "ProxyContractUpgraded(string,address)"(name?: null, newImplementation?: null): ProxyContractUpgradedEventFilter;
        ProxyContractUpgraded(name?: null, newImplementation?: null): ProxyContractUpgradedEventFilter;
    };
    estimateGas: {
        addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getPermissionManager(overrides?: CallOverrides): Promise<BigNumber>;
        getProxyUpgrader(overrides?: CallOverrides): Promise<BigNumber>;
        hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        injectDependencies(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        removeContract(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPermissionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProxyUpgrader(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        injectDependencies(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        removeContract(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
