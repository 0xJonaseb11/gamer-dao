import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface DAOMetadataMockInterface extends utils.Interface {
    functions: {
        "daoURI()": FunctionFragment;
        "init(string)": FunctionFragment;
        "setDAOMetadata(string)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "daoURI" | "init" | "setDAOMetadata"): FunctionFragment;
    encodeFunctionData(functionFragment: "daoURI", values?: undefined): string;
    encodeFunctionData(functionFragment: "init", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDAOMetadata", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "daoURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDAOMetadata", data: BytesLike): Result;
    events: {
        "DAOURIChanged(string)": EventFragment;
        "Initialized(uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DAOURIChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
export interface DAOURIChangedEventObject {
    daoURI: string;
}
export type DAOURIChangedEvent = TypedEvent<[string], DAOURIChangedEventObject>;
export type DAOURIChangedEventFilter = TypedEventFilter<DAOURIChangedEvent>;
export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface DAOMetadataMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DAOMetadataMockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        daoURI(overrides?: CallOverrides): Promise<[string] & {
            _daoURI: string;
        }>;
        init(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    daoURI(overrides?: CallOverrides): Promise<string>;
    init(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        daoURI(overrides?: CallOverrides): Promise<string>;
        init(daoURI_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DAOURIChanged(string)"(daoURI?: null): DAOURIChangedEventFilter;
        DAOURIChanged(daoURI?: null): DAOURIChangedEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
    };
    estimateGas: {
        daoURI(overrides?: CallOverrides): Promise<BigNumber>;
        init(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        daoURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        init(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
