import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace IDAOIntegration {
    type ResourceRecordsStruct = {
        existingRole: PromiseOrValue<string>;
        resource: PromiseOrValue<string>;
        permissions: PromiseOrValue<string>[];
    };
    type ResourceRecordsStructOutput = [string, string, string[]] & {
        existingRole: string;
        resource: string;
        permissions: string[];
    };
}
export interface BadExternalModuleInterface extends utils.Interface {
    functions: {
        "getResourceRecords()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getResourceRecords"): FunctionFragment;
    encodeFunctionData(functionFragment: "getResourceRecords", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getResourceRecords", data: BytesLike): Result;
    events: {};
}
export interface BadExternalModule extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: BadExternalModuleInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getResourceRecords(overrides?: CallOverrides): Promise<[IDAOIntegration.ResourceRecordsStructOutput[]]>;
    };
    getResourceRecords(overrides?: CallOverrides): Promise<IDAOIntegration.ResourceRecordsStructOutput[]>;
    callStatic: {
        getResourceRecords(overrides?: CallOverrides): Promise<IDAOIntegration.ResourceRecordsStructOutput[]>;
    };
    filters: {};
    estimateGas: {
        getResourceRecords(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getResourceRecords(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
