import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface TimeLocksMockInterface extends utils.Interface {
    functions: {
        "add(uint256,uint256)": FunctionFragment;
        "elements()": FunctionFragment;
        "isAbleToWithdraw(uint256,uint256)": FunctionFragment;
        "isAbleToWithdrawView(uint256,uint256)": FunctionFragment;
        "length()": FunctionFragment;
        "lock(uint256,uint256)": FunctionFragment;
        "purgeTimeLocks()": FunctionFragment;
        "removeTop()": FunctionFragment;
        "top()": FunctionFragment;
        "topValue()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "add" | "elements" | "isAbleToWithdraw" | "isAbleToWithdrawView" | "length" | "lock" | "purgeTimeLocks" | "removeTop" | "top" | "topValue"): FunctionFragment;
    encodeFunctionData(functionFragment: "add", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "elements", values?: undefined): string;
    encodeFunctionData(functionFragment: "isAbleToWithdraw", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isAbleToWithdrawView", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "length", values?: undefined): string;
    encodeFunctionData(functionFragment: "lock", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "purgeTimeLocks", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeTop", values?: undefined): string;
    encodeFunctionData(functionFragment: "top", values?: undefined): string;
    encodeFunctionData(functionFragment: "topValue", values?: undefined): string;
    decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "elements", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAbleToWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAbleToWithdrawView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "purgeTimeLocks", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeTop", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "top", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "topValue", data: BytesLike): Result;
    events: {};
}
export interface TimeLocksMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TimeLocksMockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        add(value_: PromiseOrValue<BigNumberish>, priority_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        elements(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;
        isAbleToWithdraw(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isAbleToWithdrawView(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        length(overrides?: CallOverrides): Promise<[BigNumber]>;
        lock(amount_: PromiseOrValue<BigNumberish>, timeToLock_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        purgeTimeLocks(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        removeTop(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        top(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        topValue(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    add(value_: PromiseOrValue<BigNumberish>, priority_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    elements(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;
    isAbleToWithdraw(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isAbleToWithdrawView(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    length(overrides?: CallOverrides): Promise<BigNumber>;
    lock(amount_: PromiseOrValue<BigNumberish>, timeToLock_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    purgeTimeLocks(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    removeTop(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    top(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
    topValue(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        add(value_: PromiseOrValue<BigNumberish>, priority_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        elements(overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;
        isAbleToWithdraw(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        isAbleToWithdrawView(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        length(overrides?: CallOverrides): Promise<BigNumber>;
        lock(amount_: PromiseOrValue<BigNumberish>, timeToLock_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        purgeTimeLocks(overrides?: CallOverrides): Promise<void>;
        removeTop(overrides?: CallOverrides): Promise<void>;
        top(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;
        topValue(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        add(value_: PromiseOrValue<BigNumberish>, priority_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        elements(overrides?: CallOverrides): Promise<BigNumber>;
        isAbleToWithdraw(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isAbleToWithdrawView(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        length(overrides?: CallOverrides): Promise<BigNumber>;
        lock(amount_: PromiseOrValue<BigNumberish>, timeToLock_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        purgeTimeLocks(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        removeTop(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        top(overrides?: CallOverrides): Promise<BigNumber>;
        topValue(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        add(value_: PromiseOrValue<BigNumberish>, priority_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        elements(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAbleToWithdraw(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isAbleToWithdrawView(userBalance_: PromiseOrValue<BigNumberish>, amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        length(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lock(amount_: PromiseOrValue<BigNumberish>, timeToLock_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        purgeTimeLocks(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        removeTop(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        top(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        topValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
