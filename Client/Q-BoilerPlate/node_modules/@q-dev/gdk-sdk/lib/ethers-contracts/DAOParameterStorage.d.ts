import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export type ParameterStruct = {
    name: PromiseOrValue<string>;
    value: PromiseOrValue<BytesLike>;
    solidityType: PromiseOrValue<BigNumberish>;
};
export type ParameterStructOutput = [string, string, number] & {
    name: string;
    value: string;
    solidityType: number;
};
export interface DAOParameterStorageInterface extends utils.Interface {
    functions: {
        "DAO_PARAMETER_STORAGE_RESOURCE()": FunctionFragment;
        "__DAOParameterStorage_init(string)": FunctionFragment;
        "checkPermission(address,string)": FunctionFragment;
        "getDAOParameter(string)": FunctionFragment;
        "getDAOParameters()": FunctionFragment;
        "getInjector()": FunctionFragment;
        "getResource()": FunctionFragment;
        "permissionManager()": FunctionFragment;
        "removeDAOParameter(string)": FunctionFragment;
        "removeDAOParameters(string[])": FunctionFragment;
        "setDAOParameter((string,bytes,uint8))": FunctionFragment;
        "setDAOParameters((string,bytes,uint8)[])": FunctionFragment;
        "setDependencies(address,bytes)": FunctionFragment;
        "setInjector(address)": FunctionFragment;
        "votingType()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DAO_PARAMETER_STORAGE_RESOURCE" | "__DAOParameterStorage_init" | "checkPermission" | "getDAOParameter" | "getDAOParameters" | "getInjector" | "getResource" | "permissionManager" | "removeDAOParameter" | "removeDAOParameters" | "setDAOParameter" | "setDAOParameters" | "setDependencies" | "setInjector" | "votingType"): FunctionFragment;
    encodeFunctionData(functionFragment: "DAO_PARAMETER_STORAGE_RESOURCE", values?: undefined): string;
    encodeFunctionData(functionFragment: "__DAOParameterStorage_init", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "checkPermission", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getDAOParameter", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getDAOParameters", values?: undefined): string;
    encodeFunctionData(functionFragment: "getInjector", values?: undefined): string;
    encodeFunctionData(functionFragment: "getResource", values?: undefined): string;
    encodeFunctionData(functionFragment: "permissionManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeDAOParameter", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "removeDAOParameters", values: [PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "setDAOParameter", values: [ParameterStruct]): string;
    encodeFunctionData(functionFragment: "setDAOParameters", values: [ParameterStruct[]]): string;
    encodeFunctionData(functionFragment: "setDependencies", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setInjector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "votingType", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DAO_PARAMETER_STORAGE_RESOURCE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "__DAOParameterStorage_init", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDAOParameter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDAOParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInjector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getResource", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permissionManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeDAOParameter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeDAOParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDAOParameter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDAOParameters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDependencies", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInjector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "votingType", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface DAOParameterStorage extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DAOParameterStorageInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DAO_PARAMETER_STORAGE_RESOURCE(overrides?: CallOverrides): Promise<[string]>;
        __DAOParameterStorage_init(resource_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        getDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[ParameterStructOutput]>;
        getDAOParameters(overrides?: CallOverrides): Promise<[ParameterStructOutput[]]>;
        getInjector(overrides?: CallOverrides): Promise<[string] & {
            injector_: string;
        }>;
        getResource(overrides?: CallOverrides): Promise<[string]>;
        permissionManager(overrides?: CallOverrides): Promise<[string]>;
        removeDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        removeDAOParameters(parameterNames_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDAOParameter(parameter_: ParameterStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDAOParameters(parameters_: ParameterStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        votingType(overrides?: CallOverrides): Promise<[number]>;
    };
    DAO_PARAMETER_STORAGE_RESOURCE(overrides?: CallOverrides): Promise<string>;
    __DAOParameterStorage_init(resource_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    getDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ParameterStructOutput>;
    getDAOParameters(overrides?: CallOverrides): Promise<ParameterStructOutput[]>;
    getInjector(overrides?: CallOverrides): Promise<string>;
    getResource(overrides?: CallOverrides): Promise<string>;
    permissionManager(overrides?: CallOverrides): Promise<string>;
    removeDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    removeDAOParameters(parameterNames_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDAOParameter(parameter_: ParameterStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDAOParameters(parameters_: ParameterStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    votingType(overrides?: CallOverrides): Promise<number>;
    callStatic: {
        DAO_PARAMETER_STORAGE_RESOURCE(overrides?: CallOverrides): Promise<string>;
        __DAOParameterStorage_init(resource_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        getDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ParameterStructOutput>;
        getDAOParameters(overrides?: CallOverrides): Promise<ParameterStructOutput[]>;
        getInjector(overrides?: CallOverrides): Promise<string>;
        getResource(overrides?: CallOverrides): Promise<string>;
        permissionManager(overrides?: CallOverrides): Promise<string>;
        removeDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        removeDAOParameters(parameterNames_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        setDAOParameter(parameter_: ParameterStruct, overrides?: CallOverrides): Promise<void>;
        setDAOParameters(parameters_: ParameterStruct[], overrides?: CallOverrides): Promise<void>;
        setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        votingType(overrides?: CallOverrides): Promise<number>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
    };
    estimateGas: {
        DAO_PARAMETER_STORAGE_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;
        __DAOParameterStorage_init(resource_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getDAOParameters(overrides?: CallOverrides): Promise<BigNumber>;
        getInjector(overrides?: CallOverrides): Promise<BigNumber>;
        getResource(overrides?: CallOverrides): Promise<BigNumber>;
        permissionManager(overrides?: CallOverrides): Promise<BigNumber>;
        removeDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        removeDAOParameters(parameterNames_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDAOParameter(parameter_: ParameterStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDAOParameters(parameters_: ParameterStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        votingType(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DAO_PARAMETER_STORAGE_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        __DAOParameterStorage_init(resource_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDAOParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getResource(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        permissionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeDAOParameter(parameterName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        removeDAOParameters(parameterNames_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDAOParameter(parameter_: ParameterStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDAOParameters(parameters_: ParameterStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        votingType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
