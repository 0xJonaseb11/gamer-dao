import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace IRBAC {
    type ResourceWithPermissionsStruct = {
        resource: PromiseOrValue<string>;
        permissions: PromiseOrValue<string>[];
    };
    type ResourceWithPermissionsStructOutput = [string, string[]] & {
        resource: string;
        permissions: string[];
    };
}
export interface MasterAccessManagementInterface extends utils.Interface {
    functions: {
        "ALL_PERMISSION()": FunctionFragment;
        "ALL_RESOURCE()": FunctionFragment;
        "CREATE_PERMISSION()": FunctionFragment;
        "DELETE_PERMISSION()": FunctionFragment;
        "MASTER_REGISTRY_RESOURCE()": FunctionFragment;
        "MASTER_ROLE()": FunctionFragment;
        "RBAC_RESOURCE()": FunctionFragment;
        "READ_PERMISSION()": FunctionFragment;
        "UPDATE_PERMISSION()": FunctionFragment;
        "__MasterAccessManagement_init(address)": FunctionFragment;
        "addPermissionsToRole(string,(string,string[])[],bool)": FunctionFragment;
        "getRolePermissions(string)": FunctionFragment;
        "getUserRoles(address)": FunctionFragment;
        "grantRoles(address,string[])": FunctionFragment;
        "hasMasterContractsRegistryPermission(address,string)": FunctionFragment;
        "hasPermission(address,string,string)": FunctionFragment;
        "removePermissionsFromRole(string,(string,string[])[],bool)": FunctionFragment;
        "revokeRoles(address,string[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ALL_PERMISSION" | "ALL_RESOURCE" | "CREATE_PERMISSION" | "DELETE_PERMISSION" | "MASTER_REGISTRY_RESOURCE" | "MASTER_ROLE" | "RBAC_RESOURCE" | "READ_PERMISSION" | "UPDATE_PERMISSION" | "__MasterAccessManagement_init" | "addPermissionsToRole" | "getRolePermissions" | "getUserRoles" | "grantRoles" | "hasMasterContractsRegistryPermission" | "hasPermission" | "removePermissionsFromRole" | "revokeRoles"): FunctionFragment;
    encodeFunctionData(functionFragment: "ALL_PERMISSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "ALL_RESOURCE", values?: undefined): string;
    encodeFunctionData(functionFragment: "CREATE_PERMISSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "DELETE_PERMISSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "MASTER_REGISTRY_RESOURCE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MASTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "RBAC_RESOURCE", values?: undefined): string;
    encodeFunctionData(functionFragment: "READ_PERMISSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPDATE_PERMISSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "__MasterAccessManagement_init", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "addPermissionsToRole", values: [
        PromiseOrValue<string>,
        IRBAC.ResourceWithPermissionsStruct[],
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "getRolePermissions", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getUserRoles", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "grantRoles", values: [PromiseOrValue<string>, PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "hasMasterContractsRegistryPermission", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasPermission", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "removePermissionsFromRole", values: [
        PromiseOrValue<string>,
        IRBAC.ResourceWithPermissionsStruct[],
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "revokeRoles", values: [PromiseOrValue<string>, PromiseOrValue<string>[]]): string;
    decodeFunctionResult(functionFragment: "ALL_PERMISSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ALL_RESOURCE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "CREATE_PERMISSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DELETE_PERMISSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MASTER_REGISTRY_RESOURCE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MASTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "RBAC_RESOURCE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "READ_PERMISSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPDATE_PERMISSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "__MasterAccessManagement_init", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addPermissionsToRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRolePermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUserRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasMasterContractsRegistryPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removePermissionsFromRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRoles", data: BytesLike): Result;
    events: {
        "AddedPermissions(string,string,string[],bool)": EventFragment;
        "GrantedRoles(address,string[])": EventFragment;
        "Initialized(uint8)": EventFragment;
        "RemovedPermissions(string,string,string[],bool)": EventFragment;
        "RevokedRoles(address,string[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddedPermissions"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GrantedRoles"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemovedPermissions"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RevokedRoles"): EventFragment;
}
export interface AddedPermissionsEventObject {
    role: string;
    resource: string;
    permissionsToAdd: string[];
    allowed: boolean;
}
export type AddedPermissionsEvent = TypedEvent<[
    string,
    string,
    string[],
    boolean
], AddedPermissionsEventObject>;
export type AddedPermissionsEventFilter = TypedEventFilter<AddedPermissionsEvent>;
export interface GrantedRolesEventObject {
    to: string;
    rolesToGrant: string[];
}
export type GrantedRolesEvent = TypedEvent<[
    string,
    string[]
], GrantedRolesEventObject>;
export type GrantedRolesEventFilter = TypedEventFilter<GrantedRolesEvent>;
export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface RemovedPermissionsEventObject {
    role: string;
    resource: string;
    permissionsToRemove: string[];
    allowed: boolean;
}
export type RemovedPermissionsEvent = TypedEvent<[
    string,
    string,
    string[],
    boolean
], RemovedPermissionsEventObject>;
export type RemovedPermissionsEventFilter = TypedEventFilter<RemovedPermissionsEvent>;
export interface RevokedRolesEventObject {
    from: string;
    rolesToRevoke: string[];
}
export type RevokedRolesEvent = TypedEvent<[
    string,
    string[]
], RevokedRolesEventObject>;
export type RevokedRolesEventFilter = TypedEventFilter<RevokedRolesEvent>;
export interface MasterAccessManagement extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MasterAccessManagementInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ALL_PERMISSION(overrides?: CallOverrides): Promise<[string]>;
        ALL_RESOURCE(overrides?: CallOverrides): Promise<[string]>;
        CREATE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;
        DELETE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;
        MASTER_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<[string]>;
        MASTER_ROLE(overrides?: CallOverrides): Promise<[string]>;
        RBAC_RESOURCE(overrides?: CallOverrides): Promise<[string]>;
        READ_PERMISSION(overrides?: CallOverrides): Promise<[string]>;
        UPDATE_PERMISSION(overrides?: CallOverrides): Promise<[string]>;
        __MasterAccessManagement_init(master_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addPermissionsToRole(role_: PromiseOrValue<string>, permissionsToAdd_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getRolePermissions(role_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            IRBAC.ResourceWithPermissionsStructOutput[],
            IRBAC.ResourceWithPermissionsStructOutput[]
        ] & {
            allowed_: IRBAC.ResourceWithPermissionsStructOutput[];
            disallowed_: IRBAC.ResourceWithPermissionsStructOutput[];
        }>;
        getUserRoles(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]] & {
            roles_: string[];
        }>;
        grantRoles(to_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasMasterContractsRegistryPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hasPermission(who_: PromiseOrValue<string>, resource_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            isAllowed_: boolean;
        }>;
        removePermissionsFromRole(role_: PromiseOrValue<string>, permissionsToRemove_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        revokeRoles(from_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    ALL_PERMISSION(overrides?: CallOverrides): Promise<string>;
    ALL_RESOURCE(overrides?: CallOverrides): Promise<string>;
    CREATE_PERMISSION(overrides?: CallOverrides): Promise<string>;
    DELETE_PERMISSION(overrides?: CallOverrides): Promise<string>;
    MASTER_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;
    MASTER_ROLE(overrides?: CallOverrides): Promise<string>;
    RBAC_RESOURCE(overrides?: CallOverrides): Promise<string>;
    READ_PERMISSION(overrides?: CallOverrides): Promise<string>;
    UPDATE_PERMISSION(overrides?: CallOverrides): Promise<string>;
    __MasterAccessManagement_init(master_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addPermissionsToRole(role_: PromiseOrValue<string>, permissionsToAdd_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getRolePermissions(role_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        IRBAC.ResourceWithPermissionsStructOutput[],
        IRBAC.ResourceWithPermissionsStructOutput[]
    ] & {
        allowed_: IRBAC.ResourceWithPermissionsStructOutput[];
        disallowed_: IRBAC.ResourceWithPermissionsStructOutput[];
    }>;
    getUserRoles(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
    grantRoles(to_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasMasterContractsRegistryPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hasPermission(who_: PromiseOrValue<string>, resource_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    removePermissionsFromRole(role_: PromiseOrValue<string>, permissionsToRemove_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    revokeRoles(from_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        ALL_PERMISSION(overrides?: CallOverrides): Promise<string>;
        ALL_RESOURCE(overrides?: CallOverrides): Promise<string>;
        CREATE_PERMISSION(overrides?: CallOverrides): Promise<string>;
        DELETE_PERMISSION(overrides?: CallOverrides): Promise<string>;
        MASTER_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;
        MASTER_ROLE(overrides?: CallOverrides): Promise<string>;
        RBAC_RESOURCE(overrides?: CallOverrides): Promise<string>;
        READ_PERMISSION(overrides?: CallOverrides): Promise<string>;
        UPDATE_PERMISSION(overrides?: CallOverrides): Promise<string>;
        __MasterAccessManagement_init(master_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        addPermissionsToRole(role_: PromiseOrValue<string>, permissionsToAdd_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        getRolePermissions(role_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            IRBAC.ResourceWithPermissionsStructOutput[],
            IRBAC.ResourceWithPermissionsStructOutput[]
        ] & {
            allowed_: IRBAC.ResourceWithPermissionsStructOutput[];
            disallowed_: IRBAC.ResourceWithPermissionsStructOutput[];
        }>;
        getUserRoles(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
        grantRoles(to_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        hasMasterContractsRegistryPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hasPermission(who_: PromiseOrValue<string>, resource_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        removePermissionsFromRole(role_: PromiseOrValue<string>, permissionsToRemove_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        revokeRoles(from_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AddedPermissions(string,string,string[],bool)"(role?: null, resource?: null, permissionsToAdd?: null, allowed?: null): AddedPermissionsEventFilter;
        AddedPermissions(role?: null, resource?: null, permissionsToAdd?: null, allowed?: null): AddedPermissionsEventFilter;
        "GrantedRoles(address,string[])"(to?: null, rolesToGrant?: null): GrantedRolesEventFilter;
        GrantedRoles(to?: null, rolesToGrant?: null): GrantedRolesEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "RemovedPermissions(string,string,string[],bool)"(role?: null, resource?: null, permissionsToRemove?: null, allowed?: null): RemovedPermissionsEventFilter;
        RemovedPermissions(role?: null, resource?: null, permissionsToRemove?: null, allowed?: null): RemovedPermissionsEventFilter;
        "RevokedRoles(address,string[])"(from?: null, rolesToRevoke?: null): RevokedRolesEventFilter;
        RevokedRoles(from?: null, rolesToRevoke?: null): RevokedRolesEventFilter;
    };
    estimateGas: {
        ALL_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;
        ALL_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;
        CREATE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;
        DELETE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;
        MASTER_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;
        MASTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        RBAC_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;
        READ_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;
        UPDATE_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;
        __MasterAccessManagement_init(master_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addPermissionsToRole(role_: PromiseOrValue<string>, permissionsToAdd_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getRolePermissions(role_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getUserRoles(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRoles(to_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasMasterContractsRegistryPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hasPermission(who_: PromiseOrValue<string>, resource_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        removePermissionsFromRole(role_: PromiseOrValue<string>, permissionsToRemove_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        revokeRoles(from_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        ALL_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        ALL_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        CREATE_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        DELETE_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MASTER_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        MASTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        RBAC_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        READ_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        UPDATE_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        __MasterAccessManagement_init(master_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addPermissionsToRole(role_: PromiseOrValue<string>, permissionsToAdd_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getRolePermissions(role_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUserRoles(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRoles(to_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasMasterContractsRegistryPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasPermission(who_: PromiseOrValue<string>, resource_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removePermissionsFromRole(role_: PromiseOrValue<string>, permissionsToRemove_: IRBAC.ResourceWithPermissionsStruct[], allowed_: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        revokeRoles(from_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
