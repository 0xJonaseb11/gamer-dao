import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export type ParameterStruct = {
    name: PromiseOrValue<string>;
    value: PromiseOrValue<BytesLike>;
    solidityType: PromiseOrValue<BigNumberish>;
};
export type ParameterStructOutput = [string, string, number] & {
    name: string;
    value: string;
    solidityType: number;
};
export type DAOPanelConstructorParametersStruct = {
    votingParams: IDAOVoting.ConstructorParamsStruct;
    situations: IDAOVoting.InitialSituationStruct[];
    initialParameters: ParameterStruct[];
    initialMembers: PromiseOrValue<string>[];
};
export type DAOPanelConstructorParametersStructOutput = [
    IDAOVoting.ConstructorParamsStructOutput,
    IDAOVoting.InitialSituationStructOutput[],
    ParameterStructOutput[],
    string[]
] & {
    votingParams: IDAOVoting.ConstructorParamsStructOutput;
    situations: IDAOVoting.InitialSituationStructOutput[];
    initialParameters: ParameterStructOutput[];
    initialMembers: string[];
};
export type DAOConstructorParametersStruct = {
    masterAccess: PromiseOrValue<string>;
    votingNames: PromiseOrValue<string>[];
    votingAddresses: PromiseOrValue<string>[];
    daoURI: PromiseOrValue<string>;
    deploymentSalt: PromiseOrValue<BytesLike>;
    mainPanelParams: DAOPanelConstructorParametersStruct;
};
export type DAOConstructorParametersStructOutput = [
    string,
    string[],
    string[],
    string,
    string,
    DAOPanelConstructorParametersStructOutput
] & {
    masterAccess: string;
    votingNames: string[];
    votingAddresses: string[];
    daoURI: string;
    deploymentSalt: string;
    mainPanelParams: DAOPanelConstructorParametersStructOutput;
};
export declare namespace IDAOVoting {
    type ConstructorParamsStruct = {
        panelName: PromiseOrValue<string>;
        votingToken: PromiseOrValue<string>;
    };
    type ConstructorParamsStructOutput = [string, string] & {
        panelName: string;
        votingToken: string;
    };
    type DAOVotingValuesStruct = {
        votingPeriod: PromiseOrValue<BigNumberish>;
        vetoPeriod: PromiseOrValue<BigNumberish>;
        proposalExecutionPeriod: PromiseOrValue<BigNumberish>;
        requiredQuorum: PromiseOrValue<BigNumberish>;
        requiredMajority: PromiseOrValue<BigNumberish>;
        requiredVetoQuorum: PromiseOrValue<BigNumberish>;
        votingType: PromiseOrValue<BigNumberish>;
        votingTarget: PromiseOrValue<string>;
        votingMinAmount: PromiseOrValue<BigNumberish>;
    };
    type DAOVotingValuesStructOutput = [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
    ] & {
        votingPeriod: BigNumber;
        vetoPeriod: BigNumber;
        proposalExecutionPeriod: BigNumber;
        requiredQuorum: BigNumber;
        requiredMajority: BigNumber;
        requiredVetoQuorum: BigNumber;
        votingType: BigNumber;
        votingTarget: string;
        votingMinAmount: BigNumber;
    };
    type InitialSituationStruct = {
        votingSituationName: PromiseOrValue<string>;
        votingValues: IDAOVoting.DAOVotingValuesStruct;
    };
    type InitialSituationStructOutput = [
        string,
        IDAOVoting.DAOVotingValuesStructOutput
    ] & {
        votingSituationName: string;
        votingValues: IDAOVoting.DAOVotingValuesStructOutput;
    };
}
export declare namespace IPermissionManager {
    type VetoGroupStruct = {
        target: PromiseOrValue<string>;
        linkedMemberStorage: PromiseOrValue<string>;
    };
    type VetoGroupStructOutput = [string, string] & {
        target: string;
        linkedMemberStorage: string;
    };
}
export interface IMasterDAOFactoryInterface extends utils.Interface {
    functions: {
        "configureVetoGroups(address,(address,address)[])": FunctionFragment;
        "configureVotingSituations(address,(string,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,uint256))[])": FunctionFragment;
        "deployDAO((address,string[],address[],string,bytes32,((string,address),(string,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,uint256))[],(string,bytes,uint8)[],address[])))": FunctionFragment;
        "deployDAOPanel(address,((string,address),(string,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,string,uint256))[],(string,bytes,uint8)[],address[]))": FunctionFragment;
        "predictDAOAddress(bytes32)": FunctionFragment;
        "restoreRegistryPools(string,address[])": FunctionFragment;
        "revokeDAOCreatorRole(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "configureVetoGroups" | "configureVotingSituations" | "deployDAO" | "deployDAOPanel" | "predictDAOAddress" | "restoreRegistryPools" | "revokeDAOCreatorRole"): FunctionFragment;
    encodeFunctionData(functionFragment: "configureVetoGroups", values: [PromiseOrValue<string>, IPermissionManager.VetoGroupStruct[]]): string;
    encodeFunctionData(functionFragment: "configureVotingSituations", values: [PromiseOrValue<string>, IDAOVoting.InitialSituationStruct[]]): string;
    encodeFunctionData(functionFragment: "deployDAO", values: [DAOConstructorParametersStruct]): string;
    encodeFunctionData(functionFragment: "deployDAOPanel", values: [PromiseOrValue<string>, DAOPanelConstructorParametersStruct]): string;
    encodeFunctionData(functionFragment: "predictDAOAddress", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "restoreRegistryPools", values: [PromiseOrValue<string>, PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "revokeDAOCreatorRole", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "configureVetoGroups", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "configureVotingSituations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployDAO", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployDAOPanel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "predictDAOAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "restoreRegistryPools", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeDAOCreatorRole", data: BytesLike): Result;
    events: {
        "DeployedDAOMemberStorage(address,address)": EventFragment;
        "DeployedDAOPanelVoting(address,address)": EventFragment;
        "DeployedDAOParameterStorage(address,address)": EventFragment;
        "DeployedDAORegistry(address,tuple)": EventFragment;
        "DeployedDAOVault(address,address)": EventFragment;
        "DeployedPermissionManager(address,address)": EventFragment;
        "DeployedVotingFactory(address,address)": EventFragment;
        "DeployedVotingRegistry(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DeployedDAOMemberStorage"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DeployedDAOPanelVoting"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DeployedDAOParameterStorage"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DeployedDAORegistry"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DeployedDAOVault"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DeployedPermissionManager"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DeployedVotingFactory"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DeployedVotingRegistry"): EventFragment;
}
export interface DeployedDAOMemberStorageEventObject {
    daoMemberStorageProxy_: string;
    arg1: string;
}
export type DeployedDAOMemberStorageEvent = TypedEvent<[
    string,
    string
], DeployedDAOMemberStorageEventObject>;
export type DeployedDAOMemberStorageEventFilter = TypedEventFilter<DeployedDAOMemberStorageEvent>;
export interface DeployedDAOPanelVotingEventObject {
    daoPanelVotingProxy_: string;
    arg1: string;
}
export type DeployedDAOPanelVotingEvent = TypedEvent<[
    string,
    string
], DeployedDAOPanelVotingEventObject>;
export type DeployedDAOPanelVotingEventFilter = TypedEventFilter<DeployedDAOPanelVotingEvent>;
export interface DeployedDAOParameterStorageEventObject {
    daoParameterStorageProxy_: string;
    arg1: string;
}
export type DeployedDAOParameterStorageEvent = TypedEvent<[
    string,
    string
], DeployedDAOParameterStorageEventObject>;
export type DeployedDAOParameterStorageEventFilter = TypedEventFilter<DeployedDAOParameterStorageEvent>;
export interface DeployedDAORegistryEventObject {
    daoRegistryProxy_: string;
    params_: DAOConstructorParametersStructOutput;
}
export type DeployedDAORegistryEvent = TypedEvent<[
    string,
    DAOConstructorParametersStructOutput
], DeployedDAORegistryEventObject>;
export type DeployedDAORegistryEventFilter = TypedEventFilter<DeployedDAORegistryEvent>;
export interface DeployedDAOVaultEventObject {
    daoVaultProxy_: string;
    arg1: string;
}
export type DeployedDAOVaultEvent = TypedEvent<[
    string,
    string
], DeployedDAOVaultEventObject>;
export type DeployedDAOVaultEventFilter = TypedEventFilter<DeployedDAOVaultEvent>;
export interface DeployedPermissionManagerEventObject {
    permissionManagerProxy_: string;
    arg1: string;
}
export type DeployedPermissionManagerEvent = TypedEvent<[
    string,
    string
], DeployedPermissionManagerEventObject>;
export type DeployedPermissionManagerEventFilter = TypedEventFilter<DeployedPermissionManagerEvent>;
export interface DeployedVotingFactoryEventObject {
    votingFactoryProxy_: string;
    arg1: string;
}
export type DeployedVotingFactoryEvent = TypedEvent<[
    string,
    string
], DeployedVotingFactoryEventObject>;
export type DeployedVotingFactoryEventFilter = TypedEventFilter<DeployedVotingFactoryEvent>;
export interface DeployedVotingRegistryEventObject {
    votingRegistryProxy_: string;
    arg1: string;
}
export type DeployedVotingRegistryEvent = TypedEvent<[
    string,
    string
], DeployedVotingRegistryEventObject>;
export type DeployedVotingRegistryEventFilter = TypedEventFilter<DeployedVotingRegistryEvent>;
export interface IMasterDAOFactory extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMasterDAOFactoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        configureVetoGroups(dao_: PromiseOrValue<string>, vetoGroups_: IPermissionManager.VetoGroupStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        configureVotingSituations(dao_: PromiseOrValue<string>, situations_: IDAOVoting.InitialSituationStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deployDAO(params_: DAOConstructorParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deployDAOPanel(dao_: PromiseOrValue<string>, daoPanelParams_: DAOPanelConstructorParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        predictDAOAddress(salt_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        restoreRegistryPools(name_: PromiseOrValue<string>, pools_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        revokeDAOCreatorRole(dao_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    configureVetoGroups(dao_: PromiseOrValue<string>, vetoGroups_: IPermissionManager.VetoGroupStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    configureVotingSituations(dao_: PromiseOrValue<string>, situations_: IDAOVoting.InitialSituationStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deployDAO(params_: DAOConstructorParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deployDAOPanel(dao_: PromiseOrValue<string>, daoPanelParams_: DAOPanelConstructorParametersStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    predictDAOAddress(salt_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    restoreRegistryPools(name_: PromiseOrValue<string>, pools_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    revokeDAOCreatorRole(dao_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        configureVetoGroups(dao_: PromiseOrValue<string>, vetoGroups_: IPermissionManager.VetoGroupStruct[], overrides?: CallOverrides): Promise<void>;
        configureVotingSituations(dao_: PromiseOrValue<string>, situations_: IDAOVoting.InitialSituationStruct[], overrides?: CallOverrides): Promise<void>;
        deployDAO(params_: DAOConstructorParametersStruct, overrides?: CallOverrides): Promise<string>;
        deployDAOPanel(dao_: PromiseOrValue<string>, daoPanelParams_: DAOPanelConstructorParametersStruct, overrides?: CallOverrides): Promise<[string, string, string, string]>;
        predictDAOAddress(salt_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        restoreRegistryPools(name_: PromiseOrValue<string>, pools_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        revokeDAOCreatorRole(dao_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DeployedDAOMemberStorage(address,address)"(daoMemberStorageProxy_?: null, arg1?: null): DeployedDAOMemberStorageEventFilter;
        DeployedDAOMemberStorage(daoMemberStorageProxy_?: null, arg1?: null): DeployedDAOMemberStorageEventFilter;
        "DeployedDAOPanelVoting(address,address)"(daoPanelVotingProxy_?: null, arg1?: null): DeployedDAOPanelVotingEventFilter;
        DeployedDAOPanelVoting(daoPanelVotingProxy_?: null, arg1?: null): DeployedDAOPanelVotingEventFilter;
        "DeployedDAOParameterStorage(address,address)"(daoParameterStorageProxy_?: null, arg1?: null): DeployedDAOParameterStorageEventFilter;
        DeployedDAOParameterStorage(daoParameterStorageProxy_?: null, arg1?: null): DeployedDAOParameterStorageEventFilter;
        "DeployedDAORegistry(address,tuple)"(daoRegistryProxy_?: null, params_?: null): DeployedDAORegistryEventFilter;
        DeployedDAORegistry(daoRegistryProxy_?: null, params_?: null): DeployedDAORegistryEventFilter;
        "DeployedDAOVault(address,address)"(daoVaultProxy_?: null, arg1?: null): DeployedDAOVaultEventFilter;
        DeployedDAOVault(daoVaultProxy_?: null, arg1?: null): DeployedDAOVaultEventFilter;
        "DeployedPermissionManager(address,address)"(permissionManagerProxy_?: null, arg1?: null): DeployedPermissionManagerEventFilter;
        DeployedPermissionManager(permissionManagerProxy_?: null, arg1?: null): DeployedPermissionManagerEventFilter;
        "DeployedVotingFactory(address,address)"(votingFactoryProxy_?: null, arg1?: null): DeployedVotingFactoryEventFilter;
        DeployedVotingFactory(votingFactoryProxy_?: null, arg1?: null): DeployedVotingFactoryEventFilter;
        "DeployedVotingRegistry(address,address)"(votingRegistryProxy_?: null, arg1?: null): DeployedVotingRegistryEventFilter;
        DeployedVotingRegistry(votingRegistryProxy_?: null, arg1?: null): DeployedVotingRegistryEventFilter;
    };
    estimateGas: {
        configureVetoGroups(dao_: PromiseOrValue<string>, vetoGroups_: IPermissionManager.VetoGroupStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        configureVotingSituations(dao_: PromiseOrValue<string>, situations_: IDAOVoting.InitialSituationStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deployDAO(params_: DAOConstructorParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deployDAOPanel(dao_: PromiseOrValue<string>, daoPanelParams_: DAOPanelConstructorParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        predictDAOAddress(salt_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        restoreRegistryPools(name_: PromiseOrValue<string>, pools_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        revokeDAOCreatorRole(dao_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        configureVetoGroups(dao_: PromiseOrValue<string>, vetoGroups_: IPermissionManager.VetoGroupStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        configureVotingSituations(dao_: PromiseOrValue<string>, situations_: IDAOVoting.InitialSituationStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deployDAO(params_: DAOConstructorParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deployDAOPanel(dao_: PromiseOrValue<string>, daoPanelParams_: DAOPanelConstructorParametersStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        predictDAOAddress(salt_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        restoreRegistryPools(name_: PromiseOrValue<string>, pools_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        revokeDAOCreatorRole(dao_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
