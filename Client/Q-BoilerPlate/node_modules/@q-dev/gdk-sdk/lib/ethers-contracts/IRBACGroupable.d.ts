import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface IRBACGroupableInterface extends utils.Interface {
    functions: {
        "addUserToGroups(address,string[])": FunctionFragment;
        "getDefaultGroupEnabled()": FunctionFragment;
        "getGroupRoles(string)": FunctionFragment;
        "getUserGroups(address)": FunctionFragment;
        "grantGroupRoles(string,string[])": FunctionFragment;
        "removeUserFromGroups(address,string[])": FunctionFragment;
        "revokeGroupRoles(string,string[])": FunctionFragment;
        "toggleDefaultGroup()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addUserToGroups" | "getDefaultGroupEnabled" | "getGroupRoles" | "getUserGroups" | "grantGroupRoles" | "removeUserFromGroups" | "revokeGroupRoles" | "toggleDefaultGroup"): FunctionFragment;
    encodeFunctionData(functionFragment: "addUserToGroups", values: [PromiseOrValue<string>, PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "getDefaultGroupEnabled", values?: undefined): string;
    encodeFunctionData(functionFragment: "getGroupRoles", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getUserGroups", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "grantGroupRoles", values: [PromiseOrValue<string>, PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "removeUserFromGroups", values: [PromiseOrValue<string>, PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "revokeGroupRoles", values: [PromiseOrValue<string>, PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "toggleDefaultGroup", values?: undefined): string;
    decodeFunctionResult(functionFragment: "addUserToGroups", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultGroupEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGroupRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUserGroups", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantGroupRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeUserFromGroups", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeGroupRoles", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toggleDefaultGroup", data: BytesLike): Result;
    events: {
        "AddedToGroups(address,string[])": EventFragment;
        "GrantedGroupRoles(string,string[])": EventFragment;
        "RemovedFromGroups(address,string[])": EventFragment;
        "RevokedGroupRoles(string,string[])": EventFragment;
        "ToggledDefaultGroup(bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AddedToGroups"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GrantedGroupRoles"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RemovedFromGroups"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RevokedGroupRoles"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ToggledDefaultGroup"): EventFragment;
}
export interface AddedToGroupsEventObject {
    who: string;
    groupsToAddTo: string[];
}
export type AddedToGroupsEvent = TypedEvent<[
    string,
    string[]
], AddedToGroupsEventObject>;
export type AddedToGroupsEventFilter = TypedEventFilter<AddedToGroupsEvent>;
export interface GrantedGroupRolesEventObject {
    groupTo: string;
    rolesToGrant: string[];
}
export type GrantedGroupRolesEvent = TypedEvent<[
    string,
    string[]
], GrantedGroupRolesEventObject>;
export type GrantedGroupRolesEventFilter = TypedEventFilter<GrantedGroupRolesEvent>;
export interface RemovedFromGroupsEventObject {
    who: string;
    groupsToRemoveFrom: string[];
}
export type RemovedFromGroupsEvent = TypedEvent<[
    string,
    string[]
], RemovedFromGroupsEventObject>;
export type RemovedFromGroupsEventFilter = TypedEventFilter<RemovedFromGroupsEvent>;
export interface RevokedGroupRolesEventObject {
    groupFrom: string;
    rolesToRevoke: string[];
}
export type RevokedGroupRolesEvent = TypedEvent<[
    string,
    string[]
], RevokedGroupRolesEventObject>;
export type RevokedGroupRolesEventFilter = TypedEventFilter<RevokedGroupRolesEvent>;
export interface ToggledDefaultGroupEventObject {
    defaultGroupEnabled: boolean;
}
export type ToggledDefaultGroupEvent = TypedEvent<[
    boolean
], ToggledDefaultGroupEventObject>;
export type ToggledDefaultGroupEventFilter = TypedEventFilter<ToggledDefaultGroupEvent>;
export interface IRBACGroupable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IRBACGroupableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addUserToGroups(who_: PromiseOrValue<string>, groupsToAddTo_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getDefaultGroupEnabled(overrides?: CallOverrides): Promise<[boolean]>;
        getGroupRoles(group_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]] & {
            roles_: string[];
        }>;
        getUserGroups(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]] & {
            groups_: string[];
        }>;
        grantGroupRoles(groupTo_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        removeUserFromGroups(who_: PromiseOrValue<string>, groupsToRemoveFrom_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        revokeGroupRoles(groupFrom_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        toggleDefaultGroup(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addUserToGroups(who_: PromiseOrValue<string>, groupsToAddTo_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getDefaultGroupEnabled(overrides?: CallOverrides): Promise<boolean>;
    getGroupRoles(group_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
    getUserGroups(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
    grantGroupRoles(groupTo_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    removeUserFromGroups(who_: PromiseOrValue<string>, groupsToRemoveFrom_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    revokeGroupRoles(groupFrom_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    toggleDefaultGroup(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addUserToGroups(who_: PromiseOrValue<string>, groupsToAddTo_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        getDefaultGroupEnabled(overrides?: CallOverrides): Promise<boolean>;
        getGroupRoles(group_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
        getUserGroups(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;
        grantGroupRoles(groupTo_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        removeUserFromGroups(who_: PromiseOrValue<string>, groupsToRemoveFrom_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        revokeGroupRoles(groupFrom_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        toggleDefaultGroup(overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AddedToGroups(address,string[])"(who?: null, groupsToAddTo?: null): AddedToGroupsEventFilter;
        AddedToGroups(who?: null, groupsToAddTo?: null): AddedToGroupsEventFilter;
        "GrantedGroupRoles(string,string[])"(groupTo?: null, rolesToGrant?: null): GrantedGroupRolesEventFilter;
        GrantedGroupRoles(groupTo?: null, rolesToGrant?: null): GrantedGroupRolesEventFilter;
        "RemovedFromGroups(address,string[])"(who?: null, groupsToRemoveFrom?: null): RemovedFromGroupsEventFilter;
        RemovedFromGroups(who?: null, groupsToRemoveFrom?: null): RemovedFromGroupsEventFilter;
        "RevokedGroupRoles(string,string[])"(groupFrom?: null, rolesToRevoke?: null): RevokedGroupRolesEventFilter;
        RevokedGroupRoles(groupFrom?: null, rolesToRevoke?: null): RevokedGroupRolesEventFilter;
        "ToggledDefaultGroup(bool)"(defaultGroupEnabled?: null): ToggledDefaultGroupEventFilter;
        ToggledDefaultGroup(defaultGroupEnabled?: null): ToggledDefaultGroupEventFilter;
    };
    estimateGas: {
        addUserToGroups(who_: PromiseOrValue<string>, groupsToAddTo_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getDefaultGroupEnabled(overrides?: CallOverrides): Promise<BigNumber>;
        getGroupRoles(group_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getUserGroups(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        grantGroupRoles(groupTo_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        removeUserFromGroups(who_: PromiseOrValue<string>, groupsToRemoveFrom_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        revokeGroupRoles(groupFrom_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        toggleDefaultGroup(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addUserToGroups(who_: PromiseOrValue<string>, groupsToAddTo_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getDefaultGroupEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getGroupRoles(group_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUserGroups(who_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantGroupRoles(groupTo_: PromiseOrValue<string>, rolesToGrant_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        removeUserFromGroups(who_: PromiseOrValue<string>, groupsToRemoveFrom_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        revokeGroupRoles(groupFrom_: PromiseOrValue<string>, rolesToRevoke_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        toggleDefaultGroup(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
