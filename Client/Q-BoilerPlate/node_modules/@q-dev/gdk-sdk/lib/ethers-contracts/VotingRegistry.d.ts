import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface VotingRegistryInterface extends utils.Interface {
    functions: {
        "VOTING_REGISTRY_RESOURCE()": FunctionFragment;
        "addProxyPool(string,address)": FunctionFragment;
        "countPools(string)": FunctionFragment;
        "getImplementation(string)": FunctionFragment;
        "getInjector()": FunctionFragment;
        "getProxyBeacon(string)": FunctionFragment;
        "injectDependenciesToExistingPools(string,uint256,uint256)": FunctionFragment;
        "injectDependenciesToExistingPoolsWithData(string,bytes,uint256,uint256)": FunctionFragment;
        "listPools(string,uint256,uint256)": FunctionFragment;
        "permissionManager()": FunctionFragment;
        "setDependencies(address,bytes)": FunctionFragment;
        "setInjector(address)": FunctionFragment;
        "setNewImplementations(string[],address[])": FunctionFragment;
        "votingFactory()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "VOTING_REGISTRY_RESOURCE" | "addProxyPool" | "countPools" | "getImplementation" | "getInjector" | "getProxyBeacon" | "injectDependenciesToExistingPools" | "injectDependenciesToExistingPoolsWithData" | "listPools" | "permissionManager" | "setDependencies" | "setInjector" | "setNewImplementations" | "votingFactory"): FunctionFragment;
    encodeFunctionData(functionFragment: "VOTING_REGISTRY_RESOURCE", values?: undefined): string;
    encodeFunctionData(functionFragment: "addProxyPool", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "countPools", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getImplementation", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getInjector", values?: undefined): string;
    encodeFunctionData(functionFragment: "getProxyBeacon", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "injectDependenciesToExistingPools", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "injectDependenciesToExistingPoolsWithData", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "listPools", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "permissionManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDependencies", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setInjector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setNewImplementations", values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]): string;
    encodeFunctionData(functionFragment: "votingFactory", values?: undefined): string;
    decodeFunctionResult(functionFragment: "VOTING_REGISTRY_RESOURCE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addProxyPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "countPools", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInjector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProxyBeacon", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "injectDependenciesToExistingPools", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "injectDependenciesToExistingPoolsWithData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "listPools", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permissionManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDependencies", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInjector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNewImplementations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "votingFactory", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface VotingRegistry extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: VotingRegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        VOTING_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<[string]>;
        addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        countPools(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getInjector(overrides?: CallOverrides): Promise<[string] & {
            injector_: string;
        }>;
        getProxyBeacon(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        listPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string[]] & {
            pools_: string[];
        }>;
        permissionManager(overrides?: CallOverrides): Promise<[string]>;
        setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        votingFactory(overrides?: CallOverrides): Promise<[string]>;
    };
    VOTING_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;
    addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    countPools(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getInjector(overrides?: CallOverrides): Promise<string>;
    getProxyBeacon(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    listPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
    permissionManager(overrides?: CallOverrides): Promise<string>;
    setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    votingFactory(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        VOTING_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;
        addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        countPools(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getInjector(overrides?: CallOverrides): Promise<string>;
        getProxyBeacon(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        listPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;
        permissionManager(overrides?: CallOverrides): Promise<string>;
        setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        votingFactory(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
    };
    estimateGas: {
        VOTING_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;
        addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        countPools(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getInjector(overrides?: CallOverrides): Promise<BigNumber>;
        getProxyBeacon(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        listPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        permissionManager(overrides?: CallOverrides): Promise<BigNumber>;
        setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        votingFactory(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        VOTING_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        countPools(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProxyBeacon(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        listPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        permissionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDependencies(registryAddress_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        votingFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
