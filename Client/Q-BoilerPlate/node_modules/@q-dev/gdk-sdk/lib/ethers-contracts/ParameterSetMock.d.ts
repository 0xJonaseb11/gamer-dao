import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export type ParameterStruct = {
    name: PromiseOrValue<string>;
    value: PromiseOrValue<BytesLike>;
    solidityType: PromiseOrValue<BigNumberish>;
};
export type ParameterStructOutput = [string, string, number] & {
    name: string;
    value: string;
    solidityType: number;
};
export interface ParameterSetMockInterface extends utils.Interface {
    functions: {
        "add((string,bytes,uint8))": FunctionFragment;
        "at(uint256)": FunctionFragment;
        "change((string,bytes,uint8))": FunctionFragment;
        "contains(string)": FunctionFragment;
        "get(string)": FunctionFragment;
        "getSet()": FunctionFragment;
        "length()": FunctionFragment;
        "remove(string)": FunctionFragment;
        "values()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "add" | "at" | "change" | "contains" | "get" | "getSet" | "length" | "remove" | "values"): FunctionFragment;
    encodeFunctionData(functionFragment: "add", values: [ParameterStruct]): string;
    encodeFunctionData(functionFragment: "at", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "change", values: [ParameterStruct]): string;
    encodeFunctionData(functionFragment: "contains", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "get", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getSet", values?: undefined): string;
    encodeFunctionData(functionFragment: "length", values?: undefined): string;
    encodeFunctionData(functionFragment: "remove", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "values", values?: undefined): string;
    decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "at", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "change", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "values", data: BytesLike): Result;
    events: {};
}
export interface ParameterSetMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ParameterSetMockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        add(value_: ParameterStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        at(index_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[ParameterStructOutput]>;
        change(value_: ParameterStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        contains(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        get(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[ParameterStructOutput]>;
        getSet(overrides?: CallOverrides): Promise<[ParameterStructOutput[]] & {
            set_: ParameterStructOutput[];
        }>;
        length(overrides?: CallOverrides): Promise<[BigNumber]>;
        remove(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        values(overrides?: CallOverrides): Promise<[ParameterStructOutput[]]>;
    };
    add(value_: ParameterStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    at(index_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ParameterStructOutput>;
    change(value_: ParameterStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    contains(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    get(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ParameterStructOutput>;
    getSet(overrides?: CallOverrides): Promise<ParameterStructOutput[]>;
    length(overrides?: CallOverrides): Promise<BigNumber>;
    remove(name_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    values(overrides?: CallOverrides): Promise<ParameterStructOutput[]>;
    callStatic: {
        add(value_: ParameterStruct, overrides?: CallOverrides): Promise<void>;
        at(index_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ParameterStructOutput>;
        change(value_: ParameterStruct, overrides?: CallOverrides): Promise<void>;
        contains(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        get(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ParameterStructOutput>;
        getSet(overrides?: CallOverrides): Promise<ParameterStructOutput[]>;
        length(overrides?: CallOverrides): Promise<BigNumber>;
        remove(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        values(overrides?: CallOverrides): Promise<ParameterStructOutput[]>;
    };
    filters: {};
    estimateGas: {
        add(value_: ParameterStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        at(index_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        change(value_: ParameterStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        contains(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        get(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getSet(overrides?: CallOverrides): Promise<BigNumber>;
        length(overrides?: CallOverrides): Promise<BigNumber>;
        remove(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        values(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        add(value_: ParameterStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        at(index_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        change(value_: ParameterStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        contains(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        get(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        length(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        remove(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        values(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
