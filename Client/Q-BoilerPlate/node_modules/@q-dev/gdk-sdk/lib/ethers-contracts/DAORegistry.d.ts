import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace IDAORegistry {
    type AccountStatusStruct = {
        groups: PromiseOrValue<string>[];
        isMember: PromiseOrValue<boolean>[];
    };
    type AccountStatusStructOutput = [string[], boolean[]] & {
        groups: string[];
        isMember: boolean[];
    };
    type RegistryEntryStruct = {
        name: PromiseOrValue<string>;
        address_: PromiseOrValue<string>;
    };
    type RegistryEntryStructOutput = [string, string] & {
        name: string;
        address_: string;
    };
}
export interface DAORegistryInterface extends utils.Interface {
    functions: {
        "DAO_REGISTRY_RESOURCE()": FunctionFragment;
        "__DAORegistry_init(address,address,string,string,string)": FunctionFragment;
        "addContract(string,address)": FunctionFragment;
        "addPanel(string)": FunctionFragment;
        "addProxyContract(string,address)": FunctionFragment;
        "checkPermission(address,string)": FunctionFragment;
        "daoURI()": FunctionFragment;
        "getAccountStatuses(address)": FunctionFragment;
        "getConfDAOParameterStorage(string)": FunctionFragment;
        "getContract(string)": FunctionFragment;
        "getDAOMemberStorage(string)": FunctionFragment;
        "getDAOVault()": FunctionFragment;
        "getExpertsDAOVoting(string)": FunctionFragment;
        "getGeneralDAOVoting(string)": FunctionFragment;
        "getImplementation(string)": FunctionFragment;
        "getPanels()": FunctionFragment;
        "getPermissionManager()": FunctionFragment;
        "getProxyUpgrader()": FunctionFragment;
        "getRegDAOParameterStorage(string)": FunctionFragment;
        "getRegistryContractAddresses()": FunctionFragment;
        "getResource()": FunctionFragment;
        "getVotingFactory()": FunctionFragment;
        "getVotingRegistry()": FunctionFragment;
        "hasContract(string)": FunctionFragment;
        "injectDependencies(string)": FunctionFragment;
        "isAbleToAddPanel()": FunctionFragment;
        "justAddProxyContract(string,address)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "permissionManager()": FunctionFragment;
        "removeContract(string)": FunctionFragment;
        "removePanel(string)": FunctionFragment;
        "setDAOMetadata(string)": FunctionFragment;
        "upgradeContract(string,address)": FunctionFragment;
        "upgradeContractAndCall(string,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DAO_REGISTRY_RESOURCE" | "__DAORegistry_init" | "addContract" | "addPanel" | "addProxyContract" | "checkPermission" | "daoURI" | "getAccountStatuses" | "getConfDAOParameterStorage" | "getContract" | "getDAOMemberStorage" | "getDAOVault" | "getExpertsDAOVoting" | "getGeneralDAOVoting" | "getImplementation" | "getPanels" | "getPermissionManager" | "getProxyUpgrader" | "getRegDAOParameterStorage" | "getRegistryContractAddresses" | "getResource" | "getVotingFactory" | "getVotingRegistry" | "hasContract" | "injectDependencies" | "isAbleToAddPanel" | "justAddProxyContract" | "multicall" | "permissionManager" | "removeContract" | "removePanel" | "setDAOMetadata" | "upgradeContract" | "upgradeContractAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "DAO_REGISTRY_RESOURCE", values?: undefined): string;
    encodeFunctionData(functionFragment: "__DAORegistry_init", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "addContract", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "addPanel", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "addProxyContract", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "checkPermission", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "daoURI", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAccountStatuses", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getConfDAOParameterStorage", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getContract", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getDAOMemberStorage", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getDAOVault", values?: undefined): string;
    encodeFunctionData(functionFragment: "getExpertsDAOVoting", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getGeneralDAOVoting", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getImplementation", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getPanels", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPermissionManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "getProxyUpgrader", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRegDAOParameterStorage", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getRegistryContractAddresses", values?: undefined): string;
    encodeFunctionData(functionFragment: "getResource", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVotingFactory", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVotingRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "hasContract", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "injectDependencies", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isAbleToAddPanel", values?: undefined): string;
    encodeFunctionData(functionFragment: "justAddProxyContract", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "multicall", values: [PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "permissionManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeContract", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "removePanel", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDAOMetadata", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeContract", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeContractAndCall", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "DAO_REGISTRY_RESOURCE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "__DAORegistry_init", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addPanel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addProxyContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "daoURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAccountStatuses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfDAOParameterStorage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDAOMemberStorage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDAOVault", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpertsDAOVoting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGeneralDAOVoting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPanels", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPermissionManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProxyUpgrader", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegDAOParameterStorage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegistryContractAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getResource", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVotingFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVotingRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "injectDependencies", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAbleToAddPanel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "justAddProxyContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permissionManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removePanel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDAOMetadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeContract", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeContractAndCall", data: BytesLike): Result;
    events: {
        "ContractAdded(string,address)": EventFragment;
        "ContractRemoved(string)": EventFragment;
        "DAOURIChanged(string)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "Initialized()": EventFragment;
        "PanelAdded(string)": EventFragment;
        "PanelRemoved(string)": EventFragment;
        "ProxyContractAdded(string,address,address)": EventFragment;
        "ProxyContractUpgraded(string,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ContractAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ContractRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DAOURIChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized(uint8)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized()"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PanelAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PanelRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProxyContractAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProxyContractUpgraded"): EventFragment;
}
export interface ContractAddedEventObject {
    name: string;
    contractAddress: string;
}
export type ContractAddedEvent = TypedEvent<[
    string,
    string
], ContractAddedEventObject>;
export type ContractAddedEventFilter = TypedEventFilter<ContractAddedEvent>;
export interface ContractRemovedEventObject {
    name: string;
}
export type ContractRemovedEvent = TypedEvent<[
    string
], ContractRemovedEventObject>;
export type ContractRemovedEventFilter = TypedEventFilter<ContractRemovedEvent>;
export interface DAOURIChangedEventObject {
    daoURI: string;
}
export type DAOURIChangedEvent = TypedEvent<[string], DAOURIChangedEventObject>;
export type DAOURIChangedEventFilter = TypedEventFilter<DAOURIChangedEvent>;
export interface Initialized_uint8_EventObject {
    version: number;
}
export type Initialized_uint8_Event = TypedEvent<[
    number
], Initialized_uint8_EventObject>;
export type Initialized_uint8_EventFilter = TypedEventFilter<Initialized_uint8_Event>;
export interface Initialized__EventObject {
}
export type Initialized__Event = TypedEvent<[], Initialized__EventObject>;
export type Initialized__EventFilter = TypedEventFilter<Initialized__Event>;
export interface PanelAddedEventObject {
    panelName: string;
}
export type PanelAddedEvent = TypedEvent<[string], PanelAddedEventObject>;
export type PanelAddedEventFilter = TypedEventFilter<PanelAddedEvent>;
export interface PanelRemovedEventObject {
    panelName: string;
}
export type PanelRemovedEvent = TypedEvent<[string], PanelRemovedEventObject>;
export type PanelRemovedEventFilter = TypedEventFilter<PanelRemovedEvent>;
export interface ProxyContractAddedEventObject {
    name: string;
    contractAddress: string;
    implementation: string;
}
export type ProxyContractAddedEvent = TypedEvent<[
    string,
    string,
    string
], ProxyContractAddedEventObject>;
export type ProxyContractAddedEventFilter = TypedEventFilter<ProxyContractAddedEvent>;
export interface ProxyContractUpgradedEventObject {
    name: string;
    newImplementation: string;
}
export type ProxyContractUpgradedEvent = TypedEvent<[
    string,
    string
], ProxyContractUpgradedEventObject>;
export type ProxyContractUpgradedEventFilter = TypedEventFilter<ProxyContractUpgradedEvent>;
export interface DAORegistry extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DAORegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DAO_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<[string]>;
        __DAORegistry_init(permissionManager_: PromiseOrValue<string>, masterAccess_: PromiseOrValue<string>, panelName_: PromiseOrValue<string>, registryResource_: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addPanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        checkPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        daoURI(overrides?: CallOverrides): Promise<[string] & {
            _daoURI: string;
        }>;
        getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            IDAORegistry.AccountStatusStructOutput
        ] & {
            status: IDAORegistry.AccountStatusStructOutput;
        }>;
        getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getDAOVault(overrides?: CallOverrides): Promise<[string]>;
        getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getPanels(overrides?: CallOverrides): Promise<[string[]]>;
        getPermissionManager(overrides?: CallOverrides): Promise<[string]>;
        getProxyUpgrader(overrides?: CallOverrides): Promise<[string]>;
        getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getRegistryContractAddresses(overrides?: CallOverrides): Promise<[
            IDAORegistry.RegistryEntryStructOutput[]
        ] & {
            entries_: IDAORegistry.RegistryEntryStructOutput[];
        }>;
        getResource(overrides?: CallOverrides): Promise<[string]>;
        getVotingFactory(overrides?: CallOverrides): Promise<[string]>;
        getVotingRegistry(overrides?: CallOverrides): Promise<[string]>;
        hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        injectDependencies(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isAbleToAddPanel(overrides?: CallOverrides): Promise<[boolean]>;
        justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        permissionManager(overrides?: CallOverrides): Promise<[string]>;
        removeContract(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        removePanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    DAO_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;
    __DAORegistry_init(permissionManager_: PromiseOrValue<string>, masterAccess_: PromiseOrValue<string>, panelName_: PromiseOrValue<string>, registryResource_: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addPanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    checkPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    daoURI(overrides?: CallOverrides): Promise<string>;
    getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<IDAORegistry.AccountStatusStructOutput>;
    getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getDAOVault(overrides?: CallOverrides): Promise<string>;
    getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getPanels(overrides?: CallOverrides): Promise<string[]>;
    getPermissionManager(overrides?: CallOverrides): Promise<string>;
    getProxyUpgrader(overrides?: CallOverrides): Promise<string>;
    getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getRegistryContractAddresses(overrides?: CallOverrides): Promise<IDAORegistry.RegistryEntryStructOutput[]>;
    getResource(overrides?: CallOverrides): Promise<string>;
    getVotingFactory(overrides?: CallOverrides): Promise<string>;
    getVotingRegistry(overrides?: CallOverrides): Promise<string>;
    hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    injectDependencies(name_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isAbleToAddPanel(overrides?: CallOverrides): Promise<boolean>;
    justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    permissionManager(overrides?: CallOverrides): Promise<string>;
    removeContract(name_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    removePanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        DAO_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<string>;
        __DAORegistry_init(permissionManager_: PromiseOrValue<string>, masterAccess_: PromiseOrValue<string>, panelName_: PromiseOrValue<string>, registryResource_: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        addPanel(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        checkPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        daoURI(overrides?: CallOverrides): Promise<string>;
        getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<IDAORegistry.AccountStatusStructOutput>;
        getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getDAOVault(overrides?: CallOverrides): Promise<string>;
        getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getPanels(overrides?: CallOverrides): Promise<string[]>;
        getPermissionManager(overrides?: CallOverrides): Promise<string>;
        getProxyUpgrader(overrides?: CallOverrides): Promise<string>;
        getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getRegistryContractAddresses(overrides?: CallOverrides): Promise<IDAORegistry.RegistryEntryStructOutput[]>;
        getResource(overrides?: CallOverrides): Promise<string>;
        getVotingFactory(overrides?: CallOverrides): Promise<string>;
        getVotingRegistry(overrides?: CallOverrides): Promise<string>;
        hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        injectDependencies(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        isAbleToAddPanel(overrides?: CallOverrides): Promise<boolean>;
        justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;
        permissionManager(overrides?: CallOverrides): Promise<string>;
        removeContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        removePanel(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ContractAdded(string,address)"(name?: null, contractAddress?: null): ContractAddedEventFilter;
        ContractAdded(name?: null, contractAddress?: null): ContractAddedEventFilter;
        "ContractRemoved(string)"(name?: null): ContractRemovedEventFilter;
        ContractRemoved(name?: null): ContractRemovedEventFilter;
        "DAOURIChanged(string)"(daoURI?: null): DAOURIChangedEventFilter;
        DAOURIChanged(daoURI?: null): DAOURIChangedEventFilter;
        "Initialized(uint8)"(version?: null): Initialized_uint8_EventFilter;
        "Initialized()"(): Initialized__EventFilter;
        "PanelAdded(string)"(panelName?: null): PanelAddedEventFilter;
        PanelAdded(panelName?: null): PanelAddedEventFilter;
        "PanelRemoved(string)"(panelName?: null): PanelRemovedEventFilter;
        PanelRemoved(panelName?: null): PanelRemovedEventFilter;
        "ProxyContractAdded(string,address,address)"(name?: null, contractAddress?: null, implementation?: null): ProxyContractAddedEventFilter;
        ProxyContractAdded(name?: null, contractAddress?: null, implementation?: null): ProxyContractAddedEventFilter;
        "ProxyContractUpgraded(string,address)"(name?: null, newImplementation?: null): ProxyContractUpgradedEventFilter;
        ProxyContractUpgraded(name?: null, newImplementation?: null): ProxyContractUpgradedEventFilter;
    };
    estimateGas: {
        DAO_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;
        __DAORegistry_init(permissionManager_: PromiseOrValue<string>, masterAccess_: PromiseOrValue<string>, panelName_: PromiseOrValue<string>, registryResource_: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addPanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        checkPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        daoURI(overrides?: CallOverrides): Promise<BigNumber>;
        getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getDAOVault(overrides?: CallOverrides): Promise<BigNumber>;
        getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getPanels(overrides?: CallOverrides): Promise<BigNumber>;
        getPermissionManager(overrides?: CallOverrides): Promise<BigNumber>;
        getProxyUpgrader(overrides?: CallOverrides): Promise<BigNumber>;
        getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegistryContractAddresses(overrides?: CallOverrides): Promise<BigNumber>;
        getResource(overrides?: CallOverrides): Promise<BigNumber>;
        getVotingFactory(overrides?: CallOverrides): Promise<BigNumber>;
        getVotingRegistry(overrides?: CallOverrides): Promise<BigNumber>;
        hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        injectDependencies(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isAbleToAddPanel(overrides?: CallOverrides): Promise<BigNumber>;
        justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        permissionManager(overrides?: CallOverrides): Promise<BigNumber>;
        removeContract(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        removePanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        DAO_REGISTRY_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        __DAORegistry_init(permissionManager_: PromiseOrValue<string>, masterAccess_: PromiseOrValue<string>, panelName_: PromiseOrValue<string>, registryResource_: PromiseOrValue<string>, daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addPanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        checkPermission(account_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        daoURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAccountStatuses(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDAOMemberStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDAOVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpertsDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getGeneralDAOVoting(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getImplementation(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPanels(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPermissionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProxyUpgrader(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegDAOParameterStorage(panelName_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegistryContractAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getResource(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVotingFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVotingRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasContract(name_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        injectDependencies(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isAbleToAddPanel(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        justAddProxyContract(name_: PromiseOrValue<string>, contractAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        multicall(data: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        permissionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeContract(name_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        removePanel(panelName_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDAOMetadata(daoURI_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeContract(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeContractAndCall(name_: PromiseOrValue<string>, newImplementation_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
