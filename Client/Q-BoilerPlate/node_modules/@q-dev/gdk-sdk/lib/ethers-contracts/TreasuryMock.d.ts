import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace IDAOIntegration {
    type ResourceRecordsStruct = {
        existingRole: PromiseOrValue<string>;
        resource: PromiseOrValue<string>;
        permissions: PromiseOrValue<string>[];
    };
    type ResourceRecordsStructOutput = [string, string, string[]] & {
        existingRole: string;
        resource: string;
        permissions: string[];
    };
}
export interface TreasuryMockInterface extends utils.Interface {
    functions: {
        "TREASURY_RESOURCE()": FunctionFragment;
        "awardParts(address)": FunctionFragment;
        "checkPermission(address,string)": FunctionFragment;
        "getInjector()": FunctionFragment;
        "getResource()": FunctionFragment;
        "getResourceRecords()": FunctionFragment;
        "permissionManager()": FunctionFragment;
        "setDependencies(address,bytes)": FunctionFragment;
        "setInjector(address)": FunctionFragment;
        "setRewardPart(address,uint256)": FunctionFragment;
        "withdrawReward()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "TREASURY_RESOURCE" | "awardParts" | "checkPermission" | "getInjector" | "getResource" | "getResourceRecords" | "permissionManager" | "setDependencies" | "setInjector" | "setRewardPart" | "withdrawReward"): FunctionFragment;
    encodeFunctionData(functionFragment: "TREASURY_RESOURCE", values?: undefined): string;
    encodeFunctionData(functionFragment: "awardParts", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "checkPermission", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getInjector", values?: undefined): string;
    encodeFunctionData(functionFragment: "getResource", values?: undefined): string;
    encodeFunctionData(functionFragment: "getResourceRecords", values?: undefined): string;
    encodeFunctionData(functionFragment: "permissionManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDependencies", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setInjector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setRewardPart", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawReward", values?: undefined): string;
    decodeFunctionResult(functionFragment: "TREASURY_RESOURCE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "awardParts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkPermission", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInjector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getResource", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getResourceRecords", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permissionManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDependencies", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInjector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRewardPart", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawReward", data: BytesLike): Result;
    events: {};
}
export interface TreasuryMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TreasuryMockInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        TREASURY_RESOURCE(overrides?: CallOverrides): Promise<[string]>;
        awardParts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        getInjector(overrides?: CallOverrides): Promise<[string] & {
            injector_: string;
        }>;
        getResource(overrides?: CallOverrides): Promise<[string]>;
        getResourceRecords(overrides?: CallOverrides): Promise<[IDAOIntegration.ResourceRecordsStructOutput[]]>;
        permissionManager(overrides?: CallOverrides): Promise<[string]>;
        setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setRewardPart(user_: PromiseOrValue<string>, part_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawReward(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    TREASURY_RESOURCE(overrides?: CallOverrides): Promise<string>;
    awardParts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    getInjector(overrides?: CallOverrides): Promise<string>;
    getResource(overrides?: CallOverrides): Promise<string>;
    getResourceRecords(overrides?: CallOverrides): Promise<IDAOIntegration.ResourceRecordsStructOutput[]>;
    permissionManager(overrides?: CallOverrides): Promise<string>;
    setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setRewardPart(user_: PromiseOrValue<string>, part_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawReward(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        TREASURY_RESOURCE(overrides?: CallOverrides): Promise<string>;
        awardParts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        getInjector(overrides?: CallOverrides): Promise<string>;
        getResource(overrides?: CallOverrides): Promise<string>;
        getResourceRecords(overrides?: CallOverrides): Promise<IDAOIntegration.ResourceRecordsStructOutput[]>;
        permissionManager(overrides?: CallOverrides): Promise<string>;
        setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setRewardPart(user_: PromiseOrValue<string>, part_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawReward(overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        TREASURY_RESOURCE(overrides?: CallOverrides): Promise<BigNumber>;
        awardParts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getInjector(overrides?: CallOverrides): Promise<BigNumber>;
        getResource(overrides?: CallOverrides): Promise<BigNumber>;
        getResourceRecords(overrides?: CallOverrides): Promise<BigNumber>;
        permissionManager(overrides?: CallOverrides): Promise<BigNumber>;
        setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setRewardPart(user_: PromiseOrValue<string>, part_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawReward(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        TREASURY_RESOURCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        awardParts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        checkPermission(member_: PromiseOrValue<string>, permission_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getResource(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getResourceRecords(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        permissionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDependencies(registryAddress_: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInjector(injector_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setRewardPart(user_: PromiseOrValue<string>, part_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawReward(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
