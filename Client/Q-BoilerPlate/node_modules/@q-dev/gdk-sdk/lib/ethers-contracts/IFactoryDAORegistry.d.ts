import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface IFactoryDAORegistryInterface extends utils.Interface {
    functions: {
        "addProxyPool(string,address)": FunctionFragment;
        "injectDependenciesToExistingPools(string,uint256,uint256)": FunctionFragment;
        "injectDependenciesToExistingPoolsWithData(string,bytes,uint256,uint256)": FunctionFragment;
        "setNewImplementations(string[],address[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addProxyPool" | "injectDependenciesToExistingPools" | "injectDependenciesToExistingPoolsWithData" | "setNewImplementations"): FunctionFragment;
    encodeFunctionData(functionFragment: "addProxyPool", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "injectDependenciesToExistingPools", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "injectDependenciesToExistingPoolsWithData", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setNewImplementations", values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]): string;
    decodeFunctionResult(functionFragment: "addProxyPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "injectDependenciesToExistingPools", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "injectDependenciesToExistingPoolsWithData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNewImplementations", data: BytesLike): Result;
    events: {};
}
export interface IFactoryDAORegistry extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IFactoryDAORegistryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addProxyPool(name_: PromiseOrValue<string>, poolAddress_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        injectDependenciesToExistingPools(name_: PromiseOrValue<string>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        injectDependenciesToExistingPoolsWithData(name_: PromiseOrValue<string>, data_: PromiseOrValue<BytesLike>, offset_: PromiseOrValue<BigNumberish>, limit_: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setNewImplementations(names_: PromiseOrValue<string>[], newImplementations_: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
