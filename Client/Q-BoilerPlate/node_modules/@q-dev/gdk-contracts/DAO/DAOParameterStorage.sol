// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";

import "@dlsl/dev-modules/contracts-registry/AbstractDependant.sol";

import "../interfaces/IDAOParameterStorage.sol";

import "../core/Globals.sol";

import "./DAORegistry.sol";
import "./PermissionManager.sol";

/**
 * @title DAOParameterStorage
 * @dev Implementation of contract that stores and manages parameters for a DAO panel.
 *
 * This contract is part of the DAO, which is responsible for storing all parameters that are related to
 * some resource (in this context, it is the name of the panel DAO - resource).
 *
 * For example, it is storing all voting situations with their parameters (voting type, voting duration, etc.).
 */
contract DAOParameterStorage is IDAOParameterStorage, Initializable, AbstractDependant {
    using ParameterSet for ParameterSet.Set;

    error DAOParameterStorage__ParameterNotFound(string parameterName);

    string public DAO_PARAMETER_STORAGE_RESOURCE;

    VotingType public votingType;

    PermissionManager public permissionManager;

    ParameterSet.Set internal _parameters;

    modifier onlyUpdatePermission() {
        _requirePermission(UPDATE_PERMISSION);
        _;
    }

    modifier onlyDeletePermission() {
        _requirePermission(DELETE_PERMISSION);
        _;
    }

    /**
     * @notice Initializes the contract with resource that contains panel name as part of itself.
     */
    function __DAOParameterStorage_init(string calldata resource_) external initializer {
        DAO_PARAMETER_STORAGE_RESOURCE = resource_;
    }

    /**
     * @inheritdoc AbstractDependant
     */
    function setDependencies(
        address registryAddress_,
        bytes calldata
    ) external override dependant {
        DAORegistry registry_ = DAORegistry(registryAddress_);

        permissionManager = PermissionManager(registry_.getPermissionManager());
    }

    /**
     * @inheritdoc IDAOResource
     */
    function checkPermission(
        address member_,
        string memory permission_
    ) public view returns (bool) {
        return
            permissionManager.hasPermission(member_, DAO_PARAMETER_STORAGE_RESOURCE, permission_);
    }

    /**
     * @inheritdoc IDAOResource
     */
    function getResource() external view returns (string memory) {
        return DAO_PARAMETER_STORAGE_RESOURCE;
    }

    /**
     * @inheritdoc IDAOParameterStorage
     */
    function setDAOParameter(
        Parameter calldata parameter_
    ) external override onlyUpdatePermission {
        _setDAOParameter(parameter_);
    }

    /**
     * @inheritdoc IDAOParameterStorage
     */
    function setDAOParameters(
        Parameter[] calldata parameters_
    ) external override onlyUpdatePermission {
        for (uint256 i = 0; i < parameters_.length; i++) {
            _setDAOParameter(parameters_[i]);
        }
    }

    /**
     * @inheritdoc IDAOParameterStorage
     */
    function removeDAOParameter(
        string calldata parameterName_
    ) external override onlyDeletePermission {
        _removeDAOParameter(parameterName_);
    }

    /**
     * @inheritdoc IDAOParameterStorage
     */
    function removeDAOParameters(
        string[] calldata parameterNames_
    ) external override onlyDeletePermission {
        for (uint256 i = 0; i < parameterNames_.length; i++) {
            _removeDAOParameter(parameterNames_[i]);
        }
    }

    /**
     * @inheritdoc IDAOParameterStorage
     */
    function getDAOParameter(
        string calldata parameterName_
    ) external view returns (Parameter memory) {
        _checkParameterExistence(parameterName_);

        return _parameters.get(parameterName_);
    }

    /**
     * @inheritdoc IDAOParameterStorage
     */
    function getDAOParameters() external view returns (Parameter[] memory) {
        return _parameters.values();
    }

    function _setDAOParameter(Parameter calldata parameter_) internal {
        if (_parameters.contains(parameter_.name)) {
            _parameters.change(parameter_);

            return;
        }

        _parameters.add(parameter_);
    }

    function _removeDAOParameter(string memory parameterName_) internal {
        _checkParameterExistence(parameterName_);

        _parameters.remove(parameterName_);
    }

    function _checkParameterExistence(string memory parameterName_) private view {
        if (!_parameters.contains(parameterName_)) {
            revert DAOParameterStorage__ParameterNotFound(parameterName_);
        }
    }

    function _requirePermission(string memory permission_) private view {
        require(
            checkPermission(msg.sender, permission_),
            "[QGDK-005000]-The sender is not allowed to perform the action, access denied."
        );
    }
}
