// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "@dlsl/dev-modules/contracts-registry/pools/AbstractPoolContractsRegistry.sol";

import "../interfaces/factory/IFactoryDAORegistry.sol";

/**
 * @title ADAOPoolRegistry
 * @dev Registry of all pools that were deployed through the DAO Pool Factory.
 *
 * This contract is based on the `AbstractPoolContractsRegistry` from the `dev-modules` package, so to
 * get the general idea of how it works, please refer to the documentation of that contract.
 */
abstract contract ADAOPoolRegistry is IFactoryDAORegistry, AbstractPoolContractsRegistry {
    modifier onlyPoolFactory() virtual {
        _;
    }

    modifier onlyCreatePermission() virtual {
        _;
    }

    /**
     *  @notice The function that will be called from the MasterDAOFactory to inject dependencies.
     *  @inheritdoc AbstractDependant
     */
    function setDependencies(
        address registryAddress_,
        bytes calldata data_
    ) public virtual override {
        super.setDependencies(registryAddress_, data_);
    }

    /**
     *  @inheritdoc IFactoryDAORegistry
     */
    function setNewImplementations(
        string[] calldata names_,
        address[] calldata newImplementations_
    ) external override onlyCreatePermission {
        _setNewImplementations(names_, newImplementations_);
    }

    /**
     *  @inheritdoc IFactoryDAORegistry
     */
    function injectDependenciesToExistingPools(
        string calldata name_,
        uint256 offset_,
        uint256 limit_
    ) external override onlyCreatePermission {
        _injectDependenciesToExistingPools(name_, offset_, limit_);
    }

    /**
     *  @inheritdoc IFactoryDAORegistry
     */
    function injectDependenciesToExistingPoolsWithData(
        string calldata name_,
        bytes calldata data_,
        uint256 offset_,
        uint256 limit_
    ) external override onlyCreatePermission {
        _injectDependenciesToExistingPoolsWithData(name_, data_, offset_, limit_);
    }

    /**
     *  @inheritdoc IFactoryDAORegistry
     */
    function addProxyPool(string calldata name_, address poolAddress_) external onlyPoolFactory {
        _addProxyPool(name_, poolAddress_);
    }
}
