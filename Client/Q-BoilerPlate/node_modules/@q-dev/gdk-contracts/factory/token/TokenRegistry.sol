// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "@dlsl/dev-modules/contracts-registry/pools/AbstractPoolContractsRegistry.sol";

import "../../core/Globals.sol";

import "../../core/MasterContractsRegistry.sol";
import "../../core/MasterAccessManagement.sol";

import "../../interfaces/factory/IFactoryDAORegistry.sol";

/**
 * @title TokenRegistry
 * @dev Registry of all tokens that were deployed through the DAO Token Factory.
 */
contract TokenRegistry is IFactoryDAORegistry, AbstractPoolContractsRegistry {
    string public constant TOKEN_REGISTRY_RESOURCE = "TOKEN_REGISTRY_RESOURCE";

    string public constant QSBT_NAME = "QSBT";
    string public constant QRC20_NAME = "QRC20";
    string public constant QRC721_NAME = "QRC721";

    MasterAccessManagement public masterAccess;

    address public tokenFactory;

    modifier onlyCreatePermission() {
        _requirePermission(CREATE_PERMISSION);
        _;
    }

    modifier onlyPoolFactory() {
        require(tokenFactory == msg.sender, "[QGDK-010000]-The caller is not a token factory.");
        _;
    }

    /**
     *  @inheritdoc AbstractDependant
     */
    function setDependencies(address registryAddress_, bytes calldata data_) public override {
        super.setDependencies(registryAddress_, data_);

        MasterContractsRegistry registry_ = MasterContractsRegistry(registryAddress_);

        masterAccess = MasterAccessManagement(registry_.getPermissionManager());
        tokenFactory = registry_.getTokenFactory();
    }

    /**
     *  @inheritdoc IFactoryDAORegistry
     */
    function setNewImplementations(
        string[] calldata names_,
        address[] calldata newImplementations_
    ) external override onlyCreatePermission {
        _setNewImplementations(names_, newImplementations_);
    }

    /**
     *  @inheritdoc IFactoryDAORegistry
     */
    function injectDependenciesToExistingPools(
        string calldata /*name_*/,
        uint256 /*offset_*/,
        uint256 /*limit_*/
    ) external view override onlyCreatePermission {
        revert("[QGDK-010001]-Dependency injection is not supported for tokens.");
    }

    /**
     *  @inheritdoc IFactoryDAORegistry
     */
    function injectDependenciesToExistingPoolsWithData(
        string calldata /*name_*/,
        bytes calldata /*data_*/,
        uint256 /*offset_*/,
        uint256 /*limit_*/
    ) external view override onlyCreatePermission {
        revert("[QGDK-010001]-Dependency injection is not supported for tokens.");
    }

    /**
     *  @inheritdoc IFactoryDAORegistry
     */
    function addProxyPool(string calldata name_, address poolAddress_) external onlyPoolFactory {
        _addProxyPool(name_, poolAddress_);
    }

    function _requirePermission(string memory permission_) internal view {
        require(
            masterAccess.hasPermission(msg.sender, TOKEN_REGISTRY_RESOURCE, permission_),
            "[QGDK-010002]-The sender is not allowed to perform the action, access denied."
        );
    }
}
