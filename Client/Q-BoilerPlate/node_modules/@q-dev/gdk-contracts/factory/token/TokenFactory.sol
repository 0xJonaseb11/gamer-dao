// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "@openzeppelin/contracts/utils/Strings.sol";

import "@dlsl/dev-modules/contracts-registry/pools/pool-factory/AbstractPoolFactory.sol";

import "../../interfaces/factory/ITokenFactory.sol";

import "../../core/Globals.sol";

import "../../governance/tokens/QSBT.sol";
import "../../governance/tokens/QRC20.sol";
import "../../governance/tokens/QRC721.sol";

import "../../core/MasterContractsRegistry.sol";
import "../../core/MasterAccessManagement.sol";

import "../../libs/ArrayHelper.sol";

import "./TokenRegistry.sol";

/**
 * @title TokenFactory
 * @dev A contract factory that deploys instances of `QRC20` and `QRC721`
 *
 * This contract is based on the `AbstractPoolFactory` from the `dev-modules` package, so to
 * get the general idea of how it works, please refer to the documentation of that contract.
 */
contract TokenFactory is ITokenFactory, AbstractPoolFactory {
    using Strings for uint256;
    using ArrayHelper for *;

    MasterAccessManagement public masterAccess;

    TokenRegistry public tokenRegistry;

    /**
     * @inheritdoc AbstractDependant
     */
    function setDependencies(address registryAddress_, bytes calldata data_) public override {
        super.setDependencies(registryAddress_, data_);

        MasterContractsRegistry registry_ = MasterContractsRegistry(registryAddress_);

        masterAccess = MasterAccessManagement(registry_.getPermissionManager());
        tokenRegistry = TokenRegistry(registry_.getTokenRegistry());
    }

    /**
     * @inheritdoc ITokenFactory
     */
    function deployQRC20(
        IQRC20.ConstructorParams calldata params_,
        address tokenOwner_
    ) external override returns (address) {
        string memory tokenType_ = tokenRegistry.QRC20_NAME();

        address tokenProxy_ = _deploy(address(tokenRegistry), tokenType_);

        string memory tokenResource_ = getDAOResource(tokenType_, tokenProxy_);

        QRC20 erc20 = QRC20(tokenProxy_);
        erc20.__QRC20_init(params_, tokenResource_);
        erc20.transferOwnership(tokenOwner_);

        _register(address(tokenRegistry), tokenType_, tokenProxy_);

        emit DeployedQRC20(tokenProxy_, params_);

        return tokenProxy_;
    }

    /**
     * @inheritdoc ITokenFactory
     */
    function deployQRC721(
        IQRC721.ConstructorParams calldata params_,
        address tokenOwner_
    ) external override returns (address) {
        string memory tokenType_ = tokenRegistry.QRC721_NAME();

        address tokenProxy_ = _deploy(address(tokenRegistry), tokenType_);

        string memory tokenResource_ = getDAOResource(tokenType_, tokenProxy_);

        QRC721 erc721 = QRC721(tokenProxy_);
        erc721.__QRC721_init(params_, tokenResource_);
        erc721.transferOwnership(tokenOwner_);

        _register(address(tokenRegistry), tokenType_, tokenProxy_);

        emit DeployedQRC721(tokenProxy_, params_);

        return tokenProxy_;
    }

    function deployQSBT(
        IQSBT.ConstructorParams calldata params_,
        address tokenOwner_
    ) external override returns (address) {
        string memory tokenType_ = tokenRegistry.QSBT_NAME();

        address tokenProxy_ = _deploy(address(tokenRegistry), tokenType_);

        string memory tokenResource_ = getDAOResource(tokenType_, tokenProxy_);

        QSBT sbt_ = QSBT(tokenProxy_);
        sbt_.__QSBT_init(params_, tokenResource_);
        sbt_.transferOwnership(tokenOwner_);

        _register(address(tokenRegistry), tokenType_, tokenProxy_);

        emit DeployedQSBT(tokenProxy_, params_);

        return tokenProxy_;
    }
}
