// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "../ADAOPoolRegistry.sol";

import "../../core/Globals.sol";

import "../../DAO/DAORegistry.sol";
import "../../DAO/PermissionManager.sol";

/**
 * @title VotingRegistry
 * @notice A contracts registry that stores the base Voting implementation contracts.
 *
 * All implementations for Voting deployment are stored here
 */
contract VotingRegistry is ADAOPoolRegistry {
    string public constant VOTING_REGISTRY_RESOURCE = "VOTING_REGISTRY_RESOURCE";

    PermissionManager public permissionManager;

    address public votingFactory;

    modifier onlyCreatePermission() override {
        _requirePermission(CREATE_PERMISSION);
        _;
    }

    modifier onlyPoolFactory() override {
        require(votingFactory == msg.sender, "[QGDK-012000]-The caller is not a voting factory.");
        _;
    }

    /**
     *  @inheritdoc ADAOPoolRegistry
     */
    function setDependencies(address registryAddress_, bytes calldata data_) public override {
        super.setDependencies(registryAddress_, data_);

        DAORegistry registry_ = DAORegistry(registryAddress_);

        permissionManager = PermissionManager(registry_.getPermissionManager());
        votingFactory = registry_.getVotingFactory();
    }

    function _requirePermission(string memory permission_) internal view {
        require(
            permissionManager.hasPermission(msg.sender, VOTING_REGISTRY_RESOURCE, permission_),
            "[QGDK-012001]-The sender is not allowed to perform the action, access denied."
        );
    }
}
