// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "@openzeppelin/contracts/utils/Strings.sol";

import "@dlsl/dev-modules/contracts-registry/pools/pool-factory/AbstractPoolFactory.sol";

import "../../interfaces/factory/IVotingFactory.sol";

import "../../core/Globals.sol";

import "../../governance/GeneralDAOVoting.sol";

import "../../DAO/DAORegistry.sol";
import "../../DAO/PermissionManager.sol";

import "./VotingRegistry.sol";

/**
 * @title VotingFactory
 * @dev A contract factory that deploys instances of `DAOVoting`.
 *
 * This contract is based on the `AbstractPoolFactory` from the `dev-modules` package, so to
 * get the general idea of how it works, please refer to the documentation of that contract.
 */
contract VotingFactory is IVotingFactory, AbstractPoolFactory {
    using Strings for uint256;

    string public constant VOTING_FACTORY_RESOURCE = "VOTING_FACTORY_RESOURCE";

    DAORegistry public daoRegistry;
    PermissionManager public permissionManager;

    VotingRegistry public votingRegistry;

    modifier onlyExecutePermission() {
        _requirePermission(EXECUTE_PERMISSION);
        _;
    }

    /**
     * @inheritdoc AbstractDependant
     */
    function setDependencies(address registryAddress_, bytes calldata data_) public override {
        super.setDependencies(registryAddress_, data_);

        daoRegistry = DAORegistry(registryAddress_);

        permissionManager = PermissionManager(daoRegistry.getPermissionManager());
        votingRegistry = VotingRegistry(daoRegistry.getVotingRegistry());
    }

    /**
     * @inheritdoc IVotingFactory
     */
    function deployDAOVoting(
        IDAOVoting.ConstructorParams calldata params_,
        string calldata votingName_
    ) external override onlyExecutePermission returns (address) {
        address votingProxy_ = _deploy(address(votingRegistry), votingName_);

        string memory votingResource_ = getDAOPanelResource(votingName_, params_.panelName);

        require(
            !daoRegistry.hasContract(votingResource_),
            "[QGDK-011000]-Failed to deploy voting, voting already exists within the panel name."
        );

        GeneralDAOVoting(votingProxy_).__DAOVoting_init(params_, votingResource_);

        _register(address(votingRegistry), votingName_, votingProxy_);
        _injectDependencies(address(votingRegistry), votingProxy_);

        daoRegistry.addContract(votingResource_, votingProxy_);

        emit DeployedDAOVoting(votingProxy_, params_);

        return votingProxy_;
    }

    function _requirePermission(string memory permission_) internal view {
        require(
            permissionManager.hasPermission(msg.sender, VOTING_FACTORY_RESOURCE, permission_),
            "[QGDK-011001]-The sender is not allowed to perform the action, access denied."
        );
    }
}
