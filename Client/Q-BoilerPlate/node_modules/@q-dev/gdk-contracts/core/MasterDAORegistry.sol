// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "../factory/ADAOPoolRegistry.sol";

import "./MasterContractsRegistry.sol";
import "./MasterAccessManagement.sol";
import "./Globals.sol";

/**
 * @title MasterDAORegistry
 * @notice A contracts registry that stores the base DAO implementation contracts.
 *
 * All implementations for the DAO deployment are stored here, in the `MasterDAORegistry` contract.
 *
 * During the deployment of the DAO, each time to deploy a new contract the `MasterDAOFactory` will
 * ask for the implementation address from this contract by its name.
 *
 * You could read the `AbstractPoolContractsRegistry` documentation to learn how it works under the hood.
 */
contract MasterDAORegistry is ADAOPoolRegistry {
    using EnumerableSet for EnumerableSet.AddressSet;

    string public constant MASTER_DAO_REGISTRY_RESOURCE = "MASTER_DAO_REGISTRY_RESOURCE";

    MasterAccessManagement public masterAccess;

    address public daoFactory;

    modifier onlyCreatePermission() override {
        _requirePermission(CREATE_PERMISSION);
        _;
    }

    modifier onlyPoolFactory() override {
        require(daoFactory == msg.sender, "[QGDK-003000]-The caller is not a Master DAO factory.");
        _;
    }

    /**
     *  @inheritdoc ADAOPoolRegistry
     */
    function setDependencies(address registryAddress_, bytes calldata data_) public override {
        super.setDependencies(registryAddress_, data_);

        MasterContractsRegistry registry_ = MasterContractsRegistry(registryAddress_);

        masterAccess = MasterAccessManagement(registry_.getPermissionManager());
        daoFactory = registry_.getMasterDAOFactory();
    }

    /**
     *  @notice Function to check if the pool exists in the registry
     *  @param name_ the name of the pool
     *  @param contract_ the address of the pool
     *  @return true if the pool exists in the registry
     */
    function containsPool(string calldata name_, address contract_) public view returns (bool) {
        return _pools[name_].contains(contract_);
    }

    function _requirePermission(string memory permission_) internal view {
        require(
            masterAccess.hasPermission(msg.sender, MASTER_DAO_REGISTRY_RESOURCE, permission_),
            "[QGDK-003001]-The sender is not allowed to perform the action, access denied."
        );
    }
}
