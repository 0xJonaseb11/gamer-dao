// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "@dlsl/dev-modules/access-control/RBAC.sol";

import "../interfaces/IMasterAccessManagement.sol";

import "../libs/ArrayHelper.sol";

import "./Globals.sol";

/**
 * @title MasterAccessManagement
 * @notice A contract that defines the roles and permissions for managing the master contracts registry.
 *
 * The `MasterAccessManagement` contract controls permissions for the `MasterDAOFactory` and `MasterDAORegistry`.
 * For example, we give DAO creator `CONFIGURE_DAO_PERMISSION` permission for the `MasterDAOFactory` resource,
 * allowing them to deploy new DAO Panels or configure the veto groups.
 */
contract MasterAccessManagement is IMasterAccessManagement, RBAC {
    using ArrayHelper for string;

    string public constant MASTER_REGISTRY_RESOURCE = "MASTER_REGISTRY_RESOURCE";

    /**
     * The master will only have access to resources that are managed under the
     * `MasterAccessManagement` contract. However, each DAO has its own Permission Manager contract,
     * so this master will not have any access to the DAO or any of their resources.
     *
     *
     * @dev Initializes the contract by setting up the RBAC.
     * @param master_ The address of the master account that has all the roles and permissions.
     */
    function __MasterAccessManagement_init(address master_) external initializer {
        __RBAC_init();
        _grantRoles(master_, MASTER_ROLE.asArray());
    }

    /**
     * If an account has access rights to the `MASTER_REGISTRY_RESOURCE` resource, this means
     * that it can add basic contracts. At the moment, `MasterDAOFactory` and `MasterDAORegistry`
     * are the only basic contracts, but in the future, we can add new basic contracts to extend
     * the functionality during the initial DAO deployment.
     *
     *
     * @dev Checks if the account has the permission for the master contracts registry.
     * @param account_ The address of the account to check.
     * @param permission_ The permission to check.
     * @return A boolean indicating whether the account has the permission.
     */
    function hasMasterContractsRegistryPermission(
        address account_,
        string memory permission_
    ) external view override returns (bool) {
        return hasPermission(account_, MASTER_REGISTRY_RESOURCE, permission_);
    }
}
