// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol";

import "../interfaces/IMasterContractsRegistry.sol";
import "../interfaces/IMasterAccessManagement.sol";

import "./registry/RoleManagedRegistry.sol";

/**
 * @title MasterContractsRegistry
 * @notice The MasterContractsRegistry contract serves as a central registry for the addresses
 * of the Main DAO Factory contracts, such as MasterDAOFactory and MasterDAORegistry.
 *
 * Please, review the `RoleManagedRegistry` contract for more information about the registry.
 */
contract MasterContractsRegistry is
    IMasterContractsRegistry,
    UUPSUpgradeable,
    RoleManagedRegistry
{
    string public constant MASTER_DAO_REGISTRY_NAME = "MASTER_DAO_REGISTRY";
    string public constant MASTER_DAO_FACTORY_NAME = "MASTER_DAO_FACTORY";

    /**
     * @dev Initializes the contract by setting up the master permission manager.
     * @param masterAccess_ The address of the master account that has all the roles and permissions.
     *
     * In general, masterAccess_ is the MasterAccessManagement contract.
     */
    function __MasterContractsRegistry_init(address masterAccess_) external initializer {
        __RoleManagedRegistry_init(masterAccess_);
    }

    modifier onlyCreatePermission() override {
        require(
            IMasterAccessManagement(getPermissionManager()).hasMasterContractsRegistryPermission(
                msg.sender,
                CREATE_PERMISSION
            ),
            "[QGDK-001000]-The sender is not allowed to create, access denied."
        );
        _;
    }

    modifier onlyUpdatePermission() override {
        require(
            IMasterAccessManagement(getPermissionManager()).hasMasterContractsRegistryPermission(
                msg.sender,
                UPDATE_PERMISSION
            ),
            "[QGDK-001001]-The sender is not allowed to update, access denied."
        );
        _;
    }

    modifier onlyDeletePermission() override {
        require(
            IMasterAccessManagement(getPermissionManager()).hasMasterContractsRegistryPermission(
                msg.sender,
                DELETE_PERMISSION
            ),
            "[QGDK-001002]-The sender is not allowed to delete, access denied."
        );
        _;
    }

    /**
     * @inheritdoc IMasterContractsRegistry
     */
    function getMasterDAOFactory() public view override returns (address) {
        return getContract(MASTER_DAO_FACTORY_NAME);
    }

    /**
     * @inheritdoc IMasterContractsRegistry
     */
    function getMasterDAORegistry() public view override returns (address) {
        return getContract(MASTER_DAO_REGISTRY_NAME);
    }

    /**
     * @inheritdoc IMasterContractsRegistry
     */
    function getTokenFactory() public view override returns (address) {
        return getContract(TOKEN_FACTORY_NAME);
    }

    /**
     * @inheritdoc IMasterContractsRegistry
     */
    function getTokenRegistry() public view override returns (address) {
        return getContract(TOKEN_REGISTRY_NAME);
    }

    function _authorizeUpgrade(
        address newImplementation_
    ) internal virtual override onlyCreatePermission {}
}
