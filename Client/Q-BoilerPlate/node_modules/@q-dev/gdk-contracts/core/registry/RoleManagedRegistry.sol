// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "@dlsl/dev-modules/contracts-registry/AbstractContractsRegistry.sol";

import "../Globals.sol";

/**
 * @title RoleManagedRegistry
 * @notice This contract serves as a registry for contracts and implements role-based access control
 * for performing certain actions.
 *
 * @dev In order to perform actions on contracts, such as upgrading or modifying them, the caller
 * must have the appropriate permissions.
 *
 * The `DAORegistry` and `MasterContractsRegistry` are based on this contract.
 * In addition, this contract is inherited from the `AbstractContractsRegistry` contract by the EIP-6224 standard.
 * For more information, see https://eips.ethereum.org/EIPS/eip-6224, and you can also read
 * the documentation on the `AbstractContractsRegistry` contract to understand more about
 * the organization of the contract registries in this project.
 *
 * All implementation details are in the `AbstractContractsRegistry` contract, so if something unclear to use
 * read the docs from there too.
 */
abstract contract RoleManagedRegistry is AbstractContractsRegistry {
    /**
     * @dev Initializes the contract by setting the address of the permission manager,
     * which will be used to check the permissions of the user performing the operations
     * on the contracts registry (currently registries are the `DAORegistry` and `MasterContractsRegistry`)
     * @param permissionManager_ The address of the permission manager.
     */
    function __RoleManagedRegistry_init(address permissionManager_) internal onlyInitializing {
        __ContractsRegistry_init();
        _addProxyContract(DAO_PERMISSION_MANAGER_NAME, permissionManager_);
    }

    modifier onlyCreatePermission() virtual {
        _;
    }

    modifier onlyUpdatePermission() virtual {
        _;
    }

    modifier onlyDeletePermission() virtual {
        _;
    }

    /**
     * @dev Returns the address of the permission manager contract.
     * @return The address of the permission manager contract.
     */
    function getPermissionManager() public view returns (address) {
        return getContract(DAO_PERMISSION_MANAGER_NAME);
    }

    /**
     * @dev Injects dependencies for the contract with the given name.
     * @param name_ The name of the contract for which to inject dependencies.
     *
     *  This function takes the contract with the specified name from the Contract Registry
     *  and calls its setDependencies(...) function to inject its dependencies.
     */
    function injectDependencies(string calldata name_) external onlyCreatePermission {
        _injectDependencies(name_);
    }

    /**
     * @dev Upgrades the contract with the given name to the new implementation.
     * @param name_ The name of the contract to upgrade.
     * @param newImplementation_ The address of the new implementation.
     */
    function upgradeContract(
        string calldata name_,
        address newImplementation_
    ) external onlyUpdatePermission {
        _upgradeContract(name_, newImplementation_);
    }

    /**
     * @dev Upgrades the contract with the given name to the new implementation and calls the
     * new implementation with the given data.
     * @param name_ The name of the contract to upgrade.
     * @param newImplementation_ The address of the new implementation.
     * @param data_ The data to call the new implementation with.
     */
    function upgradeContractAndCall(
        string calldata name_,
        address newImplementation_,
        bytes calldata data_
    ) external onlyUpdatePermission {
        _upgradeContractAndCall(name_, newImplementation_, data_);
    }

    /**
     * @dev Adds a new contract to the registry.
     * @param name_ The name of the contract.
     * @param contractAddress_ The address of the contract.
     */
    function addContract(
        string calldata name_,
        address contractAddress_
    ) external onlyCreatePermission {
        _addContract(name_, contractAddress_);
    }

    /**
     * @dev Adds a new proxy contract to the registry.
     * @param name_ The name of the contract.
     * @param contractAddress_ The address of the contract.
     *
     * Under the hood it will deploy TransparentUpgradeableProxy with the given contractAddress_ as implementation
     */
    function addProxyContract(
        string calldata name_,
        address contractAddress_
    ) external onlyCreatePermission {
        _addProxyContract(name_, contractAddress_);
    }

    /**
     * @dev Adds a new proxy contract to the registry.
     * @param name_ The name of the contract to add.
     * @param contractAddress_ The address of the contract to add.
     *
     * This function adds a new contract to the contract registry and marks it as a proxy.
     */
    function justAddProxyContract(
        string calldata name_,
        address contractAddress_
    ) external onlyCreatePermission {
        _justAddProxyContract(name_, contractAddress_);
    }

    /**
     * @dev Removes a contract from the registry.
     * @param name_ The name of the contract to remove.
     */
    function removeContract(string calldata name_) external onlyDeletePermission {
        _removeContract(name_);
    }
}
