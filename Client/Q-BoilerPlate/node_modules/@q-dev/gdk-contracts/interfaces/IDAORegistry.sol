// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "./tokens/IQRC20.sol";

import "./IDAOVoting.sol";

import "./IDAOResource.sol";

/**
 * @title IDAORegistry
 */
interface IDAORegistry is IDAOResource {
    struct AccountStatus {
        string[] groups;
        bool[] isMember;
    }

    event Initialized();

    event PanelAdded(string panelName);

    event PanelRemoved(string panelName);

    /**
     * @dev Adds a new panel to the DAO.
     * @param panelName_ The name of the panel to add.
     *
     * Reverts, if the panel already exists in the DAO.
     */
    function addPanel(string memory panelName_) external;

    /**
     * @dev Removes a panel from the DAO.
     * @param panelName_ The name of the panel to remove.
     *
     * Reverts, if the panel does not exist in the DAO.
     *
     * If the user first deletes the panel and then calls the `deployDAOPanel` function from
     * `MasterDAOFactory`, the old contract addresses from the last panel will be overwritten
     * in the DAORegistry with the new contract addresses, which means that it will be almost
     * impossible to restore the old contracts.
     */
    function removePanel(string memory panelName_) external;

    /**
     * @dev Returns the list of panels in the DAO.
     * @return The list of panels in the DAO.
     *
     * Could be the problem if the panel is created manually (not through the `deployDAOPanel`)
     */
    function getPanels() external view returns (string[] memory);

    /**
     * @dev Function to check if newly added panel do not exceed the limit.
     * @return True if able to add panel, false otherwise.
     */
    function isAbleToAddPanel() external view returns (bool);

    /**
     * @dev Returns account statuses in the DAO.
     */
    function getAccountStatuses(
        address account_
    ) external view returns (AccountStatus memory status);

    /**
     * @dev Returns the address of the configuration parameter storage contract for
     * the specified DAO panel.
     * @param panelName_ The name of the panel for which to get the parameter storage contract address.
     * @return The address of the parameter storage contract for the specified DAO panel.
     *
     * It stores parameters such as votingPeriod, vetoPeriod, etc.
     */
    function getConfDAOParameterStorage(string memory panelName_) external view returns (address);

    /**
     * @dev Returns the address of the regular experts parameter storage contract for
     * the specified DAO panel.
     * @param panelName_ The name of the panel for which to get the parameter storage contract address.
     * @return The address of the parameter storage contract for the specified DAO panel.
     *
     * It stores regular experts parameters. By default, only experts can change them.
     */
    function getRegDAOParameterStorage(string memory panelName_) external view returns (address);

    /**
     * @dev Returns the address of the member storage contract for the specified DAO panel.
     * @param panelName_ The name of the panel for which to get the member storage contract address.
     * @return The address of the member storage contract for the specified DAO panel.
     */
    function getDAOMemberStorage(string memory panelName_) external view returns (address);

    /**
     * @dev Returns the address of the voting contract for the specified DAO panel.
     * @param panelName_ The name of the panel for which to get the voting contract address.
     * @return The address of the voting contract for the specified DAO panel.
     */
    function getGeneralDAOVoting(string memory panelName_) external view returns (address);

    /**
     * @dev Returns the address of the voting contract for the specified DAO panel.
     * @param panelName_ The name of the panel for which to get the voting contract address.
     * @return The address of the voting contract for the specified DAO panel.
     */
    function getExpertsDAOVoting(string memory panelName_) external view returns (address);

    /**
     * @dev Returns the address of the voting factory contract for the DAO.
     * @return The address of the voting factory contract for the DAO.
     */
    function getVotingFactory() external view returns (address);

    /**
     * @dev Returns the address of the voting registry contract for the DAO.
     * @return The address of the voting registry contract for the DAO.
     */
    function getVotingRegistry() external view returns (address);

    /**
     * @dev Returns the address of the vault contract for the DAO.
     * @return The address of the vault contract for the DAO.
     */
    function getDAOVault() external view returns (address);
}
