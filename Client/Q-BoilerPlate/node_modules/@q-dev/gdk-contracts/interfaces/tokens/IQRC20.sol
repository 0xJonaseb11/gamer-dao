// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";

/**
 * @title IQRC20
 * @dev Interface for a QRC20 token contract that is ERC20-compliant and supports additional features.
 */
interface IQRC20 is IERC20Upgradeable {
    /**
     * @dev Struct to pass constructor parameters to the IQRC20 implementation contract.
     * @param name The name of the QRC20 token.
     * @param symbol The symbol of the QRC20 token.
     * @param contractURI The URI of the contract metadata.
     * @param decimals The number of decimals for the QRC20 token.
     * @param totalSupplyCap The maximum total supply for the QRC20 token.
     */
    struct ConstructorParams {
        string name;
        string symbol;
        string contractURI;
        uint8 decimals;
        uint256 totalSupplyCap;
    }

    /**
     * @dev Mints new QRC20 tokens to the specified account address.
     * @param account_ The address of the account to mint new QRC20 tokens to.
     * @param amount_ The amount of QRC20 tokens to mint.
     */
    function mintTo(address account_, uint256 amount_) external;

    /**
     * @dev Burns existing QRC20 tokens owned by the specified account address.
     * @param account_ The address of the account that owns the QRC20 tokens to burn.
     * @param amount_ The amount of QRC20 tokens to burn.
     */
    function burnFrom(address account_, uint256 amount_) external;
}
