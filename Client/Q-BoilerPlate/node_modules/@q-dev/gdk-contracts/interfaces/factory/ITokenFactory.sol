// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "../tokens/IQSBT.sol";
import "../tokens/IQRC20.sol";
import "../tokens/IQRC721.sol";

/**
 * @title ITokenFactory
 * @dev Interface for a contract factory that deploys instances of `QRC20` and `QRC721`.
 */
interface ITokenFactory {
    struct ConstructorParams {
        address daoRegistry;
    }

    event DeployedQRC20(address token, IQRC20.ConstructorParams);

    event DeployedQRC721(address token, IQRC721.ConstructorParams);

    event DeployedQSBT(address token, IQSBT.ConstructorParams);

    /**
     * @dev Deploys a PublicBeaconProxy that as the implementation uses the QRC20 contract.
     * @param params_ A `ConstructorParams` struct containing the constructor parameters for `QRC20`.
     * @param tokenOwner_ The address that will be the owner of the newly deployed `QRC20` contract.
     * @return The address of the newly deployed `QRC20` contract.
     */
    function deployQRC20(
        IQRC20.ConstructorParams calldata params_,
        address tokenOwner_
    ) external returns (address);

    /**
     * @dev Deploys a PublicBeaconProxy that as the implementation uses the QRC721 contract.
     * @param params_ A `ConstructorParams` struct containing the constructor parameters for `QRC721`.
     * @param tokenOwner_ The address that will be the owner of the newly deployed `QRC721` contract.
     * @return The address of the newly deployed `QRC721` contract.
     */
    function deployQRC721(
        IQRC721.ConstructorParams calldata params_,
        address tokenOwner_
    ) external returns (address);

    /**
     * @dev Deploys a PublicBeaconProxy that as the implementation uses the QSBT contract.
     * @param params_ A `ConstructorParams` struct containing the constructor parameters for `QSBT`.
     * @param tokenOwner_ The address that will be the owner of the newly deployed `QSBT` contract.
     * @return The address of the newly deployed `QSBT` contract.
     */
    function deployQSBT(
        IQSBT.ConstructorParams calldata params_,
        address tokenOwner_
    ) external returns (address);
}
