// SPDX-License-Identifier: LGPL-3.0-or-later
pragma solidity 0.8.19;

import "./ITokenFactory.sol";
import "./IVotingFactory.sol";

import "../IDAORegistry.sol";
import "../IDAOParameterStorage.sol";
import "../IPermissionManager.sol";

import "../../DAO/DAORegistry.sol";

/**
 * @title IMasterDAOFactory
 * @dev Interface for a contract that deploys instances of DAO-related contracts.
 */
interface IMasterDAOFactory {
    event DeployedDAORegistry(address daoRegistryProxy_, DAOConstructorParameters params_);

    event DeployedDAOVault(address daoVaultProxy_, DAORegistry);

    event DeployedDAOPanelVoting(address daoPanelVotingProxy_, DAORegistry);

    event DeployedDAOParameterStorage(address daoParameterStorageProxy_, DAORegistry);

    event DeployedDAOMemberStorage(address daoMemberStorageProxy_, DAORegistry);

    event DeployedPermissionManager(address permissionManagerProxy_, DAORegistry);

    event DeployedVotingFactory(address votingFactoryProxy_, DAORegistry);

    event DeployedVotingRegistry(address votingRegistryProxy_, DAORegistry);

    /**
     * @dev Deploys a new DAO with the specified constructor parameters.
     * @param params_ A struct containing the constructor parameters for the DAO-related contracts.
     * @return The address of the newly deployed `DAORegistry` contract.
     */
    function deployDAO(DAOConstructorParameters calldata params_) external returns (address);

    /**
     * @dev Deploys the DAOVoting, DAOParameterStorage and DAOMemberStorage contracts for a new DAO.
     * @param dao_ The address of the `DAORegistry` contract for the new DAO.
     * @param daoPanelParams_ A struct containing the constructor parameters for the DAOPanel contract.
     * @return The addresses of the deployed contracts (`DAOVoting`, `DAOParameterStorage` and `DAOMemberStorage`).
     */
    function deployDAOPanel(
        DAORegistry dao_,
        DAOPanelConstructorParameters memory daoPanelParams_
    ) external returns (address, address, address, address);

    /**
     * @dev The wrapper function for `addVetoGroups` in the PermissionManager contract.
     */
    function configureVetoGroups(
        DAORegistry dao_,
        IPermissionManager.VetoGroup[] memory vetoGroups_
    ) external;

    /**
     * @dev This function is used for the backward compatibility with the old Master DAO Registry.
     */
    function restoreRegistryPools(string calldata name_, address[] calldata pools_) external;

    /**
     * @dev The function to give away the DAO creator role.
     */
    function revokeDAOCreatorRole(DAORegistry dao_) external;
}
