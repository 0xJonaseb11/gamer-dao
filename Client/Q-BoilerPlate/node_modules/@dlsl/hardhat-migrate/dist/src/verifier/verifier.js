"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Verifier = void 0;
const plugins_1 = require("hardhat/plugins");
const constants_1 = require("../constants");
const exclude_error_1 = require("../utils/exclude-error");
const etherscan_api_1 = require("./etherscan-api");
class Verifier {
  constructor(hre, attempts, skipVerificationErrors) {
    this.hre = hre;
    this.attempts = attempts;
    this.skipVerificationErrors = skipVerificationErrors;
    if (this.hre.config.contractSizer !== undefined) {
      this.hre.config.contractSizer.runOnCompile = false;
    }
  }
  async verifyBatch(verificationTable) {
    for (const item of verificationTable) {
      const contract = await item.instance.at(item.address);
      await this.verifySingle(contract, ...item.args);
    }
  }
  async verifySingle(contract, ...args) {
    console.log();
    await this.attemptVerification(contract, ...args);
  }
  async verifyProxy(proxyAddress, implAddress) {
    console.log();
    try {
      const etherscanApi = await (0, etherscan_api_1.getEtherscanAPIConfig)(
        this.hre
      );
      await this.linkProxyWithImplementationAbi(
        etherscanApi,
        proxyAddress,
        implAddress
      );
    } catch (e) {
      if (
        e.message.includes(
          `{"message":"Unknown action","result":null,"status":"0"}`
        )
      ) {
        console.log(
          `Perhaps you are trying to verify a contract on BlockScout. Proxy verification failed!`
        );
      } else {
        throw new plugins_1.NomicLabsHardhatPluginError(
          constants_1.pluginName,
          e.message
        );
      }
    }
  }
  async attemptVerification(contract, ...args) {
    let counter = 0;
    while (true) {
      try {
        await this.verificationTask(contract, ...args);
        break;
      } catch (e) {
        const [isSkipped, msg] = (0, exclude_error_1.checkExclusion)(
          e.message,
          this.skipVerificationErrors
        );
        if (isSkipped) {
          console.log(`Contract at ${contract.address} ${msg}.`);
          break;
        } else if (counter < this.attempts - 1) {
          console.log(`Attempt #${counter + 1}\n`);
          console.log(`Verification failed\n${e.message}\n`);
        } else {
          throw new plugins_1.NomicLabsHardhatPluginError(
            constants_1.pluginName,
            e.message
          );
        }
      }
      counter += 1;
    }
  }
  async verificationTask(contract, ...args) {
    const fileName = contract.constructor._hArtifact.sourceName;
    const contractName = contract.constructor._hArtifact.contractName;
    await this.hre.run("verify:verify", {
      address: contract.address,
      constructorArguments: args,
      contract: fileName + ":" + contractName,
      noCompile: true,
    });
  }
  /**
   * Calls the Etherscan API to link a proxy with its implementation ABI.
   *
   * Source: https://github.com/OpenZeppelin/openzeppelin-upgrades
   *
   * @param etherscanApi The Etherscan API config
   * @param proxyAddress The proxy address
   * @param implAddress The implementation address
   */
  async linkProxyWithImplementationAbi(
    etherscanApi,
    proxyAddress,
    implAddress
  ) {
    console.log(`Linking proxy ${proxyAddress} with implementation`);
    const params = {
      module: "contract",
      action: "verifyproxycontract",
      address: proxyAddress,
      expectedimplementation: implAddress,
    };
    let responseBody = await (0, etherscan_api_1.callEtherscanApi)(
      etherscanApi,
      params
    );
    if (responseBody.status === etherscan_api_1.RESPONSE_OK) {
      // initial call was OK, but need to send a status request using the returned guid to get the actual verification status
      const guid = responseBody.result;
      responseBody = await this.checkProxyVerificationStatus(
        etherscanApi,
        guid
      );
      while (responseBody.result === "Pending in queue") {
        await delay(3000);
        responseBody = await this.checkProxyVerificationStatus(
          etherscanApi,
          guid
        );
      }
    }
    if (responseBody.status === etherscan_api_1.RESPONSE_OK) {
      console.log("Successfully linked proxy to implementation.");
    } else {
      throw new plugins_1.NomicLabsHardhatPluginError(
        constants_1.pluginName,
        `Failed to link proxy ${proxyAddress} with its implementation. Reason: ${responseBody.result}`
      );
    }
    async function delay(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }
  }
  async checkProxyVerificationStatus(etherscanApi, guid) {
    const checkProxyVerificationParams = {
      module: "contract",
      action: "checkproxyverification",
      apikey: etherscanApi.key,
      guid: guid,
    };
    return await (0, etherscan_api_1.callEtherscanApi)(
      etherscanApi,
      checkProxyVerificationParams
    );
  }
}
exports.Verifier = Verifier;
//# sourceMappingURL=verifier.js.map
