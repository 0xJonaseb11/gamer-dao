"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migrations = void 0;
const fs = require("fs");
const path = require("path");
const plugins_1 = require("hardhat/plugins");
const deployer_1 = require("./deployer");
const constants_1 = require("../constants");
const logger_1 = require("../logger/logger");
const verifier_1 = require("../verifier/verifier");
class Migrations {
  constructor(
    hre,
    from,
    to,
    only,
    skip,
    verify,
    confirmations,
    skipVerificationErrors,
    attempts,
    pathToMigration
  ) {
    this.hre = hre;
    this.from = from;
    this.to = to;
    this.only = only;
    this.skip = skip;
    this.verify = verify;
    this.confirmations = confirmations;
    this.skipVerificationErrors = skipVerificationErrors;
    this.attempts = attempts;
    this.pathToMigration = pathToMigration;
  }
  async migrate() {
    try {
      const migrationFiles = this.getMigrationFiles();
      const deployer = new deployer_1.Deployer(
        this.hre,
        this.skipVerificationErrors
      );
      const verifier = new verifier_1.Verifier(
        this.hre,
        this.attempts,
        this.skipVerificationErrors
      );
      const logger = new logger_1.Logger(this.hre);
      await logger.init();
      await deployer.startMigration(logger, ...this.getParams());
      for (const element of migrationFiles) {
        const migration = require(this.resolvePathToFile(
          this.pathToMigration,
          element
        ));
        await migration(deployer, logger, verifier);
      }
      await deployer.finishMigration(logger);
      process.exit(0);
    } catch (e) {
      throw new plugins_1.NomicLabsHardhatPluginError(
        constants_1.pluginName,
        e.message
      );
    }
  }
  async migrateVerify() {
    try {
      const migrationFiles = this.getMigrationFiles();
      const verifier = new verifier_1.Verifier(
        this.hre,
        this.attempts,
        this.skipVerificationErrors
      );
      for (const element of migrationFiles) {
        const migration = require(this.resolvePathToFile(
          this.pathToMigration,
          element
        ));
        await migration(verifier);
      }
      process.exit(0);
    } catch (e) {
      throw new plugins_1.NomicLabsHardhatPluginError(
        constants_1.pluginName,
        e.message
      );
    }
  }
  getMigrationFiles() {
    const migrationsDir = this.resolvePathToFile(this.pathToMigration);
    const directoryContents = fs.readdirSync(migrationsDir);
    let files = directoryContents
      .filter((file) => {
        let migrationNumber = parseInt(path.basename(file));
        return !isNaN(migrationNumber) && migrationNumber > 0;
      })
      .filter((file) => fs.statSync(migrationsDir + file).isFile())
      .filter((file) => {
        let migrationNumber = parseInt(path.basename(file));
        if (
          this.from > migrationNumber ||
          (this.to < migrationNumber && this.to != -1)
        ) {
          return false;
        }
        return true;
      })
      .filter((file) => {
        let migrationNumber = parseInt(path.basename(file));
        if (this.only != migrationNumber && this.only != -1) {
          return false;
        }
        return true;
      })
      .filter((file) => {
        let migrationNumber = parseInt(path.basename(file));
        if (this.skip == migrationNumber) {
          return false;
        }
        return true;
      })
      .sort((a, b) => {
        return parseInt(path.basename(a)) - parseInt(path.basename(b));
      });
    if (files.length === 0) {
      throw new plugins_1.NomicLabsHardhatPluginError(
        constants_1.pluginName,
        "No migration files were found."
      );
    }
    console.log("\nMigration files:", files);
    return files;
  }
  getParams() {
    if (!this.verify && this.attempts > 0) {
      throw new plugins_1.NomicLabsHardhatPluginError(
        constants_1.pluginName,
        "attempts > 0 with missing verify flag"
      );
    }
    return [this.verify, this.confirmations, this.attempts];
  }
  resolvePathToFile(path_, file_ = "") {
    return path.normalize(fs.realpathSync(path_) + "/" + file_);
  }
}
exports.Migrations = Migrations;
//# sourceMappingURL=migrations.js.map
