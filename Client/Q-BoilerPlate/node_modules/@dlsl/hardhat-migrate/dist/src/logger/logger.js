"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const Web3 = require("web3");
const axios_1 = __importDefault(require("axios"));
const bignumber_js_1 = require("bignumber.js");
class Logger {
  constructor(hre) {
    this.hre = hre;
    this.nativeSymbol = "";
    this.totalCost = (0, bignumber_js_1.BigNumber)(0);
    this.totalTransactions = 0;
  }
  async init() {
    this.nativeSymbol = await this.getNativeSymbol();
  }
  logTransaction(tx, name, printLogs = false) {
    const excludedKeys = [
      "contractAddress",
      "cumulativeGasUsed",
      "status",
      "transactionIndex",
      "type",
      "logsBloom",
      "blockHash",
      "transactionHash",
    ];
    let output = this.underline(`Transaction '${name}'`);
    let logs = "";
    output += `   + ${"transactionHash:".padEnd(20)} ${
      tx.receipt.transactionHash
    }\n`;
    for (const [key, value] of Object.entries(tx.receipt)) {
      if (excludedKeys.includes(key)) {
        continue;
      }
      if (key.toLowerCase().includes("logs")) {
        logs += `   + ${(key + ":").padEnd(20)} \n${JSON.stringify(
          value,
          null,
          2
        )}\n`;
        continue;
      }
      switch (key) {
        case "effectiveGasPrice":
          output += `   + ${"gasPrice:".padEnd(20)} ${(0,
          bignumber_js_1.BigNumber)(value).div(10 ** 9)} gwei\n`;
          break;
        case "from":
          output += `   + ${"account:".padEnd(20)} ${value}\n`;
          break;
        case "to":
          output += `   + ${"recipient:".padEnd(20)} ${value}\n`;
          break;
        default:
          output += `   + ${(key + ":").padEnd(20)} ${value}\n`;
      }
    }
    if (tx.receipt.effectiveGasPrice != undefined) {
      const totalCost = (0, bignumber_js_1.BigNumber)(
        tx.receipt.effectiveGasPrice
      )
        .times(tx.receipt.gasUsed)
        .div(10 ** 18);
      output += `   + ${"totalCost:".padEnd(20)} ${totalCost} ${
        this.nativeSymbol
      }\n`;
      this.totalTransactions += 1;
      this.totalCost = this.totalCost.plus(totalCost);
    }
    console.log(output);
    if (printLogs) {
      console.log(logs);
    }
  }
  summary() {
    const output =
      `> ${"Total transactions:".padEnd(20)} ${this.totalTransactions}\n` +
      `> ${"Final cost:".padEnd(20)} ${this.totalCost.toString()} ${
        this.nativeSymbol
      }\n`;
    console.log(output);
  }
  logContracts(...contracts) {
    const table = [];
    for (const element of contracts) {
      table.push({ Contract: element[0], Address: element[1] });
    }
    console.table(table);
    console.log();
  }
  log(...args) {
    if (this.nativeSymbol === "ETH") {
      console.log(...args);
      return;
    }
    const pattern = /\b\w+\b:\s*\d+(?:\.\d+)?\s*ETH\b/g;
    const replacedArgs = args.map((arg) => {
      if (typeof arg === "string") {
        return arg.replace(pattern, (match) => {
          return match.replace("ETH", `${this.nativeSymbol}`);
        });
      }
      return arg;
    });
    console.log(...replacedArgs);
  }
  async getNativeSymbol() {
    const web3 = new Web3(this.hre.network.provider);
    const chainId = await web3.eth.getChainId();
    const chain = await this.filterChainsByChainId(chainId);
    if (chain && chainId !== 31337 && chainId !== 1337) {
      return chain.nativeCurrency.symbol;
    }
    return "ETH";
  }
  async filterChainsByChainId(chainId) {
    const chains = await this.getRecords();
    return chains.find((chain) => chain.chainId === chainId);
  }
  async getRecords() {
    const url = "https://chainid.network/chains.json";
    const response = await axios_1.default.get(url);
    // Assuming the JSON response is an array of record objects
    return response.data;
  }
  underline(msg) {
    return `\n   ${msg}\n   ${"-".repeat(msg.length)}\n`;
  }
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map
