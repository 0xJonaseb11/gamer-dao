"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.Verifier = exports.Deployer = void 0;
require("@nomiclabs/hardhat-etherscan");
const task_names_1 = require("hardhat/builtin-tasks/task-names");
require("./type-extensions");
const config_1 = require("hardhat/config");
const config_2 = require("./config");
const constants_1 = require("./constants");
const migrations_1 = require("./deployer/migrations");
var deployer_1 = require("./deployer/deployer");
Object.defineProperty(exports, "Deployer", {
  enumerable: true,
  get: function () {
    return deployer_1.Deployer;
  },
});
var verifier_1 = require("./verifier/verifier");
Object.defineProperty(exports, "Verifier", {
  enumerable: true,
  get: function () {
    return verifier_1.Verifier;
  },
});
var logger_1 = require("./logger/logger");
Object.defineProperty(exports, "Logger", {
  enumerable: true,
  get: function () {
    return logger_1.Logger;
  },
});
(0, config_1.extendConfig)(config_2.migrateConfigExtender);
const getMigrationConfig = async (
  {
    from,
    to,
    only,
    skip,
    confirmations,
    attempts,
    pathToMigrations,
    verify,
    force,
  },
  env
) => {
  // Make sure that contract artifacts are up-to-date.
  await env.run(task_names_1.TASK_COMPILE, {
    quiet: true,
    force: force,
  });
  return new migrations_1.Migrations(
    env,
    from === undefined ? env.config.migrate.from : from,
    to === undefined ? env.config.migrate.to : to,
    only === undefined ? env.config.migrate.only : only,
    skip === undefined ? env.config.migrate.skip : skip,
    !verify ? env.config.migrate.verify : verify,
    confirmations === undefined
      ? env.config.migrate.confirmations
      : confirmations,
    env.config.migrate.skipVerificationErrors === undefined
      ? []
      : env.config.migrate.skipVerificationErrors,
    attempts === undefined ? env.config.migrate.attempts : attempts,
    pathToMigrations === undefined
      ? env.config.migrate.pathToMigrations
      : pathToMigrations
  );
};
const migrate = async (taskArgs, env, runSuper) => {
  const migrations = await getMigrationConfig(taskArgs, env, runSuper);
  await migrations.migrate();
};
const migrateVerify = async (taskArgs, env, runSuper) => {
  const migrations = await getMigrationConfig(taskArgs, env, runSuper);
  await migrations.migrateVerify();
};
(0, config_1.task)(
  constants_1.TASK_MIGRATE,
  "Deploy contracts via migration files"
)
  .addOptionalParam(
    "from",
    "The migration number from which the migration will be applied.",
    undefined,
    config_1.types.int
  )
  .addOptionalParam(
    "to",
    "The migration number up to which the migration will be applied.",
    undefined,
    config_1.types.int
  )
  .addOptionalParam(
    "only",
    "The number of the migration that will be applied. Overrides from and to parameters.",
    undefined,
    config_1.types.int
  )
  .addOptionalParam(
    "skip",
    "The number of migration to skip. Overrides only parameter.",
    undefined,
    config_1.types.int
  )
  .addFlag(
    "verify",
    "The flag indicating whether the verification of the contract is needed."
  )
  .addFlag("force", "The flag indicating whether the compilation is forced.")
  .addOptionalParam(
    "confirmations",
    "The number defining after how many blocks the verification should start.",
    undefined,
    config_1.types.int
  )
  .addOptionalParam(
    "attempts",
    "The number of attempts to verify the contract.",
    undefined,
    config_1.types.int
  )
  .addOptionalParam(
    "pathToMigrations",
    "The path to the folder with the specified migrations.",
    undefined,
    config_1.types.string
  )
  .setAction(migrate);
(0, config_1.task)(
  constants_1.TASK_MIGRATE_VERIFY,
  "Verify contracts via migration files"
)
  .addOptionalParam(
    "from",
    "The migration number from which the migration will be applied.",
    undefined,
    config_1.types.int
  )
  .addOptionalParam(
    "to",
    "The migration number up to which the migration will be applied.",
    undefined,
    config_1.types.int
  )
  .addOptionalParam(
    "only",
    "The number of the migration that will be applied. Overrides from and to parameters.",
    undefined,
    config_1.types.int
  )
  .addOptionalParam(
    "skip",
    "The number of migration to skip. Overrides only parameter.",
    undefined,
    config_1.types.int
  )
  .addFlag("force", "The flag indicating whether the compilation is forced.")
  .addOptionalParam(
    "attempts",
    "The number of attempts to verify the contract.",
    undefined,
    config_1.types.int
  )
  .addOptionalParam(
    "pathToMigrations",
    "The path to the folder with the specified migrations.",
    undefined,
    config_1.types.string
  )
  .setAction(migrateVerify);
//# sourceMappingURL=index.js.map
