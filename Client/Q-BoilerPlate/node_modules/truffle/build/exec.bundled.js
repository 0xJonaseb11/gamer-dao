#!/usr/bin/env node

/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 241400:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
  run: __webpack_require__(22888),
  meta: __webpack_require__(781483)
};


/***/ }),

/***/ 781483:
/***/ ((module) => {

module.exports = {
  command: "exec",
  description: "Execute a JS module within this Truffle environment",
  builder: {
    file: {
      type: "string"
    },
    c: {
      type: "boolean",
      default: false
    },
    compile: {
      type: "boolean",
      default: false
    }
  },
  help: {
    usage: "truffle exec <script.js> [--compile]",
    options: [
      {
        option: "<script.js>",
        description:
          "JavaScript file to be executed. Can include path information if the script" +
          " does not exist in the current\n                    directory. (required)"
      },
      {
        option: "--compile",
        description: "Compile contracts before executing the script."
      }
    ],
    allowedGlobalOptions: ["network", "config"]
  }
};


/***/ }),

/***/ 22888:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = async function (options) {
  const Config = __webpack_require__(120553);
  const WorkflowCompile = (__webpack_require__(437017)["default"]);
  const ConfigurationError = __webpack_require__(48937);
  const exec = (__webpack_require__(435422).exec);
  const { Environment } = __webpack_require__(376765);
  const path = __webpack_require__(371017);
  const OS = __webpack_require__(822037);
  const { promisify } = __webpack_require__(473837);

  const config = Config.detect(options);

  let file = options.file;

  if (file == null && options._.length > 0) {
    file = options._[0];
  }

  if (file == null) {
    throw new ConfigurationError(
      "Please specify a file, passing the path of the script you'd like the run. Note that all scripts *must* call process.exit() when finished."
    );
  }

  if (path.isAbsolute(file) === false) {
    file = path.join(process.cwd(), file);
  }

  await Environment.detect(config);
  if (config.networkHint !== false) {
    config.logger.log("Using network '" + config.network + "'." + OS.EOL);
  }

  // `--compile`
  let compilationOutput;
  if (options.c || options.compile) {
    compilationOutput = await WorkflowCompile.compile(config);
  }
  // save artifacts if compilation took place
  if (compilationOutput) {
    await WorkflowCompile.save(config, compilationOutput);
  }
  return await promisify(exec)(config.with({ file }));
};


/***/ }),

/***/ 48937:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var TruffleError = __webpack_require__(673321);

class ConfigurationError extends TruffleError {
  constructor(message) {
    super(message);
  }
}

module.exports = ConfigurationError;


/***/ }),

/***/ 386927:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { IPC } = __webpack_require__(775898);
const path = __webpack_require__(371017);
const { spawn } = __webpack_require__(532081);
const debug = __webpack_require__(615158);
const chalk = __webpack_require__(434061);

const Develop = {
  start: async function (ipcNetwork, ganacheOptions = {}) {
    let chainPath;

    // The path to the dev env process depends on whether or not
    // we're running in the bundled version. If not, use chain.js
    // directly, otherwise let the bundle point at the bundled version.
    if (true) {
      // Remember: In the bundled version, __dirname refers to the
      // build directory where cli.bundled.js and cli.chain.js live.
      chainPath = path.join(__dirname, "chain.bundled.js");
    } else {}

    const logger = ganacheOptions.logger || console;
    //check that genesis-time config option passed through the
    //truffle-config.js file is a valid time.
    if (ganacheOptions.time && isNaN(Date.parse(ganacheOptions.time))) {
      ganacheOptions.time = Date.now();
      logger.log(
        "\x1b[31m%s\x1b[0m",
        "Invalid Date passed to genesis-time, using current Date instead",
        "\x1b[0m"
      );
    }

    const stringifiedOptions = JSON.stringify(ganacheOptions);
    const optionsBuffer = Buffer.from(stringifiedOptions);
    const base64OptionsString = optionsBuffer.toString("base64");

    return spawn("node", [chainPath, ipcNetwork, base64OptionsString], {
      detached: true,
      stdio: "ignore"
    });
  },

  /**
   * Connect to an existing Ganache server or start a new one.
   * @param {object} options
   * @param {object} options.ipcOptions - options for IPC connection
   * @param {boolean} options.ipcOptions.log - whether to log IPC messages. Defaults to false.
   * @param {string} options.ipcOptions.network - network name. Defaults to "develop".
   * @param {boolean} options.ipcOptions.retry - whether to retry connection. Defaults to false.
   * @param {string} options.solidityLogDisplayPrefix - prefix to display before solidity log messages. Defaults to "".
   * @returns {Promise<(): void>} - IPC disconnection function.
   */
  connect: function ({ ipcOptions, solidityLogDisplayPrefix }) {
    const debugServer = debug("develop:ipc:server");
    const debugClient = debug("develop:ipc:client");
    const debugRPC = debug("develop:ganache");
    const ganacheColor = {
      hex: "#ffaf5f", // ganache's color in hex
      xterm: 215 // Xterm's number equivalent
    };
    debugRPC.color = ganacheColor.xterm;

    ipcOptions.retry = ipcOptions.retry || false;
    ipcOptions.log = ipcOptions.log || false;
    ipcOptions.network = ipcOptions.network || "develop";
    solidityLogDisplayPrefix = solidityLogDisplayPrefix || "";
    var ipcNetwork = ipcOptions.network;

    var ipc = new IPC();
    ipc.config.appspace = "truffle.";

    // set connectPath explicitly
    var dirname = ipc.config.socketRoot;
    var basename = `${ipc.config.appspace}${ipcNetwork}`;
    var connectPath = path.join(dirname, basename);
    var loggers = {};

    ipc.config.silent = !debugClient.enabled;
    ipc.config.logger = debugClient;

    const sanitizeAndCallFn =
      fn =>
      (...args) => {
        // HACK-y: replace `{}` that is getting logged instead of ""
        if (
          args.length === 1 &&
          typeof args[0] === "object" &&
          Object.keys(args[0]).length === 0
        ) {
          args[0] = "";
        }
        fn.apply(undefined, args);
      };

    if (debugServer.enabled) {
      loggers.ipc = debugServer;
    }

    // create a logger to present Ganache's console log messages
    const createSolidityLogger = prefix => {
      return maybeMultipleLines =>
        maybeMultipleLines.split("\n").forEach(
          // decorate each line's prefix.
          line => console.log(chalk.hex(ganacheColor.hex)(` ${prefix}`), line)
        );
    };

    // enable output/logger for solidity console.log
    loggers.solidity = sanitizeAndCallFn(
      createSolidityLogger(solidityLogDisplayPrefix)
    );

    if (ipcOptions.log) {
      debugRPC.enabled = true;
      loggers.ganache = sanitizeAndCallFn(debugRPC);
    }

    if (!ipcOptions.retry) {
      ipc.config.maxRetries = 0;
    }

    var disconnect = function () {
      ipc.disconnect(ipcNetwork);
    };

    return new Promise((resolve, reject) => {
      ipc.connectTo(ipcNetwork, connectPath, function () {
        ipc.of[ipcNetwork].on("destroy", function () {
          reject(new Error("IPC connection destroyed"));
        });

        ipc.of[ipcNetwork].on("truffle.ready", function () {
          resolve(disconnect);
        });

        Object.keys(loggers).forEach(function (key) {
          var log = loggers[key];
          if (log) {
            var message = `truffle.${key}.log`;
            ipc.of[ipcNetwork].on(message, log);
          }
        });
      });
    });
  },

  /**
   * Connect to a managed Ganache service. This will connect to an existing
   * Ganache service if one exists, or, create a new one to connect to.
   *
   * @param {Object} ipcOptions - IPC connection options.
   * @param {string} ipcOptions.network - the network name.
   * @param {Object} ganacheOptions - Ganache options if service is necessary.
   * @param {string} solidityLogDisplayPrefix - solidity log messages prefix.
   * @returns {Promise<Object>} - object with `disconnect` function and
   *     `started` boolean. The `disconnect` function is used to disconnect
   *     from the Ganache service. The `started` boolean is true if a new
   *     Ganache service was started, false otherwise.
   */
  connectOrStart: async function (
    ipcOptions,
    ganacheOptions,
    solidityLogDisplayPrefix = ""
  ) {
    ipcOptions.retry = false;

    const ipcNetwork = ipcOptions.network || "develop";

    let started = false;
    let disconnect;

    try {
      disconnect = await this.connect({ ipcOptions, solidityLogDisplayPrefix });
    } catch (_error) {
      await this.start(ipcNetwork, ganacheOptions);
      ipcOptions.retry = true;
      disconnect = await this.connect({ ipcOptions, solidityLogDisplayPrefix });
      started = true;
    } finally {
      return {
        disconnect,
        started
      };
    }
  }
};

module.exports = Develop;


/***/ }),

/***/ 753234:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Web3 = __webpack_require__(503283);
const { createInterfaceAdapter } = __webpack_require__(936339);
const expect = __webpack_require__(414096);
const TruffleError = __webpack_require__(673321);
const { Resolver } = __webpack_require__(648511);
const Artifactor = __webpack_require__(529463);
const Ganache = __webpack_require__(711651);
const Provider = __webpack_require__(200509);

const Environment = {
  // It's important config is a Config object and not a vanilla object
  detect: async function (config) {
    expect.options(config, ["networks"]);

    helpers.setUpConfig(config);
    helpers.validateNetworkConfig(config);

    const interfaceAdapter = createInterfaceAdapter({
      provider: config.provider,
      networkType: config.network_config.type
    });

    await Provider.testConnection(config);
    await helpers.detectAndSetNetworkId(config, interfaceAdapter);
    await helpers.setFromOnConfig(config, interfaceAdapter);
  },

  // Ensure you call Environment.detect() first.
  fork: async function (config, ganacheOptions) {
    expect.options(config, ["from", "provider", "networks", "network"]);

    const interfaceAdapter = createInterfaceAdapter({
      provider: config.provider,
      networkType: config.network_config.type
    });

    let accounts;
    try {
      accounts = await interfaceAdapter.getAccounts();
    } catch {
      // don't prevent Truffle from working if user doesn't provide some way
      // to sign transactions (e.g. no reason to disallow debugging)
      accounts = [];
    }
    const block = await interfaceAdapter.getBlock("latest");

    const upstreamNetwork = config.network;
    const upstreamConfig = config.networks[upstreamNetwork];
    const forkedNetwork = config.network + "-fork";
    ganacheOptions = {
      ...ganacheOptions,
      fork: config.provider,
      miner: {
        ...ganacheOptions.miner,
        blockGasLimit: block.gasLimit
      }
    };
    if (accounts.length > 0) ganacheOptions.unlocked_accounts = accounts;

    config.networks[forkedNetwork] = {
      network_id: config.network_id,
      provider: Ganache.provider(ganacheOptions),
      from: config.from,
      gas: upstreamConfig.gas,
      gasPrice: upstreamConfig.gasPrice
    };
    config.network = forkedNetwork;
  },

  develop: async (config, ganacheOptions) => {
    expect.options(config, ["networks"]);

    const network = config.network || "develop";
    const url = `http://${ganacheOptions.host}:${ganacheOptions.port}/`;

    config.networks[network] = {
      ...config.networks[network],
      network_id: ganacheOptions.network_id,
      provider: function () {
        return new Web3.providers.HttpProvider(url, { keepAlive: false });
      }
    };

    config.network = network;

    return await Environment.detect(config);
  }
};

const helpers = {
  setFromOnConfig: async (config, interfaceAdapter) => {
    if (config.from) return;

    try {
      const accounts = await interfaceAdapter.getAccounts();
      config.networks[config.network].from = accounts[0];
    } catch {
      // don't prevent Truffle from working if user doesn't provide some way
      // to sign transactions (e.g. no reason to disallow debugging)
    }
  },

  detectAndSetNetworkId: async (config, interfaceAdapter) => {
    const configNetworkId = config.networks[config.network].network_id;
    const providerNetworkId = await interfaceAdapter.getNetworkId();
    if (configNetworkId !== "*") {
      // Ensure the network id matches the one in the config for safety
      if (providerNetworkId.toString() !== configNetworkId.toString()) {
        const error =
          `The network id specified in the truffle config ` +
          `(${configNetworkId}) does not match the one returned by the network ` +
          `(${providerNetworkId}).  Ensure that both the network and the ` +
          `provider are properly configured.`;
        throw new Error(error);
      }
    } else {
      // We have a "*" network. Get the current network and replace it with the real one.
      // TODO: Should we replace this with the blockchain uri?
      config.networks[config.network].network_id = providerNetworkId;
    }
  },

  validateNetworkConfig: config => {
    const networkConfig = config.network_config;

    if (!networkConfig) {
      throw new TruffleError(
        `Unknown network "${config.network}` +
          `". See your Truffle configuration file for available networks.`
      );
    }

    const configNetworkId = config.network_config.network_id;

    if (configNetworkId == null) {
      throw new Error(
        `You must specify a network_id in your '` +
          `${config.network}' configuration in order to use this network.`
      );
    }
  },

  setUpConfig: config => {
    if (!config.resolver) {
      config.resolver = new Resolver(config);
    }

    if (!config.artifactor) {
      config.artifactor = new Artifactor(config.contracts_build_directory);
    }

    if (!config.network) {
      if (config.networks["development"]) {
        config.network = "development";
      } else {
        config.network = "ganache";
        config.networks[config.network] = {
          host: "127.0.0.1",
          port: 7545,
          network_id: 5777
        };
      }
    }

    const currentNetworkSettings = config.networks[config.network];
    if (
      currentNetworkSettings &&
      currentNetworkSettings.ens &&
      currentNetworkSettings.ens.registry
    ) {
      config.ens.registryAddress = currentNetworkSettings.ens.registry.address;
    }
  }
};

module.exports = Environment;


/***/ }),

/***/ 376765:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Environment = __webpack_require__(753234);
const Develop = __webpack_require__(386927);

module.exports = { Environment, Develop };


/***/ }),

/***/ 435422:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.exec = exports.file = void 0;
const path_1 = __importDefault(__webpack_require__(371017));
const config_1 = __importDefault(__webpack_require__(120553));
const expect_1 = __webpack_require__(414096);
const interface_adapter_1 = __webpack_require__(936339);
const vm_1 = __importDefault(__webpack_require__(626144));
const module_1 = __importDefault(__webpack_require__(498188));
const original_require_1 = __importDefault(__webpack_require__(344516));
const typescript_1 = __webpack_require__(35002);
const debug_1 = __importDefault(__webpack_require__(615158));
const debug = (0, debug_1.default)("require:index");
function file(options) {
    var _a;
    const sourceFilePath = path_1.default.resolve(options.file);
    (0, expect_1.options)(options, ["file"]);
    const conf = config_1.default.default().with(options);
    const scriptModule = new module_1.default(sourceFilePath);
    // Provides a subset of the globals listed here: https://nodejs.org/api/globals.html
    const sandbox = {
        __filename: path_1.default.basename(sourceFilePath),
        __dirname: path_1.default.dirname(sourceFilePath),
        Buffer,
        clearImmediate,
        clearInterval,
        clearTimeout,
        console,
        exports: scriptModule.exports,
        global,
        process,
        setImmediate,
        setInterval,
        setTimeout,
        module: scriptModule,
        config: conf,
        artifacts: conf.resolver,
        require: (id) => {
            // Ugh. Simulate a full require function for the file.
            id = id.trim();
            // If absolute, just require.
            if (path_1.default.isAbsolute(id)) {
                debug("absolute", id);
                return (0, original_require_1.default)(id);
            }
            // If relative, it's relative to the file.
            if (id[0] === ".") {
                const modulePath = path_1.default.join(path_1.default.dirname(sourceFilePath), id);
                debug("relative", id, modulePath);
                return (0, original_require_1.default)(modulePath);
            }
            else {
                // Not absolute, not relative, must be a globally or locally installed module.
                // Try local first.
                // Here we have to require from the node_modules directory directly.
                var moduleDir = conf.working_directory;
                while (true) {
                    const modulePath = path_1.default.join(moduleDir, "node_modules", id);
                    try {
                        debug("local/global", id, modulePath);
                        return (0, original_require_1.default)(modulePath);
                    }
                    catch (e) {
                        debug("local/global", id, modulePath, "failed");
                    }
                    var oldModuleDir = moduleDir;
                    moduleDir = path_1.default.dirname(moduleDir);
                    if (moduleDir === oldModuleDir)
                        break;
                }
                debug("local/global", id, "not found");
                // Try global, and let the error throw.
                return (0, original_require_1.default)(id);
            }
        }
    };
    // Now add contract names.
    Object.keys(conf.context || {}).forEach(key => {
        sandbox[key] = conf.context[key];
    });
    const context = vm_1.default.createContext(sandbox);
    const old_cwd = process.cwd();
    const cwd = path_1.default.dirname(sourceFilePath);
    process.chdir(cwd);
    const source = (0, typescript_1.compile)(conf, sourceFilePath);
    const script = new vm_1.default.Script(source, { filename: sourceFilePath });
    script.runInContext(context);
    scriptModule.loaded = true;
    const returnValue = (_a = scriptModule.exports.default) !== null && _a !== void 0 ? _a : scriptModule.exports;
    process.chdir(old_cwd);
    return returnValue;
}
exports.file = file;
function exec(options, done) {
    (0, expect_1.options)(options, [
        "contracts_build_directory",
        "file",
        "resolver",
        "provider",
        "network",
        "networks",
        "network_id"
    ]);
    const interfaceAdapter = (0, interface_adapter_1.createInterfaceAdapter)({
        provider: options.provider,
        networkType: options.networks[options.network].type
    });
    const web3 = new interface_adapter_1.Web3Shim({
        provider: options.provider,
        networkType: options.networks[options.network].type
    });
    try {
        const fn = file({
            file: options.file,
            context: { web3, interfaceAdapter },
            resolver: options.resolver,
            config: options
        });
        fn(done);
    }
    catch (error) {
        done(error);
    }
}
exports.exec = exec;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 244421:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TsNodeDependencyError = void 0;
const error_1 = __importDefault(__webpack_require__(673321));
/**
 * Thrown when the user attempts to execute TypeScript code but hasn't installed
 * `ts-node` and/or one of ts-node's required peer dependencies.
 */
class TsNodeDependencyError extends error_1.default {
    constructor(sourceFilePath) {
        super(`Attempted to execute module at path ${sourceFilePath}, but the ` +
            "'ts-node' module, or one of its required peers has not been installed.");
    }
}
exports.TsNodeDependencyError = TsNodeDependencyError;
//# sourceMappingURL=types.js.map

/***/ }),

/***/ 35002:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.compile = void 0;
const path_1 = __importDefault(__webpack_require__(371017));
const fs_1 = __webpack_require__(657147);
const original_require_1 = __importDefault(__webpack_require__(344516));
const types_1 = __webpack_require__(244421);
const debug_1 = __importDefault(__webpack_require__(615158));
const debug = (0, debug_1.default)("require:typescript");
const _tsExtensionExpr = /^\.(cts|tsx?)$/i;
let tsNode = null;
try {
    // We use `originalRequire` here to ensure that we use ts-node from the
    // user's environment rather than resolving our own (should we
    // accidentally bundle ts-node)
    tsNode = (0, original_require_1.default)("ts-node");
}
catch (_a) { }
/**
 * @param conf the instance of `@truffle/config` for the user's project
 *
 * @param sourceFilePath the path to the source module to be compiled
 *
 * @param context the global context in which the compiled script will run
 *
 * @returns the TypeScript code stored in the file at location `sourceFilePath`
 *   transpiled to JavaScript when `scriptPath` has a TypeScript file extension,
 *   otherwise it returns the contents of the `scriptPath` file.
 */
function compile(conf, sourceFilePath) {
    const source = (0, fs_1.readFileSync)(sourceFilePath, { encoding: "utf-8" });
    // we only compile TS files, so just return the source unless we are dealing
    // with one of those
    if (!_tsExtensionExpr.test(path_1.default.extname(sourceFilePath))) {
        debug(`${sourceFilePath} is not a TS file, returning unmodified source`);
        return source;
    }
    const compilationService = _getOrCreateCompilationService(conf, sourceFilePath);
    debug(`compiling ${sourceFilePath}`);
    return compilationService.compile(source, sourceFilePath);
}
exports.compile = compile;
/**
 * Creates and caches an instance of TypeScript compiler service that has been
 * initialized with the global context for the module that we'll be executing.
 *
 * @param conf the instance of `@truffle/config` for the user's project
 *
 * @param sourceFilePath the path to the source module being compiled
 *
 * @param context the global context in which the compiled script will run
 *
 * @returns an instance of a TypeScript compiler service (TS Compiler API)
 */
function _getOrCreateCompilationService(conf, sourceFilePath) {
    if (!tsNode) {
        throw new types_1.TsNodeDependencyError(sourceFilePath);
    }
    // we get away with this here because the instance of `process` that we pass
    // into the child context is from our parent global context
    if (!process.hasOwnProperty(tsNode.REGISTER_INSTANCE)) {
        debug("registering ts-node compiler service");
        const createOptions = {
            cwd: conf.working_directory,
            esm: false,
            compilerOptions: {
                inlineSourceMap: true
            }
        };
        let compilationService = tsNode.create(createOptions);
        _compileSandboxGlobalContextTypes(compilationService);
        tsNode.register(compilationService);
    }
    else {
        debug("ts-node compiler service already registered");
    }
    return process[tsNode.REGISTER_INSTANCE];
}
/**
 * Initializes the compiler service with the global types for the sandbox
 * environment.
 */
function _compileSandboxGlobalContextTypes(compilationService) {
    /*
     * It may seem a bit weird that we're compiling a typescript file here to
     * register the global types w/ the compiler service, but this is
     * unfortunately the best option available to us.
     *
     * To use a precompiled `.d.ts` file we'd need to either inject a triple slash
     * directive, import, or require into the user's source, or modify one or more
     * TypeScript compilerOptions in the config. Each of these alternatives come
     * with some unfavorable trade-off.
     *
     * Injecting code has the potential to cause line number offset issues for
     * stack traces, and it causes the compiler service to reevaluate the global
     * types for each new file we process.
     *
     * Modifying compilerOptions (either `files` or `typeRoots` params) overrides
     * default behavior (e.g. the `@types` search path) and/or the user's own
     * config from `tsconfig.json`.
     *
     * With the method used here, we take a small performance hit when the
     * compiler service is first initialized, but otherwise all user code is
     * processed without modification, and compiler configuration is kept
     * consistent with whatever the user set up in their `tsconfig.json`, if it
     * exists.
     */
    const sandboxGlobalContextTypesPath = path_1.default.join(__dirname, "sandboxGlobalContextTypes.ts");
    compilationService.compile((0, fs_1.readFileSync)(sandboxGlobalContextTypesPath, { encoding: "utf-8" }), sandboxGlobalContextTypesPath);
}
//# sourceMappingURL=typescript.js.map

/***/ }),

/***/ 648511:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Resolver = void 0;
const resolver_1 = __webpack_require__(629931);
Object.defineProperty(exports, "Resolver", ({ enumerable: true, get: function () { return resolver_1.Resolver; } }));
exports["default"] = resolver_1.Resolver;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 570972:
/***/ ((module) => {

"use strict";
module.exports = require("@truffle/db-loader");

/***/ }),

/***/ 711651:
/***/ ((module) => {

"use strict";
module.exports = require("ganache");

/***/ }),

/***/ 344516:
/***/ ((module) => {

"use strict";
module.exports = require("original-require");

/***/ }),

/***/ 439491:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 950852:
/***/ ((module) => {

"use strict";
module.exports = require("async_hooks");

/***/ }),

/***/ 714300:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ 532081:
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ 722057:
/***/ ((module) => {

"use strict";
module.exports = require("constants");

/***/ }),

/***/ 706113:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 571891:
/***/ ((module) => {

"use strict";
module.exports = require("dgram");

/***/ }),

/***/ 582361:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 657147:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 773292:
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ 113685:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 795687:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 498188:
/***/ ((module) => {

"use strict";
module.exports = require("module");

/***/ }),

/***/ 241808:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 822037:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 371017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 285477:
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ 863477:
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ 514521:
/***/ ((module) => {

"use strict";
module.exports = require("readline");

/***/ }),

/***/ 12781:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 371576:
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ 924404:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 76224:
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ 257310:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ 473837:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 626144:
/***/ ((module) => {

"use strict";
module.exports = require("vm");

/***/ }),

/***/ 959796:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, [5158,4785,3618,8074,6127,5674,6674,6857,406,6889,6434,1324,8716,2765,5358,3983,4866,5658,1698,6338,4886,560,5898,553,4273,102,4317,7017], () => (__webpack_require__(241400)))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundled.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = {
/******/ 			5326: 1
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 1;
/******/ 			__webpack_require__.O();
/******/ 		};
/******/ 		
/******/ 		// require() chunk loading for javascript
/******/ 		__webpack_require__.f.require = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					installChunk(require("./" + __webpack_require__.u(chunkId)));
/******/ 				} else installedChunks[chunkId] = 1;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			__webpack_require__.e(5158);
/******/ 			__webpack_require__.e(4785);
/******/ 			__webpack_require__.e(3618);
/******/ 			__webpack_require__.e(8074);
/******/ 			__webpack_require__.e(6127);
/******/ 			__webpack_require__.e(5674);
/******/ 			__webpack_require__.e(6674);
/******/ 			__webpack_require__.e(6857);
/******/ 			__webpack_require__.e(406);
/******/ 			__webpack_require__.e(6889);
/******/ 			__webpack_require__.e(6434);
/******/ 			__webpack_require__.e(1324);
/******/ 			__webpack_require__.e(8716);
/******/ 			__webpack_require__.e(2765);
/******/ 			__webpack_require__.e(5358);
/******/ 			__webpack_require__.e(3983);
/******/ 			__webpack_require__.e(4866);
/******/ 			__webpack_require__.e(5658);
/******/ 			__webpack_require__.e(1698);
/******/ 			__webpack_require__.e(6338);
/******/ 			__webpack_require__.e(4886);
/******/ 			__webpack_require__.e(560);
/******/ 			__webpack_require__.e(5898);
/******/ 			__webpack_require__.e(553);
/******/ 			__webpack_require__.e(4273);
/******/ 			__webpack_require__.e(102);
/******/ 			__webpack_require__.e(4317);
/******/ 			__webpack_require__.e(7017);
/******/ 			return next();
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;
//# sourceMappingURL=exec.bundled.js.map