#!/usr/bin/env node

/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 972047:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Packages
var retrier = __webpack_require__(599353);

function retry(fn, opts) {
  function run(resolve, reject) {
    var options = opts || {};
    var op;

    // Default `randomize` to true
    if (!('randomize' in options)) {
      options.randomize = true;
    }

    op = retrier.operation(options);

    // We allow the user to abort retrying
    // this makes sense in the cases where
    // knowledge is obtained that retrying
    // would be futile (e.g.: auth errors)

    function bail(err) {
      reject(err || new Error('Aborted'));
    }

    function onError(err, num) {
      if (err.bail) {
        bail(err);
        return;
      }

      if (!op.retry(err)) {
        reject(op.mainError());
      } else if (options.onRetry) {
        options.onRetry(err, num);
      }
    }

    function runAttempt(num) {
      var val;

      try {
        val = fn(bail, num);
      } catch (err) {
        onError(err, num);
        return;
      }

      Promise.resolve(val)
        .then(resolve)
        .catch(function catchIt(err) {
          onError(err, num);
        });
    }

    op.attempt(runAttempt);
  }

  return new Promise(run);
}

module.exports = retry;


/***/ }),

/***/ 599353:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(71846);

/***/ }),

/***/ 71846:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var RetryOperation = __webpack_require__(541960);

exports.operation = function(options) {
  var timeouts = exports.timeouts(options);
  return new RetryOperation(timeouts, {
      forever: options && (options.forever || options.retries === Infinity),
      unref: options && options.unref,
      maxRetryTime: options && options.maxRetryTime
  });
};

exports.timeouts = function(options) {
  if (options instanceof Array) {
    return [].concat(options);
  }

  var opts = {
    retries: 10,
    factor: 2,
    minTimeout: 1 * 1000,
    maxTimeout: Infinity,
    randomize: false
  };
  for (var key in options) {
    opts[key] = options[key];
  }

  if (opts.minTimeout > opts.maxTimeout) {
    throw new Error('minTimeout is greater than maxTimeout');
  }

  var timeouts = [];
  for (var i = 0; i < opts.retries; i++) {
    timeouts.push(this.createTimeout(i, opts));
  }

  if (options && options.forever && !timeouts.length) {
    timeouts.push(this.createTimeout(i, opts));
  }

  // sort the array numerically ascending
  timeouts.sort(function(a,b) {
    return a - b;
  });

  return timeouts;
};

exports.createTimeout = function(attempt, opts) {
  var random = (opts.randomize)
    ? (Math.random() + 1)
    : 1;

  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
  timeout = Math.min(timeout, opts.maxTimeout);

  return timeout;
};

exports.wrap = function(obj, options, methods) {
  if (options instanceof Array) {
    methods = options;
    options = null;
  }

  if (!methods) {
    methods = [];
    for (var key in obj) {
      if (typeof obj[key] === 'function') {
        methods.push(key);
      }
    }
  }

  for (var i = 0; i < methods.length; i++) {
    var method   = methods[i];
    var original = obj[method];

    obj[method] = function retryWrapper(original) {
      var op       = exports.operation(options);
      var args     = Array.prototype.slice.call(arguments, 1);
      var callback = args.pop();

      args.push(function(err) {
        if (op.retry(err)) {
          return;
        }
        if (err) {
          arguments[0] = op.mainError();
        }
        callback.apply(this, arguments);
      });

      op.attempt(function() {
        original.apply(obj, args);
      });
    }.bind(obj, original);
    obj[method].options = options;
  }
};


/***/ }),

/***/ 541960:
/***/ ((module) => {

function RetryOperation(timeouts, options) {
  // Compatibility for the old (timeouts, retryForever) signature
  if (typeof options === 'boolean') {
    options = { forever: options };
  }

  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
  this._timeouts = timeouts;
  this._options = options || {};
  this._maxRetryTime = options && options.maxRetryTime || Infinity;
  this._fn = null;
  this._errors = [];
  this._attempts = 1;
  this._operationTimeout = null;
  this._operationTimeoutCb = null;
  this._timeout = null;
  this._operationStart = null;
  this._timer = null;

  if (this._options.forever) {
    this._cachedTimeouts = this._timeouts.slice(0);
  }
}
module.exports = RetryOperation;

RetryOperation.prototype.reset = function() {
  this._attempts = 1;
  this._timeouts = this._originalTimeouts.slice(0);
}

RetryOperation.prototype.stop = function() {
  if (this._timeout) {
    clearTimeout(this._timeout);
  }
  if (this._timer) {
    clearTimeout(this._timer);
  }

  this._timeouts       = [];
  this._cachedTimeouts = null;
};

RetryOperation.prototype.retry = function(err) {
  if (this._timeout) {
    clearTimeout(this._timeout);
  }

  if (!err) {
    return false;
  }
  var currentTime = new Date().getTime();
  if (err && currentTime - this._operationStart >= this._maxRetryTime) {
    this._errors.push(err);
    this._errors.unshift(new Error('RetryOperation timeout occurred'));
    return false;
  }

  this._errors.push(err);

  var timeout = this._timeouts.shift();
  if (timeout === undefined) {
    if (this._cachedTimeouts) {
      // retry forever, only keep last error
      this._errors.splice(0, this._errors.length - 1);
      timeout = this._cachedTimeouts.slice(-1);
    } else {
      return false;
    }
  }

  var self = this;
  this._timer = setTimeout(function() {
    self._attempts++;

    if (self._operationTimeoutCb) {
      self._timeout = setTimeout(function() {
        self._operationTimeoutCb(self._attempts);
      }, self._operationTimeout);

      if (self._options.unref) {
          self._timeout.unref();
      }
    }

    self._fn(self._attempts);
  }, timeout);

  if (this._options.unref) {
      this._timer.unref();
  }

  return true;
};

RetryOperation.prototype.attempt = function(fn, timeoutOps) {
  this._fn = fn;

  if (timeoutOps) {
    if (timeoutOps.timeout) {
      this._operationTimeout = timeoutOps.timeout;
    }
    if (timeoutOps.cb) {
      this._operationTimeoutCb = timeoutOps.cb;
    }
  }

  var self = this;
  if (this._operationTimeoutCb) {
    this._timeout = setTimeout(function() {
      self._operationTimeoutCb();
    }, self._operationTimeout);
  }

  this._operationStart = new Date().getTime();

  this._fn(this._attempts);
};

RetryOperation.prototype.try = function(fn) {
  console.log('Using RetryOperation.try() is deprecated');
  this.attempt(fn);
};

RetryOperation.prototype.start = function(fn) {
  console.log('Using RetryOperation.start() is deprecated');
  this.attempt(fn);
};

RetryOperation.prototype.start = RetryOperation.prototype.try;

RetryOperation.prototype.errors = function() {
  return this._errors;
};

RetryOperation.prototype.attempts = function() {
  return this._attempts;
};

RetryOperation.prototype.mainError = function() {
  if (this._errors.length === 0) {
    return null;
  }

  var counts = {};
  var mainError = null;
  var mainErrorCount = 0;

  for (var i = 0; i < this._errors.length; i++) {
    var error = this._errors[i];
    var message = error.message;
    var count = (counts[message] || 0) + 1;

    counts[message] = count;

    if (count >= mainErrorCount) {
      mainError = error;
      mainErrorCount = count;
    }
  }

  return mainError;
};


/***/ }),

/***/ 489244:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(20406);
const pkg = __webpack_require__(373755);

module.exports = {
  build: __webpack_require__(160627),
  create: __webpack_require__(789664),
  // TODO: update this to non-legacy the next breaking change
  contracts: __webpack_require__(781969),
  test: (__webpack_require__(826158).Test),
  version: pkg.version,
  ganache: __webpack_require__(711651)
};


/***/ }),

/***/ 160627:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const fse = __webpack_require__(655674);
const del = __webpack_require__(195752);
const WorkflowCompile = (__webpack_require__(437017)["default"]);
const BuildError = __webpack_require__(142863);
const { spawn } = __webpack_require__(532081);
const spawnargs = __webpack_require__(372255);
const _ = __webpack_require__(496486);
const expect = __webpack_require__(414096);

function CommandBuilder(command) {
  this.command = command;
}

CommandBuilder.prototype.build = function (options, callback) {
  console.log("Running `" + this.command + "`...");

  const args = spawnargs(this.command);
  const ps = args.shift();

  const cmd = spawn(ps, args, {
    detached: false,
    cwd: options.working_directory,
    env: _.merge(process.env, {
      WORKING_DIRECTORY: options.working_directory,
      BUILD_DESTINATION_DIRECTORY: options.destination_directory,
      BUILD_CONTRACTS_DIRECTORY: options.contracts_build_directory
    })
  });

  cmd.stdout.on("data", function (data) {
    console.log(data.toString());
  });

  cmd.stderr.on("data", function (data) {
    console.error(data);
  });

  cmd.on("close", function (code) {
    let error = null;
    if (code !== 0) {
      error = "Command exited with code " + code;
    }
    callback(error);
  });
};

const Build = {
  clean: async function (options) {
    const destination = options.build_directory;
    const contracts_build_directory = options.contracts_build_directory;

    // Clean first.
    await del([destination + "/*", "!" + contracts_build_directory]);
    fse.ensureDirSync(destination);
  },

  build: async function (options) {
    expect.options(options, [
      "build_directory",
      "working_directory",
      "contracts_build_directory",
      "networks"
    ]);

    const logger = options.logger || console;
    let builder = options.build;

    // Duplicate build directory for legacy purposes
    options.destination_directory = options.build_directory;

    if (builder === null || typeof builder === "undefined") {
      logger.log(
        "No build configuration found. Preparing to compile contracts."
      );
    } else if (typeof builder === "string") {
      builder = new CommandBuilder(builder);
    } else if (typeof builder === "function") {
      // If they've only provided a build function, use that.
      builder = { build: builder };
    } else if (builder.build == null) {
      throw new BuildError(
        "Build configuration can no longer be specified as an object. Please see our documentation for an updated list of supported build configurations."
      );
    }

    // Use our own clean method unless the builder supplies one.
    let clean = this.clean;
    if (builder && builder.hasOwnProperty("clean")) {
      clean = builder.clean;
    }

    await clean(options);

    // If necessary. This prevents errors due to the .sol.js files not existing.
    await WorkflowCompile.compileAndSave(options);
    if (builder) {
      builder.build(options, function (err) {
        if (typeof err === "string") {
          throw new BuildError(err);
        }
      });
    }
  }
};

module.exports = Build;


/***/ }),

/***/ 789664:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const path = __webpack_require__(371017);
const fse = __webpack_require__(655674);

const templates = {
  test: {
    filename: path.join(__dirname, "templates", "example.js"),
    variable: "example"
  },
  contract: {
    filename: path.join(__dirname, "templates", "Example.sol"),
    name: "Example",
    license: "MIT",
    variable: "example"
  },
  migration: {
    filename: path.join(__dirname, "templates", "migration.js")
  }
};

const replaceContents = (filePath, find, replacement) => {
  const data = fse.readFileSync(filePath, { encoding: "utf8" });
  if (typeof find === "string") {
    find = new RegExp(find, "g");
  }
  const result = data.replace(find, replacement);
  fse.writeFileSync(filePath, result, { encoding: "utf8" });
};

const toUnderscoreFromCamel = (string) => {
  string = string.replace(/([A-Z])/g, function ($1) {
    return "_" + $1.toLowerCase();
  });

  if (string[0] === "_") {
    string = string.substring(1);
  }

  return string;
};

// getLicense return the license property value from Truffle config first and
// in case that the file doesn't exist it will fallback to package.json
const getLicense = (options) => {
  try {
    const license = (__webpack_require__(120553).detect)(options).license;
    if (license) {
      return license;
    }
  } catch (err) {
    console.log(err);
  }

  try {
    return __webpack_require__(876775)(path.join(process.cwd(), "package.json")).license;
  } catch {}
};

const Create = {
  contract: function (directory, name, options) {
    const from = templates.contract.filename;
    const to = path.join(directory, name + ".sol");

    if (!options.force && fse.existsSync(to)) {
      throw new Error("Can not create " + name + ".sol: file exists");
    }

    fse.copySync(from, to);

    replaceContents(to, templates.contract.name, name);
    const license = getLicense(options);
    if (license) {
      replaceContents(to, templates.contract.license, license);
    }
  },

  test: function (directory, name, options) {
    let underscored = toUnderscoreFromCamel(name);
    underscored = underscored.replace(/\./g, "_");
    const from = templates.test.filename;
    const to = path.join(directory, underscored + ".js");

    if (!options.force && fse.existsSync(to)) {
      throw new Error("Can not create " + underscored + ".js: file exists");
    }

    fse.copySync(from, to);
    replaceContents(to, templates.contract.name, name);
    replaceContents(to, templates.contract.variable, underscored);
  },

  migration: function (directory, name, options) {
    let underscored = toUnderscoreFromCamel(name || "");
    underscored = underscored.replace(/\./g, "_");
    const from = templates.migration.filename;
    let filename = (new Date().getTime() / 1000) | 0; // Only do seconds.

    if (name != null && name !== "") {
      filename += "_" + underscored;
    }

    filename += ".js";
    const to = path.join(directory, filename);

    if (!options.force && fse.existsSync(to)) {
      throw new Error("Can not create " + filename + ": file exists");
    }
    fse.copySync(from, to);
  }
};

module.exports = Create;


/***/ }),

/***/ 142863:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const colors = __webpack_require__(183196);
const TruffleError = __webpack_require__(673321);

class BuildError extends TruffleError {
  constructor(message) {
    message =
      "Error building:\n\n" +
      message +
      "\n\n" +
      colors.red("Build failed. See above.");
    super(message);
  }
}

module.exports = BuildError;


/***/ }),

/***/ 876775:
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = 876775;
module.exports = webpackEmptyContext;

/***/ }),

/***/ 648511:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Resolver = void 0;
const resolver_1 = __webpack_require__(629931);
Object.defineProperty(exports, "Resolver", ({ enumerable: true, get: function () { return resolver_1.Resolver; } }));
exports["default"] = resolver_1.Resolver;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 264956:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SolidityTest = void 0;
// @ts-ignore
const test_js_1 = __importDefault(__webpack_require__(950210));
// @ts-ignore
const suite_js_1 = __importDefault(__webpack_require__(483794));
const deployer_1 = __importDefault(__webpack_require__(400669));
const compile_solidity_1 = __webpack_require__(4273);
const compile_common_1 = __webpack_require__(529833);
const debug_1 = __importDefault(__webpack_require__(615158));
const debug = (0, debug_1.default)("lib:testing:soliditytest");
exports.SolidityTest = {
    define(abstraction, dependencyPaths, runner, mocha) {
        return __awaiter(this, void 0, void 0, function* () {
            const self = this;
            const suite = new suite_js_1.default(abstraction.contract_name, {});
            suite.timeout(runner.beforeTimeout);
            // Set up our runner's needs first.
            suite.beforeAll("prepare suite", function () {
                return __awaiter(this, void 0, void 0, function* () {
                    // This compiles some native contracts (including the assertion library
                    // contracts) which need to be compiled before initializing the runner
                    yield self.compileNewAbstractInterface.bind(this)(runner);
                    yield runner.initialize.bind(runner)();
                    runner.disableChecksOnEventDecoding(); //for handling of test events on Solidity <0.7.6 due to empty string problem
                    yield self.deployTestDependencies.bind(this)(abstraction, dependencyPaths, runner);
                });
            });
            suite.afterAll("clean up", function () {
                runner.reEnableChecksOnEventDecoding();
            });
            suite.beforeEach("before test", function () {
                return __awaiter(this, void 0, void 0, function* () {
                    yield runner.startTest(this);
                });
            });
            // Function that checks transaction logs to see if a test failed.
            function checkResultForFailure(result) {
                return __awaiter(this, void 0, void 0, function* () {
                    const logs = result.receipt.rawLogs;
                    for (const log of logs) {
                        const decodings = yield runner.decoder.decodeLog(log, {
                            disableChecks: true
                        });
                        for (const decoding of decodings) {
                            //check: is this a TestEvent?
                            //note: we don't check the argument names
                            if (decoding.abi.name === "TestEvent" &&
                                decoding.arguments.length === 2 &&
                                decoding.arguments[0].value.type.typeClass === "bool" &&
                                decoding.arguments[0].indexed &&
                                decoding.arguments[1].value.type.typeClass === "string" &&
                                !decoding.arguments[1].indexed) {
                                //if so: did the test fail?
                                if (!decoding.arguments[0].value.value.asBoolean) {
                                    //if so: extract the message
                                    let messageDecoding = decoding.arguments[1].value;
                                    let message;
                                    switch (messageDecoding.value.kind) {
                                        case "valid":
                                            message = messageDecoding.value.asString;
                                            break;
                                        case "malformed":
                                            //use buffer to convert hex to string
                                            //(this causes malformed UTF-8 to become U+FFFD)
                                            message = Buffer.from(messageDecoding.value.asHex.slice(2), "hex").toString();
                                    }
                                    throw new Error(message);
                                }
                            }
                        }
                    }
                });
            }
            // Add functions from test file.
            for (const item of abstraction.abi) {
                if (item.type !== "function") {
                    continue;
                }
                const hookTypes = ["beforeAll", "beforeEach", "afterAll", "afterEach"];
                for (const hookType of hookTypes) {
                    if (item.name.startsWith(hookType)) {
                        suite[hookType](item.name, () => __awaiter(this, void 0, void 0, function* () {
                            let deployed = yield abstraction.deployed();
                            yield checkResultForFailure(yield deployed[item.name]());
                        }));
                    }
                }
                if (item.name.startsWith("test")) {
                    const test = new test_js_1.default(item.name, () => __awaiter(this, void 0, void 0, function* () {
                        let deployed = yield abstraction.deployed();
                        yield checkResultForFailure(yield deployed[item.name]());
                    }));
                    test.timeout(runner.testTimeout);
                    suite.addTest(test);
                }
            }
            suite.afterEach("after test", function () {
                return __awaiter(this, void 0, void 0, function* () {
                    yield runner.endTest(this);
                });
            });
            mocha.suite.addSuite(suite);
        });
    },
    compileNewAbstractInterface(runner) {
        return __awaiter(this, void 0, void 0, function* () {
            debug("compiling");
            const config = runner.config;
            const truffleLibraries = [
                "truffle/Assert.sol",
                "truffle/AssertAddress.sol",
                "truffle/AssertAddressArray.sol",
                "truffle/AssertBalance.sol",
                "truffle/AssertBool.sol",
                "truffle/AssertBytes32.sol",
                "truffle/AssertBytes32Array.sol",
                "truffle/AssertGeneral.sol",
                "truffle/AssertInt.sol",
                "truffle/AssertIntArray.sol",
                "truffle/AssertString.sol",
                "truffle/AssertUint.sol",
                "truffle/AssertUintArray.sol",
                "truffle/DeployedAddresses.sol",
                "truffle/SafeSend.sol",
                "truffle/Console.sol"
            ];
            const { compilations } = yield compile_solidity_1.Compile.sourcesWithDependencies({
                paths: truffleLibraries,
                options: runner.config.with({
                    quiet: true
                })
            });
            const contracts = compilations.reduce((a, compilation) => {
                return a.concat(compilation.contracts);
            }, []);
            // Set network values.
            for (let contract of contracts) {
                contract.network_id = config.network_id;
                contract.default_network = config.default_network;
            }
            yield config.artifactor.saveAll(contracts.map(compile_common_1.Shims.NewToLegacy.forContract));
            debug("compiled");
        });
    },
    deployTestDependencies(abstraction, dependencyPaths, runner) {
        return __awaiter(this, void 0, void 0, function* () {
            debug("deploying %s", abstraction.contract_name);
            const deployer = new deployer_1.default(runner.config.with({
                logger: { log() { } }
            }));
            debug("starting deployer");
            yield deployer.start();
            const testLibraries = [
                "Assert",
                "AssertAddress",
                "AssertAddressArray",
                "AssertBalance",
                "AssertBool",
                "AssertBytes32",
                "AssertBytes32Array",
                "AssertGeneral",
                "AssertInt",
                "AssertIntArray",
                "AssertString",
                "AssertUint",
                "AssertUintArray",
                "DeployedAddresses",
                "Console"
            ];
            const testAbstractions = testLibraries.map(name => runner.config.resolver.require(`truffle/${name}.sol`));
            const SafeSend = runner.config.resolver.require("SafeSend");
            debug("deploying test libs");
            for (const testLib of testAbstractions) {
                yield deployer.deploy(testLib);
                yield deployer.link(testLib, abstraction);
            }
            debug("linking dependencies");
            for (const dependencyPath of dependencyPaths) {
                const dependency = runner.config.resolver.require(dependencyPath);
                if (dependency.isDeployed()) {
                    yield deployer.link(dependency, abstraction);
                }
            }
            debug("deploying contract");
            yield deployer.deploy(abstraction);
            const deployed = yield abstraction.deployed();
            let balance;
            if (deployed.initialBalance) {
                balance = yield deployed.initialBalance.call();
            }
            else {
                balance = 0;
            }
            if (balance !== 0) {
                yield deployer.deploy(SafeSend);
                const safeSend = yield SafeSend.deployed();
                yield safeSend.deliver(deployed.address, { value: balance });
            }
            debug("deployed %s", abstraction.contract_name);
        });
    }
};
//# sourceMappingURL=SolidityTest.js.map

/***/ }),

/***/ 583725:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Test = void 0;
const colors_1 = __importDefault(__webpack_require__(183196));
const chai_1 = __importDefault(__webpack_require__(614960));
const path = __webpack_require__(371017);
const interface_adapter_1 = __webpack_require__(936339);
const config_1 = __importDefault(__webpack_require__(120553));
const workflow_compile_1 = __importDefault(__webpack_require__(437017));
const resolver_1 = __webpack_require__(648511);
const TestRunner_1 = __webpack_require__(434036);
const SolidityTest_1 = __webpack_require__(264956);
const rangeUtils_1 = __importDefault(__webpack_require__(632739));
const expect = __importStar(__webpack_require__(414096));
const migrate_1 = __importDefault(__webpack_require__(522478));
const profiler_1 = __webpack_require__(422860);
const original_require_1 = __importDefault(__webpack_require__(344516));
const Codec = __importStar(__webpack_require__(20102));
const debug_1 = __importDefault(__webpack_require__(615158));
const debug = (0, debug_1.default)("lib:test");
const debugger_1 = __importDefault(__webpack_require__(692851));
let Mocha; // Late init with "mocha" or "mocha-parallel-tests"
chai_1.default.use((__webpack_require__(1465)["default"]));
exports.Test = {
    run: function (options, createInTestDebugFunction) {
        return __awaiter(this, void 0, void 0, function* () {
            expect.options(options, [
                "contracts_directory",
                "contracts_build_directory",
                "migrations_directory",
                "test_files",
                "network",
                "network_id",
                "provider"
            ]);
            // if test is used standalone, this function won't be setup like in core
            if (createInTestDebugFunction === undefined) {
                createInTestDebugFunction = () => {
                    return () => {
                        config.logger.log(`${colors_1.default.bold("Warning:")} Use of in-test debugging is only available when running ` +
                            `truffle test --debug.`);
                    };
                };
            }
            const config = config_1.default.default().merge(options);
            config.test_files = config.test_files.map((testFile) => {
                return path.resolve(testFile);
            });
            const interfaceAdapter = (0, interface_adapter_1.createInterfaceAdapter)({
                provider: config.provider,
                networkType: config.networks[config.network].type
            });
            // `accounts` will be populated before each contract() invocation
            // and passed to it so tests don't have to call it themselves.
            const web3 = new interface_adapter_1.Web3Shim({
                provider: config.provider,
                networkType: config.networks[config.network].type
                    ? config.networks[config.network].type
                    : "web3js"
            });
            // Override console.warn() because web3 outputs gross errors to it.
            // e.g., https://github.com/ethereum/web3.js/blob/master/lib/web3/allevents.js#L61
            // Output looks like this during tests: https://gist.github.com/tcoulter/1988349d1ec65ce6b958
            const warn = config.logger.warn;
            config.logger.warn = function (message) {
                if (message === "cannot find event for log") {
                    return;
                }
                else {
                    if (warn)
                        warn.apply(console, arguments);
                }
            };
            const mocha = this.createMocha(config);
            // set up a promise on this instance to resolve to
            // Mocha's "runner" returned by `mocha.run(...)`.
            //
            // do this upfront so that the promise is available
            // immediately, even though mocha.run happens at the very
            // end of this setup.
            let setMochaRunner;
            this.mochaRunner = new Promise(resolve => {
                setMochaRunner = resolve;
            });
            const jsTests = config.test_files.filter((file) => {
                return path.extname(file) !== ".sol";
            });
            const solTests = config.test_files.filter((file) => {
                return path.extname(file) === ".sol";
            });
            // Add Javascript tests because there's nothing we need to do with them.
            // Solidity tests will be handled later.
            jsTests.forEach((file) => {
                // There's an idiosyncracy in Mocha where the same file can't be run twice
                // unless we delete the `require` cache.
                // https://github.com/mochajs/mocha/issues/995
                delete original_require_1.default.cache[file];
                mocha.addFile(file);
            });
            const accounts = yield this.getAccounts(interfaceAdapter);
            const testResolver = new resolver_1.Resolver(config);
            const { compilations } = yield this.compileContractsWithTestFilesIfNeeded(solTests, config, testResolver);
            const testContracts = solTests.map((testFilePath) => {
                return testResolver.require(testFilePath);
            });
            const runner = new TestRunner_1.TestRunner(config);
            if (config.migrateNone || config["migrate-none"]) {
                if (config.events) {
                    config.events.emit("test:migration:skipped");
                }
            }
            else {
                yield this.performInitialDeploy(config, testResolver);
            }
            const sourcePaths = []
                .concat(...compilations.map((compilation) => compilation.sourceIndexes) //we don't need the indices here, just the paths
            )
                .filter(path => path); //make sure we don't pass in any undefined
            yield this.defineSolidityTests(mocha, testContracts, sourcePaths, runner);
            const debuggerCompilations = Codec.Compilations.Utils.shimCompilations(compilations);
            //for stack traces, we'll need to set up a light-mode debugger...
            let bugger;
            if (config.stacktrace) {
                debug("stacktraces on!");
                bugger = yield debugger_1.default.forProject({
                    compilations: debuggerCompilations,
                    provider: config.provider,
                    lightMode: true
                });
            }
            yield this.setJSTestGlobals({
                config,
                web3,
                interfaceAdapter,
                accounts,
                testResolver,
                runner,
                compilations: debuggerCompilations,
                bugger,
                createInTestDebugFunction
            });
            // Finally, run mocha.
            process.on("unhandledRejection", reason => {
                throw reason;
            });
            return new Promise(resolve => {
                const mochaRunner = mocha.run((failures) => {
                    config.logger.warn = warn;
                    resolve(failures);
                });
                // finish setting up the mocha runner so that the
                // previously-made promise resolves.
                setMochaRunner(mochaRunner);
            });
        });
    },
    createMocha: function (config) {
        // Allow people to specify config.mocha in their config.
        const mochaConfig = config.mocha || {};
        // Propagate --bail option to mocha
        mochaConfig.bail = config.bail;
        // If the command line overrides color usage, use that.
        if (config.color != null) {
            mochaConfig.color = config.color;
        }
        else if (config.colors != null) {
            // --colors is a mocha alias for --color
            mochaConfig.color = config.colors;
        }
        // Default to true if configuration isn't set anywhere.
        if (mochaConfig.color == null) {
            mochaConfig.color = true;
        }
        Mocha = mochaConfig.package || __webpack_require__(403270);
        delete mochaConfig.package;
        const mocha = new Mocha(mochaConfig);
        return mocha;
    },
    getAccounts: function (interfaceAdapter) {
        return interfaceAdapter.getAccounts();
    },
    compileContractsWithTestFilesIfNeeded: function (solidityTestFiles, config, testResolver) {
        return __awaiter(this, void 0, void 0, function* () {
            const updated = (yield profiler_1.Profiler.updated(config.with({ resolver: testResolver }))) || [];
            const compiler = config.compileNone || config["--compile-none"] ? "none" : config.compiler;
            let compileConfig = config.with({
                all: config.compileAll === true,
                compiler,
                files: updated.concat(solidityTestFiles),
                resolver: testResolver,
                quiet: config.runnerOutputOnly || config.quiet,
                quietWrite: true
            });
            if (config.compileAllDebug) {
                let versionString = ((compileConfig.compilers || {}).solc || {}).version;
                versionString = rangeUtils_1.default.resolveToRange(versionString);
                if (rangeUtils_1.default.rangeContainsAtLeast(versionString, "0.6.3")) {
                    compileConfig = compileConfig.merge({
                        compilers: {
                            solc: {
                                settings: {
                                    debug: {
                                        revertStrings: "debug"
                                    }
                                }
                            }
                        }
                    });
                }
                else {
                    config.logger.log(`\n${colors_1.default.bold("Warning:")} Extra revert string info requires Solidity v0.6.3 or higher. For more\n  information, see release notes <https://github.com/ethereum/solidity/releases/tag/v0.6.3>`);
                }
            }
            // Compile project contracts and test contracts
            const { contracts, compilations } = yield workflow_compile_1.default.compileAndSave(compileConfig);
            return {
                contracts,
                compilations
            };
        });
    },
    performInitialDeploy: function (config, resolver) {
        const migrateConfig = config.with({
            reset: true,
            resolver: resolver,
            quiet: true
        });
        return migrate_1.default.run(migrateConfig);
    },
    defineSolidityTests: (mocha, contracts, dependencyPaths, runner) => __awaiter(void 0, void 0, void 0, function* () {
        for (const contract of contracts) {
            yield SolidityTest_1.SolidityTest.define(contract, dependencyPaths, runner, mocha);
            debug("defined solidity tests for %s", contract.contractName);
        }
    }),
    setJSTestGlobals: function ({ config, web3, interfaceAdapter, accounts, testResolver, runner, compilations, bugger, //for stacktracing
    createInTestDebugFunction }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            // @ts-ignore
            global.interfaceAdapter = interfaceAdapter;
            // @ts-ignore
            global.web3 = web3;
            const resolvedChai = (_b = (_a = config.chai) === null || _a === void 0 ? void 0 : _a.package) !== null && _b !== void 0 ? _b : chai_1.default;
            // @ts-ignore
            global.assert = resolvedChai.assert;
            // @ts-ignore
            global.expect = resolvedChai.expect;
            // @ts-ignore
            global.artifacts = {
                require: (importPath) => {
                    let contract = testResolver.require(importPath);
                    //HACK: both of the following should go by means
                    //of the provisioner, but I'm not sure how to make
                    //that work at the moment
                    contract.reloadJson = function () {
                        const reloaded = testResolver.require(importPath);
                        this._json = reloaded._json;
                    };
                    if (bugger) {
                        contract.debugger = bugger;
                    }
                    return contract;
                }
            };
            // @ts-ignore
            global.config = config.normalize(config);
            // @ts-ignore
            global[config.debugGlobal] = createInTestDebugFunction({
                compilations,
                mochaRunner: this.mochaRunner,
                config
            });
            const template = function (tests) {
                this.timeout(runner.testTimeout);
                // @ts-ignore
                before("prepare suite", function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        this.timeout(runner.beforeTimeout);
                        yield runner.initialize();
                    });
                });
                // @ts-ignore
                beforeEach("before test", function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        yield runner.startTest();
                    });
                });
                // @ts-ignore
                afterEach("after test", function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        yield runner.endTest(this);
                    });
                });
                tests(accounts);
            };
            // @ts-ignore
            global.contract = function (name, tests) {
                Mocha.describe("Contract: " + name, function () {
                    template.bind(this, tests)();
                });
            };
            // @ts-ignore
            global.contract.only = function (name, tests) {
                Mocha.describe.only("Contract: " + name, function () {
                    template.bind(this, tests)();
                });
            };
            // @ts-ignore
            global.contract.skip = function (name, tests) {
                Mocha.describe.skip("Contract: " + name, function () {
                    template.bind(this, tests)();
                });
            };
        });
    }
};
//# sourceMappingURL=Test.js.map

/***/ }),

/***/ 434036:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TestRunner = void 0;
const interface_adapter_1 = __webpack_require__(936339);
const web3_utils_1 = __importDefault(__webpack_require__(118269));
const config_1 = __importDefault(__webpack_require__(120553));
const migrate_1 = __importDefault(__webpack_require__(522478));
const resolver_1 = __webpack_require__(648511);
const expect = __importStar(__webpack_require__(414096));
const util_1 = __importDefault(__webpack_require__(473837));
const fs_1 = __importDefault(__webpack_require__(657147));
const path_1 = __importDefault(__webpack_require__(371017));
const debug_1 = __importDefault(__webpack_require__(615158));
const debug = (0, debug_1.default)("lib:testing:testrunner");
const Decoder = __importStar(__webpack_require__(18852));
const Codec = __importStar(__webpack_require__(20102));
const os_1 = __importDefault(__webpack_require__(822037));
class TestRunner {
    constructor(options) {
        expect.options(options, [
            "resolver",
            "provider",
            "contracts_build_directory"
        ]);
        this.config = config_1.default.default().merge(options);
        this.logger = options.logger || console;
        this.provider = options.provider;
        this.canSnapshot = false;
        this.firstSnapshot = true;
        this.initialSnapshot = null;
        this.interfaceAdapter = (0, interface_adapter_1.createInterfaceAdapter)({
            provider: options.provider,
            networkType: options.networks[options.network].type
        });
        this.decoder = null;
        // For each test
        this.currentTestStartBlock = null;
        this.beforeTimeout =
            (options.mocha && options.mocha.before_timeout) || 120000;
        this.testTimeout = (options.mocha && options.mocha.timeout) || 300000;
    }
    disableChecksOnEventDecoding() {
        this.disableChecks = true; //used by Solidity testing due to empty string problem on Solidity <0.7.6
    }
    reEnableChecksOnEventDecoding() {
        this.disableChecks = false;
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            debug("initializing");
            this.config.resolver = new resolver_1.Resolver(this.config);
            if (this.firstSnapshot) {
                debug("taking first snapshot");
                try {
                    const initialSnapshot = yield this.snapshot();
                    this.canSnapshot = true;
                    this.initialSnapshot = initialSnapshot;
                }
                catch (error) {
                    debug("first snapshot failed");
                    debug("Error: %O", error);
                }
                this.firstSnapshot = false;
            }
            else {
                yield this.resetState();
            }
            //set up decoder
            let files = fs_1.default
                .readdirSync(this.config.contracts_build_directory)
                .filter(file => path_1.default.extname(file) === ".json");
            let data = files.map(file => fs_1.default.readFileSync(path_1.default.join(this.config.contracts_build_directory, file), "utf8"));
            let artifacts = data.map(text => JSON.parse(text));
            this.decoder = yield Decoder.forProject({
                provider: this.provider,
                projectInfo: { artifacts }
            });
        });
    }
    deploy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield migrate_1.default.run(this.config.with({
                reset: true,
                quiet: true
            }));
        });
    }
    resetState() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.canSnapshot) {
                debug("reverting...");
                yield this.revert(this.initialSnapshot);
                this.initialSnapshot = yield this.snapshot();
            }
            else {
                debug("redeploying...");
                yield this.deploy();
            }
        });
    }
    startTest() {
        return __awaiter(this, void 0, void 0, function* () {
            const blockNumber = web3_utils_1.default.toBN(yield this.interfaceAdapter.getBlockNumber());
            const one = web3_utils_1.default.toBN(1);
            // Add one in base 10
            this.currentTestStartBlock = blockNumber.add(one);
        });
    }
    endTest(mocha) {
        return __awaiter(this, void 0, void 0, function* () {
            // Skip logging if test passes and `show-events` option is not true
            if (mocha.currentTest.state !== "failed" && !this.config["show-events"]) {
                return;
            }
            function indent(input, indentation, initialPrefix = "") {
                const unindented = input.split(/\r?\n/);
                return unindented
                    .map((line, index) => index === 0
                    ? initialPrefix +
                        " ".repeat(indentation - initialPrefix.length) +
                        line
                    : " ".repeat(indentation) + line)
                    .join(os_1.default.EOL);
            }
            function printEvent(decoding, indentation = 0, initialPrefix = "") {
                debug("raw event: %O", decoding);
                const inspected = util_1.default.inspect(new Codec.Export.LogDecodingInspector(decoding), {
                    depth: null,
                    colors: true,
                    maxArrayLength: null,
                    breakLength: 80 - indentation //should this include prefix lengths as well?
                });
                return indent(inspected, indentation, initialPrefix);
            }
            if (this.decoder === null) {
                throw new Error("Decoder has not yet been initialized.");
            }
            if (this.currentTestStartBlock === null) {
                throw new Error("`currentTestStartBlock` has not been initialized. You must " +
                    "call `startTest` before calling `endTest`.");
            }
            const logs = yield this.decoder.events({
                //NOTE: block numbers shouldn't be over 2^53 so this
                //should be fine, but should change this once decoder
                //accepts more general types for blocks
                fromBlock: this.currentTestStartBlock.toNumber(),
                extras: "necessary",
                disableChecks: this.disableChecks //for Solidity testing
            });
            const userDefinedEventLogs = logs.filter(log => {
                return log.decodings.every(decoding => decoding.abi.name !== "TestEvent");
            });
            if (userDefinedEventLogs.length === 0) {
                this.logger.log("    > No events were emitted");
                return;
            }
            this.logger.log("\n    Events emitted during test:");
            this.logger.log("    ---------------------------");
            this.logger.log("");
            for (const log of userDefinedEventLogs) {
                switch (log.decodings.length) {
                    case 0:
                        this.logger.log(`    Warning: Could not decode event!`);
                        this.logger.log("");
                        break;
                    case 1:
                        this.logger.log(printEvent(log.decodings[0], 4));
                        this.logger.log("");
                        break;
                    default:
                        this.logger.log(`    Ambiguous event, possible interpretations:`);
                        for (const decoding of log.decodings) {
                            this.logger.log(printEvent(decoding, 6, "    * "));
                        }
                        this.logger.log("");
                        break;
                }
            }
            this.logger.log("\n    ---------------------------");
        });
    }
    snapshot() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.rpc("evm_snapshot")).result;
        });
    }
    revert(snapshot_id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.rpc("evm_revert", [snapshot_id]);
        });
    }
    rpc(method, arg) {
        return __awaiter(this, void 0, void 0, function* () {
            let request = {
                jsonrpc: "2.0",
                method: method,
                id: Date.now(),
                params: arg
            };
            let result = yield util_1.default.promisify(this.provider.send)(request);
            if (result.error != null) {
                throw new Error("RPC Error: " + (result.error.message || result.error));
            }
            return result;
        });
    }
}
exports.TestRunner = TestRunner;
//# sourceMappingURL=TestRunner.js.map

/***/ }),

/***/ 1465:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const web3_utils_1 = __importDefault(__webpack_require__(118269));
function default_1(chai, _utils) {
    const assert = chai.assert;
    chai.Assertion.addProperty("address", function () {
        this.assert(this._obj.length === 42, "expected #{this} to be a 42 character address (0x...)", "expected #{this} to not be a 42 character address (0x...)");
        // Convert address to a number. Make sure it's not zero.
        // Controversial: Technically there is that edge case where
        // all zeroes could be a valid address. But: This catches all
        // those cases where Ethereum returns 0x0000... if something fails.
        const number = web3_utils_1.default.toBN(this._obj);
        this.assert(!number.isZero(), "expected address #{this} to not be zero", "you shouldn't ever see this.");
    });
    assert.isAddress = function (val, _exp, msg) {
        return new chai.Assertion(val, msg).to.be.address;
    };
}
exports["default"] = default_1;
//# sourceMappingURL=assertions.js.map

/***/ }),

/***/ 826158:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
__webpack_unused_export__ = __webpack_unused_export__ = exports.Test = void 0;
var Test_1 = __webpack_require__(583725);
Object.defineProperty(exports, "Test", ({ enumerable: true, get: function () { return Test_1.Test; } }));
var SolidityTest_1 = __webpack_require__(264956);
__webpack_unused_export__ = ({ enumerable: true, get: function () { return SolidityTest_1.SolidityTest; } });
var TestRunner_1 = __webpack_require__(434036);
__webpack_unused_export__ = ({ enumerable: true, get: function () { return TestRunner_1.TestRunner; } });
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 781969:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const debug = __webpack_require__(615158)("workflow-compile");
const fse = __webpack_require__(655674);
const externalCompile = __webpack_require__(296412);
const solcCompile = __webpack_require__(4273);
const vyperCompile = __webpack_require__(874269);
const { Shims } = __webpack_require__(529833);
const expect = __webpack_require__(414096);
const Config = __webpack_require__(120553);
const Artifactor = __webpack_require__(529463);
const Resolver = (__webpack_require__(648511)["default"]);

const SUPPORTED_COMPILERS = {
  solc: solcCompile,
  vyper: vyperCompile,
  external: externalCompile
};

function prepareConfig(options) {
  expect.options(options, ["contracts_build_directory"]);

  expect.one(options, ["contracts_directory", "files"]);

  // Use a config object to ensure we get the default sources.
  const config = Config.default().merge(options);

  config.compilersInfo = {};

  if (!config.resolver) config.resolver = new Resolver(config);

  if (!config.artifactor) {
    config.artifactor = new Artifactor(config.contracts_build_directory);
  }

  return config;
}

const WorkflowCompile = {
  collectCompilations: async compilations => {
    let result = { outputs: {}, contracts: {} };

    for (let compilation of await Promise.all(compilations)) {
      let { compiler, output, contracts } = compilation;

      result.outputs[compiler] = output;

      for (let [name, abstraction] of Object.entries(contracts)) {
        result.contracts[name] = abstraction;
      }
    }

    return result;
  },

  // contracts_directory: String. Directory where .sol files can be found.
  // contracts_build_directory: String. Directory where .sol.js files can be found and written to.
  // all: Boolean. Compile all sources found. Defaults to true. If false, will compare sources against built files
  //      in the build directory to see what needs to be compiled.
  // network_id: network id to link saved contract artifacts.
  // quiet: Boolean. Suppress output. Defaults to false.
  // strict: Boolean. Return compiler warnings as errors. Defaults to false.
  compile: async function (options, callback) {
    const callbackPassed = typeof callback === "function";
    try {
      const config = prepareConfig(options);

      const compilers = config.compiler
        ? [config.compiler]
        : Object.keys(config.compilers);

      if (config.events) config.events.emit("compile:start");

      const compilations = await this.compileSources(config, compilers);

      const numberOfCompiledContracts = compilations.reduce(
        (number, compilation) => {
          return number + Object.keys(compilation.contracts).length;
        },
        0
      );

      if (numberOfCompiledContracts === 0 && config.events) {
        if (config.compileNone || config["compile-none"]) {
          config.events.emit("compile:skipped");
        } else {
          config.events.emit("compile:nothingToCompile");
        }
      }

      if (config.events) {
        config.events.emit("compile:succeed", {
          contractsBuildDirectory: config.contracts_build_directory,
          compilers: config.compilersInfo
        });
      }

      const result = await this.collectCompilations(compilations);
      if (callbackPassed) return callback(null, result);
      return result;
    } catch (error) {
      if (callbackPassed) return callback(error);
      throw error;
    }
  },

  compileSources: async function (config, compilers) {
    compilers = config.compiler
      ? config.compiler === "none"
        ? []
        : [config.compiler]
      : Object.keys(config.compilers);

    return Promise.all(
      compilers.map(async compiler => {
        const compile = SUPPORTED_COMPILERS[compiler];
        if (!compile) throw new Error("Unsupported compiler: " + compiler);

        config.compilersInfo = [];
        const { Compile } = compile;
        const compileFunc =
          config.all === true || config.compileAll === true
            ? Compile.all
            : Compile.necessary;

        const { compilations } = await compileFunc(config);
        const { contracts, output } = compilations.reduce(
          (a, compilation) => {
            for (const contract of compilation.contracts) {
              a.contracts[contract.contractName] =
                Shims.NewToLegacy.forContract(contract);
            }
            a.output = a.output.concat(compilation.sourceIndexes);
            return a;
          },
          {
            contracts: {},
            output: []
          }
        );

        let compilerUsed;
        if (compilations[0] && compilations[0].compiler) {
          compilerUsed = {
            name: compilations[0].compiler.name,
            version: compilations[0].compiler.version
          };
        }

        if (compilerUsed) {
          config.compilersInfo.push(compilerUsed);
        }

        if (contracts && Object.keys(contracts).length > 0) {
          await this.writeContracts(contracts, config);
        }

        return { compiler, contracts, output };
      })
    );
  },

  writeContracts: async (contracts, options) => {
    fse.ensureDirSync(options.contracts_build_directory);
    await options.artifactor.saveAll(contracts);
  }
};

module.exports = WorkflowCompile;


/***/ }),

/***/ 570972:
/***/ ((module) => {

"use strict";
module.exports = require("@truffle/db-loader");

/***/ }),

/***/ 692851:
/***/ ((module) => {

"use strict";
module.exports = require("@truffle/debugger");

/***/ }),

/***/ 711651:
/***/ ((module) => {

"use strict";
module.exports = require("ganache");

/***/ }),

/***/ 403270:
/***/ ((module) => {

"use strict";
module.exports = require("mocha");

/***/ }),

/***/ 344516:
/***/ ((module) => {

"use strict";
module.exports = require("original-require");

/***/ }),

/***/ 439491:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 950852:
/***/ ((module) => {

"use strict";
module.exports = require("async_hooks");

/***/ }),

/***/ 714300:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ 532081:
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ 722057:
/***/ ((module) => {

"use strict";
module.exports = require("constants");

/***/ }),

/***/ 706113:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 582361:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 657147:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 773292:
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ 113685:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 795687:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 498188:
/***/ ((module) => {

"use strict";
module.exports = require("module");

/***/ }),

/***/ 241808:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 822037:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 371017:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 285477:
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ 863477:
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ 514521:
/***/ ((module) => {

"use strict";
module.exports = require("readline");

/***/ }),

/***/ 12781:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 371576:
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ 924404:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 76224:
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ 257310:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ 473837:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 626144:
/***/ ((module) => {

"use strict";
module.exports = require("vm");

/***/ }),

/***/ 959796:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ 373755:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"@truffle/core","description":"Core code for Truffle command line tool","license":"MIT","author":"consensys.net","homepage":"https://github.com/trufflesuite/truffle#readme","repository":{"type":"git","url":"https://github.com/trufflesuite/truffle.git","directory":"packages/core"},"bugs":{"url":"https://github.com/trufflesuite/truffle/issues"},"version":"5.11.1","bin":{"truffle":"./cli.js","truffle-exec":"./exec.js"},"scripts":{"prepare":"exit 0","test":"mocha ./test/** ./test/**/*.js ./test/**/**/*.js"},"dependencies":{"@truffle/artifactor":"^4.0.195","@truffle/box":"^2.1.79","@truffle/code-utils":"^3.0.3","@truffle/codec":"^0.17.1","@truffle/compile-common":"^0.9.6","@truffle/compile-solidity":"^6.0.75","@truffle/config":"^1.3.59","@truffle/contract":"^4.6.27","@truffle/dashboard":"^0.4.1","@truffle/db-loader":"^0.2.32","@truffle/debug-utils":"^6.0.55","@truffle/debugger":"^12.1.1","@truffle/decoder":"^6.1.1","@truffle/deployer":"^3.3.23","@truffle/environment":"^0.2.156","@truffle/error":"^0.2.1","@truffle/expect":"^0.1.6","@truffle/fetch-and-compile":"^0.5.52","@truffle/from-hardhat":"^0.2.16","@truffle/hdwallet":"^0.1.3","@truffle/interface-adapter":"^0.5.35","@truffle/migrate":"^3.3.44","@truffle/plugins":"^0.2.14","@truffle/preserve":"^0.2.16","@truffle/promise-tracker":"^0.1.6","@truffle/provider":"^0.3.11","@truffle/provisioner":"^0.2.82","@truffle/require":"^2.1.39","@truffle/resolver":"^9.0.49","@truffle/source-fetcher":"^1.0.41","@truffle/spinners":"^0.2.4","@truffle/test":"^0.2.3","@truffle/workflow-compile":"^4.0.67","JSONStream":"^1.3.5","address":"^1.1.2","chai":"^4.2.0","colors":"1.4.0","command-exists":"^1.2.8","conf":"^10.0.2","debug":"^4.3.1","del":"^2.2.0","ethereum-cryptography":"1.1.2","fs-extra":"^9.1.0","ganache":"7.9.0","get-port":"^5.1.1","get-random-values":"^1.2.2","glob":"^7.1.6","inquirer":"8.2.2","iter-tools":"^7.5.0","js-interpreter":"2.2.0","lodash":"^4.17.21","mixpanel":"^0.17.0","mocha":"10.1.0","node-emoji":"^1.8.1","original-require":"^1.0.1","sane":"^4.0.2","semver":"7.5.2","source-map-support":"^0.5.19","spawn-args":"0.2.0","tmp":"^0.2.1","uuid":"^9.0.0","web3":"1.10.0","web3-utils":"1.10.0","xregexp":"^4.2.4","yargs":"^13.3.0"},"devDependencies":{"@truffle/blockchain-utils":"^0.1.8","app-module-path":"^2.2.0","chai-as-promised":"^7.1.1","memorystream":"^0.3.1","sinon":"^9.0.2"},"publishConfig":{"access":"public"},"authors":[{"name":"Tim Coulter","email":"tim@trufflesuite.com","url":"https://github.com/tcoulter"}],"namespace":"consensys","gitHead":"49350e77b09a5a4109acc08b869c0af07a85d3eb"}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, [5158,4785,3618,8074,6127,5674,6674,6857,406,6889,6434,1324,8716,2765,5358,3983,4866,5658,1698,6338,4886,560,4914,4877,6062,4738,708,8569,553,4273,102,4317,7017,2478,8852], () => (__webpack_require__(489244)))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundled.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = {
/******/ 			1297: 1
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.O.require = (chunkId) => (installedChunks[chunkId]);
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 1;
/******/ 			__webpack_require__.O();
/******/ 		};
/******/ 		
/******/ 		// require() chunk loading for javascript
/******/ 		__webpack_require__.f.require = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					installChunk(require("./" + __webpack_require__.u(chunkId)));
/******/ 				} else installedChunks[chunkId] = 1;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			__webpack_require__.e(5158);
/******/ 			__webpack_require__.e(4785);
/******/ 			__webpack_require__.e(3618);
/******/ 			__webpack_require__.e(8074);
/******/ 			__webpack_require__.e(6127);
/******/ 			__webpack_require__.e(5674);
/******/ 			__webpack_require__.e(6674);
/******/ 			__webpack_require__.e(6857);
/******/ 			__webpack_require__.e(406);
/******/ 			__webpack_require__.e(6889);
/******/ 			__webpack_require__.e(6434);
/******/ 			__webpack_require__.e(1324);
/******/ 			__webpack_require__.e(8716);
/******/ 			__webpack_require__.e(2765);
/******/ 			__webpack_require__.e(5358);
/******/ 			__webpack_require__.e(3983);
/******/ 			__webpack_require__.e(4866);
/******/ 			__webpack_require__.e(5658);
/******/ 			__webpack_require__.e(1698);
/******/ 			__webpack_require__.e(6338);
/******/ 			__webpack_require__.e(4886);
/******/ 			__webpack_require__.e(560);
/******/ 			__webpack_require__.e(4914);
/******/ 			__webpack_require__.e(4877);
/******/ 			__webpack_require__.e(6062);
/******/ 			__webpack_require__.e(4738);
/******/ 			__webpack_require__.e(708);
/******/ 			__webpack_require__.e(8569);
/******/ 			__webpack_require__.e(553);
/******/ 			__webpack_require__.e(4273);
/******/ 			__webpack_require__.e(102);
/******/ 			__webpack_require__.e(4317);
/******/ 			__webpack_require__.e(7017);
/******/ 			__webpack_require__.e(2478);
/******/ 			__webpack_require__.e(8852);
/******/ 			return next();
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;
//# sourceMappingURL=library.bundled.js.map